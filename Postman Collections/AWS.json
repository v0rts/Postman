{
  "info": {
    "_postman_id": "8dee9fd3-4560-4868-8bd6-e03d0e95ba41",
    "name": "AWS",
    "description": "A simple collection to monitor RDS Instances. Introduced in http://blog.getpostman.com/2017/12/19/audit-your-aws-infrastructure-with-postman.\n\nAuditing database instances involves the following steps:\n\n1. Fetch all instances using the provided access key id and secret token.\n2. If there are additional instances to be fetched beyond the response of the first fetch request, extract the pagination token from the response and use it to repeat the fetch request.\n3. Once there are no more instances to be fetched, save the list of instances as an environment variable.\n4. Iterate over the list, repeating the configuration description request for each instance in the list. Once the config for an instance is known, compare it to a set of expected results to ensure compliance.\n\nPS: This collection is most useful when run as a [monitor](https://www.getpostman.com/docs/postman/monitors/monitoring_apis_websites), so as to run such audits on a periodic basis. You can also configure the inbuilt Slack integration for Postman monitors, so as to recieve instance alerts when things are amiss.\n\n# Required environment variables:\nThis collection requires the following environment variables:\n\n|    Name    |                         Description                                          | Required |\n|:----------:|:----------------------------------------------------------------------------:|:--------:|\n|     id     |          The access key id for the audit AWS user                            |    Yes   |\n|    key     |        The secret access key for the audit AWS user                          |    Yes   |\n| awsRegion  | The region to audit environments in. Defaults to us-east-1                   |    No    |\n| maxRecords | The number of environments to retrieve per fetch call. Defaults to 100 (max) |    No    |",
    "schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
  },
  "item": [
    {
      "name": "RDS",
      "item": [
        {
          "name": "Describe RDS Instances",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9566e61b-6f7e-40c9-b3c0-ce355e58d03a",
                "exec": [
                  "var end,",
                  "    start,",
                  "    timestamp;",
                  "    msPerDay = 864e5; // milliseconds per day",
                  "",
                  "if (!(pm.environment.get('marker') && pm.environment.get('databases'))) {",
                  "    timestamp = new Date();",
                  "",
                  "    !pm.environment.get('maxRecords') && pm.environment.set('maxRecords', 100);",
                  "    !pm.environment.get('awsRegion') && pm.environment.set('awsRegion', 'us-east-1');",
                  "",
                  "    // set UTC milliseconds, seconds, minutes and hours to zero, effectively winding back to the start of the UTC day",
                  "    timestamp.setUTCMilliseconds(0);",
                  "    timestamp.setUTCSeconds(0);",
                  "    timestamp.setUTCMinutes(0);",
                  "    timestamp.setUTCHours(0);",
                  "",
                  "    pm.environment.set(\"secPerDay\", msPerDay / 1000);",
                  "    pm.environment.set('endTime', timestamp.toISOString());",
                  "    pm.environment.set('startTime', start = new Date(timestamp.valueOf() - msPerDay).toISOString());",
                  "",
                  "    pm.environment.set('marker', '');",
                  "    pm.environment.unset('databases');",
                  "",
                  "    console.info('Time range: ', start, '-', timestamp.toISOString());",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0ca48f26-4177-469f-be6a-010e937dabcb",
                "exec": [
                  "pm.test('should have a valid response', function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "",
                  "var dbs,",
                  "    response = _.get(xml2Json(responseBody), 'DescribeDBInstancesResponse.DescribeDBInstancesResult'),",
                  "    marker = _.get(response, 'Marker', ''),",
                  "    databases = _.get(response, 'DBInstances.DBInstance', []);",
                  "",
                  "try {",
                  "    dbs = JSON.parse(pm.environment.get('databases') || '[]');",
                  "}",
                  "catch (e) { // if the pre-existing list of production databases is invalid, log the error and move on.",
                  "    console.log(e);",
                  "}",
                  "",
                  "dbs = _.isArray(dbs) ? dbs.concat(databases) : databases;",
                  "pm.environment.set('databases', JSON.stringify(dbs));",
                  "",
                  "// if a pagination marker is present, save it to an environment variable and loop back to the current request",
                  "if (marker) {",
                  "    pm.environment.set('marker', marker);",
                  "    postman.setNextRequest(request.name);",
                  "}",
                  "else {",
                  "    pm.environment.has('marker') && pm.environment.unset('marker');",
                  "}",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "0bc5845b-6dbf-4c95-baf2-3b7476a4c284",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "awsv4",
              "awsv4": {
                "0": "{",
                "1": "\"",
                "2": "a",
                "3": "c",
                "4": "c",
                "5": "e",
                "6": "s",
                "7": "s",
                "8": "K",
                "9": "e",
                "10": "y",
                "11": "\"",
                "12": ":",
                "13": "\"",
                "14": "{",
                "15": "{",
                "16": "i",
                "17": "d",
                "18": "}",
                "19": "}",
                "20": "\"",
                "21": ",",
                "22": "\"",
                "23": "s",
                "24": "e",
                "25": "c",
                "26": "r",
                "27": "e",
                "28": "t",
                "29": "K",
                "30": "e",
                "31": "y",
                "32": "\"",
                "33": ":",
                "34": "\"",
                "35": "{",
                "36": "{",
                "37": "k",
                "38": "e",
                "39": "y",
                "40": "}",
                "41": "}",
                "42": "\"",
                "43": ",",
                "44": "\"",
                "45": "r",
                "46": "e",
                "47": "g",
                "48": "i",
                "49": "o",
                "50": "n",
                "51": "\"",
                "52": ":",
                "53": "\"",
                "54": "u",
                "55": "s",
                "56": "-",
                "57": "e",
                "58": "a",
                "59": "s",
                "60": "t",
                "61": "-",
                "62": "1",
                "63": "\"",
                "64": ",",
                "65": "\"",
                "66": "s",
                "67": "e",
                "68": "r",
                "69": "v",
                "70": "i",
                "71": "c",
                "72": "e",
                "73": "\"",
                "74": ":",
                "75": "\"",
                "76": "r",
                "77": "d",
                "78": "s",
                "79": "\"",
                "80": ",",
                "81": "\"",
                "82": "s",
                "83": "e",
                "84": "s",
                "85": "s",
                "86": "i",
                "87": "o",
                "88": "n",
                "89": "T",
                "90": "o",
                "91": "k",
                "92": "e",
                "93": "n",
                "94": "\"",
                "95": ":",
                "96": "\"",
                "97": "\"",
                "98": "}",
                "region": "{{awsRegion}}",
                "service": "rds",
                "serviceName": "rds",
                "secretKey": "{{key}}",
                "accessKey": "{{id}}"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "X-Amz-Date",
                "value": "20170420T144512Z"
              },
              {
                "key": "Authorization",
                "value": "AWS4-HMAC-SHA256 Credential=AKIAJSC5VPELVYZXCMLA/20170420/us-east-1/rds/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=ebd34fffe1f5137e13831362cd9f151b222301ebc0c74948eb32b2ceabbba1ca"
              }
            ],
            "url": {
              "raw": "https://rds.{{awsRegion}}.amazonaws.com/?Operation=DescribeDBInstances&Version=2014-10-31&MaxRecords={{maxRecords}}&Marker={{marker}}",
              "protocol": "https",
              "host": [
                "rds",
                "{{awsRegion}}",
                "amazonaws",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "Operation",
                  "value": "DescribeDBInstances"
                },
                {
                  "key": "Version",
                  "value": "2014-10-31"
                },
                {
                  "key": "MaxRecords",
                  "value": "{{maxRecords}}"
                },
                {
                  "key": "Marker",
                  "value": "{{marker}}"
                }
              ]
            },
            "description": "An `AWS Auth Signature` verified `GET` request to fetch all RDS instances under the Postman organization."
          },
          "response": []
        },
        {
          "name": "Get Metric Statistics: FreeStorageSpace",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "9c1d4a90-9865-4347-b757-a11358f02e9c",
                "type": "text/javascript",
                "exec": [
                  "var db,",
                  "    databases;",
                  "",
                  "try {",
                  "    databases = JSON.parse(pm.environment.get('databases'));",
                  "    db = _.isFunction(databases.pop) && databases.pop();",
                  "",
                  "    // Set relevant identifiers for the current database",
                  "    pm.environment.set('db', JSON.stringify(db));",
                  "    pm.environment.set('dbIdentifier', db.DBInstanceIdentifier);",
                  "",
                  "    // update the databases list",
                  "    pm.environment.set('databases', JSON.stringify(databases));",
                  "} catch (e) {",
                  "    console.log(e);",
                  "}",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "843d5957-75bb-478c-929e-bab7b0533d43",
                "type": "text/javascript",
                "exec": [
                  "pm.test('should have a valid response', function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "",
                  "var freeBytes = _.get(xml2Json(responseBody), 'GetMetricStatisticsResponse.GetMetricStatisticsResult.Datapoints.member.Average');",
                  "",
                  "pm.environment.set('freeBytes', Number(freeBytes));",
                  ""
                ]
              }
            }
          ],
          "_postman_id": "0c0255c7-b9e6-4b31-9dbc-20791b0b30da",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "awsv4",
              "awsv4": {
                "0": "{",
                "1": "\"",
                "2": "a",
                "3": "c",
                "4": "c",
                "5": "e",
                "6": "s",
                "7": "s",
                "8": "K",
                "9": "e",
                "10": "y",
                "11": "\"",
                "12": ":",
                "13": "\"",
                "14": "{",
                "15": "{",
                "16": "i",
                "17": "d",
                "18": "}",
                "19": "}",
                "20": "\"",
                "21": ",",
                "22": "\"",
                "23": "s",
                "24": "e",
                "25": "c",
                "26": "r",
                "27": "e",
                "28": "t",
                "29": "K",
                "30": "e",
                "31": "y",
                "32": "\"",
                "33": ":",
                "34": "\"",
                "35": "{",
                "36": "{",
                "37": "k",
                "38": "e",
                "39": "y",
                "40": "}",
                "41": "}",
                "42": "\"",
                "43": ",",
                "44": "\"",
                "45": "r",
                "46": "e",
                "47": "g",
                "48": "i",
                "49": "o",
                "50": "n",
                "51": "\"",
                "52": ":",
                "53": "\"",
                "54": "u",
                "55": "s",
                "56": "-",
                "57": "e",
                "58": "a",
                "59": "s",
                "60": "t",
                "61": "-",
                "62": "1",
                "63": "\"",
                "64": ",",
                "65": "\"",
                "66": "s",
                "67": "e",
                "68": "r",
                "69": "v",
                "70": "i",
                "71": "c",
                "72": "e",
                "73": "\"",
                "74": ":",
                "75": "\"",
                "76": "m",
                "77": "o",
                "78": "n",
                "79": "i",
                "80": "t",
                "81": "o",
                "82": "r",
                "83": "i",
                "84": "n",
                "85": "g",
                "86": "\"",
                "87": ",",
                "88": "\"",
                "89": "s",
                "90": "e",
                "91": "s",
                "92": "s",
                "93": "i",
                "94": "o",
                "95": "n",
                "96": "T",
                "97": "o",
                "98": "k",
                "99": "e",
                "100": "n",
                "101": "\"",
                "102": ":",
                "103": "\"",
                "104": "\"",
                "105": "}",
                "region": "{{awsRegion}}",
                "service": "monitoring",
                "serviceName": "monitoring",
                "secretKey": "{{key}}",
                "accessKey": "{{id}}"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "X-Amz-Date",
                "value": "20170410T084500Z"
              },
              {
                "key": "Authorization",
                "value": "AWS4-HMAC-SHA256 Credential=AKIAJSC5VPELVYZXCMLA/20170410/us-east-1/monitoring/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=0559c1f9d1644bf191eebede289e40a21cff0d86fe3bb41c95294bf05bd5e3de"
              }
            ],
            "url": {
              "raw": "https://monitoring.{{awsRegion}}.amazonaws.com/?Dimensions.member.1.Name=DBInstanceIdentifier&Dimensions.member.1.Value={{dbIdentifier}}&MetricName=FreeStorageSpace&Namespace=AWS/RDS&Operation=GetMetricStatistics&Period={{secPerDay}}&Statistics.member.1=Average&Unit=Bytes&Version=2010-08-01&StartTime={{startTime}}&EndTime={{endTime}}",
              "protocol": "https",
              "host": [
                "monitoring",
                "{{awsRegion}}",
                "amazonaws",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "Dimensions.member.1.Name",
                  "value": "DBInstanceIdentifier"
                },
                {
                  "key": "Dimensions.member.1.Value",
                  "value": "{{dbIdentifier}}"
                },
                {
                  "key": "MetricName",
                  "value": "FreeStorageSpace"
                },
                {
                  "key": "Namespace",
                  "value": "AWS/RDS"
                },
                {
                  "key": "Operation",
                  "value": "GetMetricStatistics"
                },
                {
                  "key": "Period",
                  "value": "{{secPerDay}}"
                },
                {
                  "key": "Statistics.member.1",
                  "value": "Average"
                },
                {
                  "key": "Unit",
                  "value": "Bytes"
                },
                {
                  "key": "Version",
                  "value": "2010-08-01"
                },
                {
                  "key": "StartTime",
                  "value": "{{startTime}}"
                },
                {
                  "key": "EndTime",
                  "value": "{{endTime}}"
                }
              ]
            },
            "description": "An `AWS Auth Signature` verified `GET` request to fetch the available free storage space (in bytes) for the current database instance. A threshold of > 20% is enforced for best results."
          },
          "response": []
        },
        {
          "name": "Check RDS Instance tags",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "43be17da-d56b-41f6-945e-a1dc00c425d4",
                "type": "text/javascript",
                "exec": [
                  "var db;",
                  "",
                  "try {",
                  "    db = JSON.parse(pm.environment.get('db'));",
                  "} catch (e) {",
                  "    db = {};",
                  "}",
                  "",
                  "pm.environment.set('arn', db.DBInstanceArn);",
                  ""
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "de07b54c-ea88-4a27-98d6-d4a5a3d8b8a2",
                "type": "text/javascript",
                "exec": [
                  "pm.test('should have a valid response', function () {",
                  "    pm.response.to.be.ok;",
                  "});",
                  "",
                  "var db,",
                  "    tags,",
                  "    isMysql,",
                  "    storage,",
                  "    secGroup,",
                  "    optGroup,",
                  "    databases,",
                  "    paramGroup,",
                  "    _tests = {}, // creating a separate object so that test results can be shown cleanly",
                  "    validOffset,",
                  "    rawBackupWindow,",
                  "    freeSpacePercent,",
                  "    backupWindowLength,",
                  "    rawMaintainenceWindow,",
                  "    maintainenceBackupOffset,",
                  "    maintainenceWindowLength,",
                  "    identifier = pm.environment.get('dbIdentifier'),",
                  "    freeBytes = Number(pm.environment.get('freeBytes')),",
                  "    rawTags = _.get(xml2Json(responseBody), 'ListTagsForResourceResponse.ListTagsForResourceResult.TagList.Tag'),",
                  "",
                  "    /**",
                  "     * Calculates the difference in minutes between two HH:MM timestamps.",
                  "     * ",
                  "     * @param {String[]} hm - An array of stringified timestamps in HH:MM format.",
                  "     * @returns {Number} - The absolute number of minutes between the two timestamps.",
                  "     */",
                  "    hmDiff = function (hm) {",
                  "        var one = hm[0].split(':').map(Number),",
                  "            two = hm[1].split(':').map(Number);",
                  "",
                  "        return Math.abs(one[0] - two[0]) * 60 + Math.abs(one[1] - two[1]);",
                  "    };",
                  "",
                  "try {",
                  "    db = JSON.parse(pm.environment.get('db'));",
                  "    _tests[`${identifier} has a valid data object`] = !_.isEmpty(db) && _.isObject(db);",
                  "",
                  "    isMysql = db.Engine === 'mysql';",
                  "    storage = Number(db.AllocatedStorage);",
                  "    isMaster = db.ReadReplicaSourceDBInstanceIdentifier;",
                  "} catch (e) {",
                  "    console.log(e);",
                  "    return (tests[`${identifier} has a valid data object`] = false); // if JSON.parse errors out, fail the actual tests (not _tests) and bail out",
                  "}",
                  "",
                  "_tests[`${identifier} Raw tag list is valid`] = !_.isEmpty(rawTags) && _.isArray(rawTags);",
                  "",
                  "tags = _.transform(rawTags, function (aggregator, tag) {",
                  "    aggregator[tag.Key] = tag.Value;",
                  "}, {});",
                  "",
                  "_tests[`${identifier} processed tags object is a valid, non-empty object`] = !_.isEmpty(tags) && _.isObject(tags);",
                  "",
                  "// Validate Cost Allocation Tags for the current database",
                  "// the tag names used in the `tags` object below might vary depending on your setup",
                  "_tests[`${identifier} name must be set (${tags.name})`] = tags.name;",
                  "_tests[`${identifier} type must be set (${tags.type})`] = tags.type;",
                  "_tests[`${identifier} environment must be set correctly (${tags.environment})`] = tags.environment;",
                  "",
                  "_tests[`${identifier} Total storage is a valid number (${storage} GB)`] = !isNaN(storage);",
                  "",
                  "if (isMysql) {",
                  "    _tests[`${identifier} Free space is a valid number (${freeBytes} bytes)`] = !isNaN(freeBytes);",
                  "",
                  "    freeSpacePercent = (freeBytes * 100) / (storage * 1024 * 1024 * 1024);",
                  "    _tests[`${identifier} has more than 20% free space (${freeSpacePercent.toFixed(2)} %)`] = freeSpacePercent > 20;",
                  "}",
                  "",
                  "_tests[`${identifier} is running (${db.DBInstanceStatus})`] = db.DBInstanceStatus === 'available';",
                  "_tests[`${identifier} has allocated storage >= 10 GB (${storage} GB)`] = storage >= 10;",
                  "isMaster && (_tests[`${identifier} has a valid instance class (${db.DBInstanceClass})`] = db.DBInstanceClass);",
                  "",
                  "_tests[`${identifier} uses valid db Engine (${db.Engine})`] = db.Engine;",
                  "_tests[`${identifier} has a valid engine version (${db.EngineVersion})`] = db.EngineVersion;",
                  "",
                  "_tests[`${identifier} database name is in lowercase, with letters and hyphens, and underscores only (${db.DBName})`] = /^[a-z-_]+$/.test(db.DBName);",
                  "",
                  "// you might also want to add a test to validate the naming convention for your RDS instances",
                  "// _tests[`${identifier} database name should be valid`] = identifier;",
                  "",
                  "_tests[`${identifier} has enhanced monitoring enabled (${db.MonitoringInterval})`] = db.MonitoringInterval !== '0';",
                  "_tests[`${identifier} has copy tags to snapshot enabled (${db.CopyTagsToSnapshot})`] = db.CopyTagsToSnapshot === 'true';",
                  "",
                  "if (isMaster) {",
                  "    isMysql && (_tests[`${identifier} has a backup retention period of one week or more (${db.BackupRetentionPeriod} days)`] = Number(db.BackupRetentionPeriod) >= 7);",
                  "",
                  "    if (db.PreferredBackupWindow) {",
                  "        rawBackupWindow = db.PreferredBackupWindow.split('-');",
                  "        backupWindowLength = hmDiff(rawBackupWindow);",
                  "",
                  "        _tests[`${identifier} has an automatic backup window of 1 hour if it is not read replica (${backupWindowLength} minutes)`] = backupWindowLength >= 60;",
                  "    }",
                  "    else {",
                  "        _tests[`${identifier} has an automatic backup window of 1 hour if it is not read replica`] = false;",
                  "    }",
                  "",
                  "    rawMaintainenceWindow = (db.PreferredMaintenanceWindow.match(/^[a-z]{3}:(\\d{2}:\\d{2})-[a-z]{3}:(\\d{2}:\\d{2})$/i)).slice(1, 3);",
                  "",
                  "    _tests[`${identifier} has auto minor version upgrades enabled (${db.AutoMinorVersionUpgrade})`] = db.AutoMinorVersionUpgrade === 'true';",
                  "    _tests[`${identifier} has auto minor version upgrades on Monday (${db.PreferredMaintenanceWindow})`] = /^mon:(\\d{2}:\\d{2})-mon:(\\d{2}:\\d{2})$/.test(db.PreferredMaintenanceWindow);",
                  "",
                  "    maintainenceWindowLength = hmDiff(rawMaintainenceWindow);",
                  "    _tests[`${identifier} has auto minor version upgrades for one hour (${maintainenceWindowLength} minutes)`] = maintainenceWindowLength >= 60;",
                  "",
                  "    maintainenceBackupOffset = hmDiff([rawMaintainenceWindow[0], rawBackupWindow[1]]);",
                  "    validOffset = maintainenceBackupOffset > 0;",
                  "    _tests[`${identifier} has maintainence scheduled after backup (maintainence is ${maintainenceBackupOffset} minutes ${validOffset ? 'after' : 'before' } backup)`] = validOffset;",
                  "}",
                  "",
                  "optGroup = _.get(db, 'OptionGroupMemberships.OptionGroupMembership.OptionGroupName');",
                  "_tests[`${identifier} has a valid option group (${optGroup})`] = optGroup;",
                  "",
                  "_tests[`${identifier} has multi AZ enabled (${db.MultiAZ})`] = db.MultiAZ === 'true';",
                  "",
                  "_tests[`${identifier} uses encrypted storage (${db.StorageEncrypted})`] = db.StorageEncrypted === 'true';",
                  "",
                  "paramGroup = _.get(db, 'DBParameterGroups.DBParameterGroup.DBParameterGroupName');",
                  "_tests[`${identifier} parameter group must be valid (${paramGroup})`] = paramGroup;",
                  "",
                  "_tests[`${identifier} should have a valid VPC configured (${db.DBSubnetGroup.VpcId})`] = db.DBSubnetGroup.VpcId;",
                  "",
                  "secGroup = _.get(db, 'VpcSecurityGroups.VpcSecurityGroupMembership', {});",
                  "",
                  "_tests[`${identifier} should use a valid security group (${secGroup.VpcSecurityGroupId})`] = secGroup.VpcSecurityGroupId;",
                  "_tests[`${identifier} security group should be active (${secGroup.Status})`] = secGroup.Status === 'active';",
                  "_tests[`${identifier} should not be publicly accessible (${db.PubliclyAccessible})`] = db.PubliclyAccessible === 'false';",
                  "",
                  "_tests[`${identifier} should have a valid master username (${db.MasterUsername})`] = db.MasterUsername;",
                  "",
                  "// filter down to all failed tests for the current database",
                  "_.assign(tests, _tests = _.reduce(_tests, function (result, value, key) {",
                  "    !value && (result[key] = value);",
                  "    return result;",
                  "}, {}));",
                  "",
                  "_.isEmpty(_tests) && (tests[`${identifier} passed all audit checks`] = true);",
                  "",
                  "try {",
                  "    databases = JSON.parse(pm.environment.get('databases'));",
                  "",
                  "    // do not fail tests for an empty array, as a check is made based on emptiness to stop or loop back for the next db",
                  "    tests['DB list is a valid array'] = _.isArray(databases);",
                  "}",
                  "catch (e) {",
                  "    tests['DB list is a valid array'] = false;",
                  "}",
                  "",
                  "postman.setNextRequest(_.isEmpty(databases) ? null : 'Get Metric Statistics: FreeStorageSpace');"
                ]
              }
            }
          ],
          "_postman_id": "a78aa400-f203-4403-bd38-497dcdbc85b7",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "awsv4",
              "awsv4": {
                "0": "{",
                "1": "\"",
                "2": "a",
                "3": "c",
                "4": "c",
                "5": "e",
                "6": "s",
                "7": "s",
                "8": "K",
                "9": "e",
                "10": "y",
                "11": "\"",
                "12": ":",
                "13": "\"",
                "14": "{",
                "15": "{",
                "16": "i",
                "17": "d",
                "18": "}",
                "19": "}",
                "20": "\"",
                "21": ",",
                "22": "\"",
                "23": "s",
                "24": "e",
                "25": "c",
                "26": "r",
                "27": "e",
                "28": "t",
                "29": "K",
                "30": "e",
                "31": "y",
                "32": "\"",
                "33": ":",
                "34": "\"",
                "35": "{",
                "36": "{",
                "37": "k",
                "38": "e",
                "39": "y",
                "40": "}",
                "41": "}",
                "42": "\"",
                "43": ",",
                "44": "\"",
                "45": "r",
                "46": "e",
                "47": "g",
                "48": "i",
                "49": "o",
                "50": "n",
                "51": "\"",
                "52": ":",
                "53": "\"",
                "54": "u",
                "55": "s",
                "56": "-",
                "57": "e",
                "58": "a",
                "59": "s",
                "60": "t",
                "61": "-",
                "62": "1",
                "63": "\"",
                "64": ",",
                "65": "\"",
                "66": "s",
                "67": "e",
                "68": "r",
                "69": "v",
                "70": "i",
                "71": "c",
                "72": "e",
                "73": "\"",
                "74": ":",
                "75": "\"",
                "76": "r",
                "77": "d",
                "78": "s",
                "79": "\"",
                "80": ",",
                "81": "\"",
                "82": "s",
                "83": "e",
                "84": "s",
                "85": "s",
                "86": "i",
                "87": "o",
                "88": "n",
                "89": "T",
                "90": "o",
                "91": "k",
                "92": "e",
                "93": "n",
                "94": "\"",
                "95": ":",
                "96": "\"",
                "97": "\"",
                "98": "}",
                "region": "{{awsRegion}}",
                "service": "rds",
                "serviceName": "rds",
                "accessKey": "{{id}}",
                "secretKey": "{{key}}"
              }
            },
            "method": "GET",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "X-Amz-Date",
                "value": "20170410T102349Z"
              },
              {
                "key": "Authorization",
                "value": "AWS4-HMAC-SHA256 Credential=AKIAJSC5VPELVYZXCMLA/20170410/us-east-1/rds/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=8c2697df4051204e79c2fc126caf0d6165d1df297a187503feccd993676279e0"
              }
            ],
            "url": {
              "raw": "https://rds.{{awsRegion}}.amazonaws.com/?Operation=ListTagsForResource&Version=2014-10-31&ResourceName={{arn}}",
              "protocol": "https",
              "host": [
                "rds",
                "{{awsRegion}}",
                "amazonaws",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "Operation",
                  "value": "ListTagsForResource"
                },
                {
                  "key": "Version",
                  "value": "2014-10-31"
                },
                {
                  "key": "ResourceName",
                  "value": "{{arn}}"
                }
              ]
            },
            "description": "An `AWS Auth Signature` verified `GET` request to check all RDS instance tags under the Postman organization."
          },
          "response": []
        },
        {
          "name": " Describe RDS Instances",
          "_postman_id": "e201f7da-7c4c-45be-b2f5-8db737f51b9f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "AWS4-HMAC-SHA256 Credential=AKIAJSC5VPELVYZXCMLA/20170420/us-east-1/rds/aws4_request, SignedHeaders=content-type;host;x-amz-date, Signature=ebd34fffe1f5137e13831362cd9f151b222301ebc0c74948eb32b2ceabbba1ca"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              },
              {
                "key": "X-Amz-Date",
                "value": "20170420T144512Z"
              }
            ],
            "body": {
              "mode": "formdata",
              "formdata": []
            },
            "url": {
              "raw": "https://rds.{{awsRegion}}.amazonaws.com/?Operation=DescribeDBInstances&Version=2014-10-31&MaxRecords={{maxRecords}}&Marker={{marker}}",
              "protocol": "https",
              "host": [
                "rds",
                "{{awsRegion}}",
                "amazonaws",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "Operation",
                  "value": "DescribeDBInstances"
                },
                {
                  "key": "Version",
                  "value": "2014-10-31"
                },
                {
                  "key": "MaxRecords",
                  "value": "{{maxRecords}}"
                },
                {
                  "key": "Marker",
                  "value": "{{marker}}"
                }
              ]
            }
          },
          "response": []
        }
      ],
      "_postman_id": "dd1f4756-3061-4b1d-9f4e-11858c31a755"
    },
    {
      "name": "#Action=Withdraw Byoip Cidr",
      "item": [
        {
          "name": "GET Withdraw Byoip Cidr",
          "_postman_id": "5eacb5e1-1503-4ccc-8f72-32d50e13f33f",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "",
                "description": "Amazon Signature authorization v4"
              },
              {
                "key": "X-Amz-Content-Sha256",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Date",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Algorithm",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Credential",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Security-Token",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Signature",
                "value": "<string>"
              },
              {
                "key": "X-Amz-SignedHeaders",
                "value": "<string>"
              }
            ],
            "url": {
              "raw": "http://ec2.{{region}}.amazonaws.com/?Cidr=<string>&DryRun=<boolean>&Action=<string>&Version=<string>#Action=WithdrawByoipCidr",
              "protocol": "http",
              "host": [
                "ec2",
                "{{region}}",
                "amazonaws",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "description": "The public IPv4 address range, in CIDR notation.",
                  "key": "Cidr",
                  "value": "<string>"
                },
                {
                  "description": "Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.",
                  "key": "DryRun",
                  "value": "<boolean>"
                },
                {
                  "key": "Action",
                  "value": "<string>"
                },
                {
                  "key": "Version",
                  "value": "<string>"
                }
              ],
              "hash": "Action=WithdrawByoipCidr",
              "variable": [
                {
                  "id": "4e3769c7-94f8-413b-9f33-483fc1f4d268",
                  "key": "region",
                  "value": "{{region}}",
                  "type": "string",
                  "description": "The AWS region (This can only be one of us-east-1,us-east-2,us-west-1,us-west-2,us-gov-west-1,us-gov-east-1,ca-central-1,eu-north-1,eu-west-1,eu-west-2,eu-west-3,eu-central-1,ap-northeast-1,ap-northeast-2,ap-northeast-3,ap-southeast-1,ap-southeast-2,ap-south-1,sa-east-1)"
                }
              ]
            },
            "description": "<p>Stops advertising an IPv4 address range that is provisioned as an address pool.</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.</p>"
          },
          "response": [
            {
              "id": "65398efe-414f-4087-9791-e107237b3de1",
              "name": "Success",
              "originalRequest": {
                "method": "GET",
                "header": [
                  {
                    "description": {
                      "content": "Amazon Signature authorization v4",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": ""
                  },
                  {
                    "key": "X-Amz-Content-Sha256",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Date",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Algorithm",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Credential",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Security-Token",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Signature",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-SignedHeaders",
                    "value": "<string>"
                  }
                ],
                "url": {
                  "raw": "http://ec2.{{region}}.amazonaws.com/?Cidr=<string>&DryRun=<boolean>&Action=<string>&Version=<string>#Action=WithdrawByoipCidr",
                  "protocol": "http",
                  "host": [
                    "ec2",
                    "{{region}}",
                    "amazonaws",
                    "com"
                  ],
                  "path": [
                    ""
                  ],
                  "query": [
                    {
                      "key": "Cidr",
                      "value": "<string>"
                    },
                    {
                      "key": "DryRun",
                      "value": "<boolean>"
                    },
                    {
                      "key": "Action",
                      "value": "<string>"
                    },
                    {
                      "key": "Version",
                      "value": "<string>"
                    }
                  ],
                  "hash": "Action=WithdrawByoipCidr"
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        },
        {
          "name": "POST Withdraw Byoip Cidr",
          "_postman_id": "80dc19f5-b9d2-4870-98bb-7379075e2ec8",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "",
                "description": "Amazon Signature authorization v4"
              },
              {
                "key": "X-Amz-Content-Sha256",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Date",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Algorithm",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Credential",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Security-Token",
                "value": "<string>"
              },
              {
                "key": "X-Amz-Signature",
                "value": "<string>"
              },
              {
                "key": "X-Amz-SignedHeaders",
                "value": "<string>"
              },
              {
                "key": "Content-Type",
                "value": "application/x-www-form-urlencoded"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "Cidr",
                  "value": "<string>"
                },
                {
                  "key": "DryRun",
                  "value": "<boolean>"
                }
              ]
            },
            "url": {
              "raw": "http://ec2.{{region}}.amazonaws.com/?Action=<string>&Version=<string>#Action=WithdrawByoipCidr",
              "protocol": "http",
              "host": [
                "ec2",
                "{{region}}",
                "amazonaws",
                "com"
              ],
              "path": [
                ""
              ],
              "query": [
                {
                  "key": "Action",
                  "value": "<string>"
                },
                {
                  "key": "Version",
                  "value": "<string>"
                }
              ],
              "hash": "Action=WithdrawByoipCidr",
              "variable": [
                {
                  "id": "72b404db-c2ac-445e-8f09-6567a7860e9c",
                  "key": "region",
                  "value": "{{region}}",
                  "type": "string",
                  "description": "The AWS region (This can only be one of us-east-1,us-east-2,us-west-1,us-west-2,us-gov-west-1,us-gov-east-1,ca-central-1,eu-north-1,eu-west-1,eu-west-2,eu-west-3,eu-central-1,ap-northeast-1,ap-northeast-2,ap-northeast-3,ap-southeast-1,ap-southeast-2,ap-south-1,sa-east-1)"
                }
              ]
            },
            "description": "<p>Stops advertising an IPv4 address range that is provisioned as an address pool.</p> <p>You can perform this operation at most once every 10 seconds, even if you specify different address ranges each time.</p> <p>It can take a few minutes before traffic to the specified addresses stops routing to AWS because of BGP propagation delays.</p>"
          },
          "response": [
            {
              "id": "d7ef56cb-f7b4-4870-93dc-90b16ade8cfe",
              "name": "Success",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "description": {
                      "content": "Amazon Signature authorization v4",
                      "type": "text/plain"
                    },
                    "key": "Authorization",
                    "value": ""
                  },
                  {
                    "key": "X-Amz-Content-Sha256",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Date",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Algorithm",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Credential",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Security-Token",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-Signature",
                    "value": "<string>"
                  },
                  {
                    "key": "X-Amz-SignedHeaders",
                    "value": "<string>"
                  },
                  {
                    "key": "Content-Type",
                    "value": "application/x-www-form-urlencoded"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "Cidr",
                      "value": "<string>"
                    },
                    {
                      "key": "DryRun",
                      "value": "<boolean>"
                    }
                  ]
                },
                "url": {
                  "raw": "http://ec2.{{region}}.amazonaws.com/?Action=<string>&Version=<string>#Action=WithdrawByoipCidr",
                  "protocol": "http",
                  "host": [
                    "ec2",
                    "{{region}}",
                    "amazonaws",
                    "com"
                  ],
                  "path": [
                    ""
                  ],
                  "query": [
                    {
                      "key": "Action",
                      "value": "<string>"
                    },
                    {
                      "key": "Version",
                      "value": "<string>"
                    }
                  ],
                  "hash": "Action=WithdrawByoipCidr"
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "text",
              "header": [
                {
                  "key": "Content-Type",
                  "value": "*/*"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": ""
            }
          ]
        }
      ],
      "_postman_id": "53633140-ed16-496a-bd02-6216c38df72a"
    },
    {
      "name": "EC2",
      "item": [
        {
          "name": "x",
          "item": [],
          "_postman_id": "d94f0314-a7e9-4d83-91d8-3fbdd5bdad4a",
          "_postman_isSubFolder": true
        }
      ],
      "_postman_id": "202b719f-a6f4-428e-8b8f-17b8591010b9"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "6bd20ca4-face-4048-8262-732f508659fa",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "5c61797e-f633-4d5f-8e30-76651e7a4c97",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ]
}