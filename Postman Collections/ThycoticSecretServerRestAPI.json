{
	"info": {
		"_postman_id": "59690c3a-4710-480b-811a-c3d95e315010",
		"name": "Thycotic Secret Server Rest API",
		"description": "REST API documentation for Thycotic Secret Server. This document describes how to use the REST API. All requests require an authentication token; please see the <a href=\"../OAuth/\">authentication document</a> for more information. The <a href=\"swagger.json\">Swagger specification</a> for this API is also available.\n\nContact Support: \n{\n\nName : Thycotic Support\n\nEmail : undefined\n\n}",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "app-clients",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get App Client",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients/:id?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients",
										":id"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive app clients"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "App client ID"
										}
									]
								},
								"description": "Get a single app client by ID"
							},
							"response": [
								{
									"name": "App client object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"clientId\": \"<uuid>\",\n \"redirectUri\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Update App Client",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"redirectUri\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/app-clients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "App client ID"
										}
									]
								},
								"description": "Update a single app client by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"redirectUri\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "App client object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"redirectUri\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"clientId\": \"<uuid>\",\n \"redirectUri\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"redirectUri\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"redirectUri\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete App Client",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "App client ID"
										}
									]
								},
								"description": "Delete an app client by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/app-clients/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"app-clients",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search App Clients",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/app-clients?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"app-clients"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "SearchText"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page app clients"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "App client search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"clientId\": \"<uuid>\",\n   \"redirectUri\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"clientId\": \"<uuid>\",\n   \"redirectUri\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create App Client",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"redirectUri\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/app-clients",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"app-clients"
							]
						},
						"description": "Create a new app client"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"redirectUri\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/app-clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"redirectUri\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/app-clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "App client object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"redirectUri\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/app-clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"clientId\": \"<uuid>\",\n \"redirectUri\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"redirectUri\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/app-clients",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get App Client Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/app-clients/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"app-clients",
								"stub"
							]
						},
						"description": "Return the default values for a new app client"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "App client object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"clientId\": \"<uuid>\",\n \"redirectUri\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/app-clients/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"app-clients",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "diagnostics",
			"item": [
				{
					"name": "Get Diagnostic Information",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics"
							]
						},
						"description": "Get Diagnostic Information"
					},
					"response": [
						{
							"name": "Diagnostics Info object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"activeDirectorySynchronizationThreadStatus\": \"<string>\",\n \"backboneType\": \"<string>\",\n \"backboneClass\": \"<string>\",\n \"hsmCacheMapSize\": \"<string>\",\n \"hsmTiming\": \"<string>\",\n \"isDomainController\": \"<string>\",\n \"lastUpgrade\": \"<string>\",\n \"ldapProvider\": \"<string>\",\n \"maxDegreeOfParallelism\": \"<string>\",\n \"netFxVersion\": \"<string>\",\n \"operatingSystem\": \"<string>\",\n \"operatingSystemArchitecture\": \"<string>\",\n \"physicalMemory\": \"<string>\",\n \"productVersion\": \"<string>\",\n \"proxyConfiguration\": \"<string>\",\n \"readOnlyMode\": \"<string>\",\n \"searchIndexerThreadStatus\": \"<string>\",\n \"secretServerUrl\": \"<string>\",\n \"serverName\": \"<string>\",\n \"serverTime\": \"<string>\",\n \"serverTimeZone\": \"<string>\",\n \"sqlDatabaseName\": \"<string>\",\n \"sqlIsDatabaseReplicated\": \"<string>\",\n \"sqlServerCollation\": \"<string>\",\n \"sqlServerConnectionString\": \"<string>\",\n \"sqlServerEdition\": \"<string>\",\n \"sqlServerIsPublished\": \"<string>\",\n \"sqlServerIsReplicationRunning\": \"<string>\",\n \"sqlServerIsSubscribed\": \"<string>\",\n \"sqlServerName\": \"<string>\",\n \"sqlServerTime\": \"<string>\",\n \"sqlServerVersion\": \"<string>\",\n \"upgradeAvailable\": \"<string>\",\n \"upgradeInProgress\": \"<string>\",\n \"upTime\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Background Processes",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/background-processes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"background-processes"
							]
						},
						"description": "Get Background Process Information"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/background-processes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"background-processes"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/background-processes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"background-processes"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Background Process Enumerable",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/background-processes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"background-processes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"hostName\": \"<string>\",\n  \"applicationName\": \"<string>\",\n  \"identityName\": \"<string>\",\n  \"managedThreadId\": \"<integer>\",\n  \"threadName\": \"<string>\",\n  \"lastActivity\": \"<dateTime>\"\n },\n {\n  \"hostName\": \"<string>\",\n  \"applicationName\": \"<string>\",\n  \"identityName\": \"<string>\",\n  \"managedThreadId\": \"<integer>\",\n  \"threadName\": \"<string>\",\n  \"lastActivity\": \"<dateTime>\"\n }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/background-processes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"background-processes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Connectivity Report",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/connectivity-report",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"connectivity-report"
							]
						},
						"description": "Get Connectivity Report"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/connectivity-report",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"connectivity-report"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Connectivity Report",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/connectivity-report",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"connectivity-report"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/connectivity-report",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"connectivity-report"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/connectivity-report",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"connectivity-report"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get App Settings",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/app-settings",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"app-settings"
							]
						},
						"description": "Get App Settings"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/app-settings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"app-settings"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/app-settings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"app-settings"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "App Setting Dictionary",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/app-settings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"app-settings"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/app-settings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"app-settings"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get Quartz Jobs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/quartz-jobs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"quartz-jobs"
							]
						},
						"description": "Get Quartz Jobs"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/quartz-jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"quartz-jobs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/quartz-jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"quartz-jobs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Enumerable of Quartz Jobs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/quartz-jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"quartz-jobs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"jobName\": \"<string>\",\n  \"triggerState\": \"<string>\",\n  \"previousFireTime\": \"<dateTime>\",\n  \"nextFireTime\": \"<dateTime>\",\n  \"nextFireTicks\": \"<long>\",\n  \"previousFireTicks\": \"<long>\"\n },\n {\n  \"jobName\": \"<string>\",\n  \"triggerState\": \"<string>\",\n  \"previousFireTime\": \"<dateTime>\",\n  \"nextFireTime\": \"<dateTime>\",\n  \"nextFireTicks\": \"<long>\",\n  \"previousFireTicks\": \"<long>\"\n }\n]"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/quartz-jobs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"quartz-jobs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get General Logs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/general-logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"general-logs"
							]
						},
						"description": "Get General Logs"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/general-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"general-logs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Get General Logs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/general-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"general-logs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/general-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"general-logs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/general-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"general-logs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get System Logs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/system-logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"system-logs"
							]
						},
						"description": "Get System Logs"
					},
					"response": [
						{
							"name": "Get System Logs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/system-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"system-logs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/system-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"system-logs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/system-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"system-logs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/system-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"system-logs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Discovery Logs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/discovery-logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"discovery-logs"
							]
						},
						"description": "Get Discovery Logs"
					},
					"response": [
						{
							"name": "Get Discovery Logs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/discovery-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"discovery-logs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/discovery-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"discovery-logs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/discovery-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"discovery-logs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/discovery-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"discovery-logs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get ComputerScan Logs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/computer-scan-logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"computer-scan-logs"
							]
						},
						"description": "Get ComputerScan Logs"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/computer-scan-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"computer-scan-logs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/computer-scan-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"computer-scan-logs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Get ComputerScan Logs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/computer-scan-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"computer-scan-logs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/computer-scan-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"computer-scan-logs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get RPC Logs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/rpc-logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"rpc-logs"
							]
						},
						"description": "Get RPC Logs"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/rpc-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"rpc-logs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/rpc-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"rpc-logs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Get RPC Logs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/rpc-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"rpc-logs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/rpc-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"rpc-logs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Heartbeat Logs",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/heartbeat-logs",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"heartbeat-logs"
							]
						},
						"description": "Get Heartbeat Logs"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/heartbeat-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"heartbeat-logs"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/heartbeat-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"heartbeat-logs"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/heartbeat-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"heartbeat-logs"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Get Heartbeat Logs",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/heartbeat-logs",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"heartbeat-logs"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						}
					]
				},
				{
					"name": "Clear Quartz Job Errors",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/clear-quartz-job-errors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"clear-quartz-job-errors"
							]
						},
						"description": "Clear Quartz Job Errors"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-quartz-job-errors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-quartz-job-errors"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-quartz-job-errors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-quartz-job-errors"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-quartz-job-errors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-quartz-job-errors"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Clear Quartz Job Errors Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-quartz-job-errors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-quartz-job-errors"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<boolean>\""
						}
					]
				},
				{
					"name": "Clear Upgrade In Progress",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/clear-upgrade-in-progress",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"clear-upgrade-in-progress"
							]
						},
						"description": "Clear Upgrade In Progress"
					},
					"response": [
						{
							"name": "Clear Upgrade In Progress Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-upgrade-in-progress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-upgrade-in-progress"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<boolean>\""
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-upgrade-in-progress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-upgrade-in-progress"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-upgrade-in-progress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-upgrade-in-progress"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/clear-upgrade-in-progress",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"clear-upgrade-in-progress"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Test Event Log",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/diagnostics/test-event-log",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"diagnostics",
								"test-event-log"
							]
						},
						"description": "Test Event Log"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/test-event-log",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"test-event-log"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/test-event-log",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"test-event-log"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/test-event-log",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"test-event-log"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Test Event Log Success",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/diagnostics/test-event-log",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"diagnostics",
										"test-event-log"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<boolean>\""
						}
					]
				}
			]
		},
		{
			"name": "dual-controls",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Dual Control",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Dual control ID"
										}
									]
								},
								"description": "Get a single dual control by ID"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Dual control object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"itemId\": \"<integer>\",\n \"dualControlTypeId\": \"<integer>\",\n \"dualControlApprovalGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  }\n ],\n \"itemName\": \"<string>\",\n \"dualControlTypeName\": \"<string>\",\n \"active\": \"<boolean>\"\n}"
								}
							]
						},
						{
							"name": "Update Dual Control",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"itemId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dual-controls/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Dual control ID"
										}
									]
								},
								"description": "Update a single dual control by ID"
							},
							"response": [
								{
									"name": "Dual control object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"itemId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"itemId\": \"<integer>\",\n \"dualControlTypeId\": \"<integer>\",\n \"dualControlApprovalGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  }\n ],\n \"itemName\": \"<string>\",\n \"dualControlTypeName\": \"<string>\",\n \"active\": \"<boolean>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"itemId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"itemId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"itemId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete Dual Control",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Dual control ID"
										}
									]
								},
								"description": "Delete a dual control by ID"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/dual-controls/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"dual-controls",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Dual Controls",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dual-controls?filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dual-controls"
							],
							"query": [
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive items"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page dual controls"
					},
					"response": [
						{
							"name": "Dual control search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls?filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"itemId\": \"<integer>\",\n   \"dualControlTypeId\": \"Report\",\n   \"itemName\": \"<string>\",\n   \"dualControlTypeName\": \"<string>\",\n   \"active\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"itemId\": \"<integer>\",\n   \"dualControlTypeId\": \"Report\",\n   \"itemName\": \"<string>\",\n   \"dualControlTypeName\": \"<string>\",\n   \"active\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls?filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls?filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls?filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create Dual Control",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"itemId\": \"<integer>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/dual-controls",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dual-controls"
							]
						},
						"description": "Create a new dual control"
					},
					"response": [
						{
							"name": "Dual control object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"<integer>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dual-controls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"itemId\": \"<integer>\",\n \"dualControlTypeId\": \"<integer>\",\n \"dualControlApprovalGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  }\n ],\n \"itemName\": \"<string>\",\n \"dualControlTypeName\": \"<string>\",\n \"active\": \"<boolean>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"<integer>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dual-controls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"<integer>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dual-controls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"itemId\": \"<integer>\",\n    \"dualControlTypeId\": \"<integer>\",\n    \"dualControlApprovalGroups\": [\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        },\n        {\n            \"id\": \"<integer>\",\n            \"dualControlId\": \"<integer>\",\n            \"groupId\": \"<integer>\",\n            \"groupName\": \"<string>\",\n            \"enabled\": \"<boolean>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/dual-controls",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Dual Control Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/dual-controls/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"dual-controls",
								"stub"
							]
						},
						"description": "Return the default values for a new dual control"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Dual control object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"itemId\": \"<integer>\",\n \"dualControlTypeId\": \"<integer>\",\n \"dualControlApprovalGroups\": [\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"dualControlId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"enabled\": \"<boolean>\"\n  }\n ],\n \"itemName\": \"<string>\",\n \"dualControlTypeName\": \"<string>\",\n \"active\": \"<boolean>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/dual-controls/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"dual-controls",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "folder-permissions",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Folder Permission",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions/:id?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions",
										":id"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive folder permissions in the results"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Folder permission ID"
										}
									]
								},
								"description": "Get a single folder permission by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Folder permission object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"folderAccessRoleId\": \"<integer>\",\n \"folderAccessRoleName\": \"<string>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update Folder Permission",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"folderId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folder-permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Folder permission ID"
										}
									]
								},
								"description": "Update a single folder permission by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Folder permission object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"folderAccessRoleId\": \"<integer>\",\n \"folderAccessRoleName\": \"<string>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete Folder Permission",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Folder permission ID"
										}
									]
								},
								"description": "Delete a folder permission by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folder-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folder-permissions",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Folder Permissions",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folder-permissions?filter.folderId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folder-permissions"
							],
							"query": [
								{
									"key": "filter.folderId",
									"value": "<integer>",
									"description": "Limit results to a certain folder"
								},
								{
									"key": "filter.groupId",
									"value": "<integer>",
									"description": "Limit results to a certain group"
								},
								{
									"key": "filter.userId",
									"value": "<integer>",
									"description": "Limit results to a certain user"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page folder permissions"
					},
					"response": [
						{
							"name": "Folder permission search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions?filter.folderId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									],
									"query": [
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"folderId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"folderAccessRoleId\": \"<integer>\",\n   \"folderAccessRoleName\": \"<string>\",\n   \"secretAccessRoleId\": \"<integer>\",\n   \"secretAccessRoleName\": \"<string>\",\n   \"knownAs\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"folderId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"folderAccessRoleId\": \"<integer>\",\n   \"folderAccessRoleName\": \"<string>\",\n   \"secretAccessRoleId\": \"<integer>\",\n   \"secretAccessRoleName\": \"<string>\",\n   \"knownAs\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions?filter.folderId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									],
									"query": [
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions?filter.folderId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									],
									"query": [
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions?filter.folderId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									],
									"query": [
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create Folder Permission",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"folderId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/folder-permissions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folder-permissions"
							]
						},
						"description": "Create a new folder permission"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folder-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folder-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folder-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Folder permission object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"folderAccessRoleName\": \"<string>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folder-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"folderAccessRoleId\": \"<integer>\",\n \"folderAccessRoleName\": \"<string>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Folder Permission Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folder-permissions/stub?folderId=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folder-permissions",
								"stub"
							],
							"query": [
								{
									"key": "folderId",
									"value": "<integer>",
									"description": "Folder for which to generate a permission stub"
								}
							]
						},
						"description": "Return the default values for a new folder permission"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions/stub?folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions",
										"stub"
									],
									"query": [
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions/stub?folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions",
										"stub"
									],
									"query": [
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Folder permission bject",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions/stub?folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions",
										"stub"
									],
									"query": [
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"folderAccessRoleId\": \"<integer>\",\n \"folderAccessRoleName\": \"<string>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folder-permissions/stub?folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folder-permissions",
										"stub"
									],
									"query": [
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "folders",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "templates",
							"item": [
								{
									"name": "Associate Template to Folder",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folderId\": \"<integer>\",\n    \"templateId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folders/:id/templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id",
												"templates"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Folder ID"
												}
											]
										},
										"description": "Allow secrets based on the template to be created in the folder. If the folder has no associated templates, then any template can be used."
									},
									"response": [
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folderId\": \"<integer>\",\n    \"templateId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Folder object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folderId\": \"<integer>\",\n    \"templateId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"folderId\": \"<integer>\",\n \"templateId\": \"<integer>\",\n \"associated\": \"<boolean>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folderId\": \"<integer>\",\n    \"templateId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folderId\": \"<integer>\",\n    \"templateId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Disassociate Template from Folder",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/:id/templates/:templateId",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												":id",
												"templates",
												":templateId"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Folder ID"
												},
												{
													"key": "templateId",
													"value": "<integer>",
													"description": "Template ID"
												}
											]
										},
										"description": "Remove the ability to create secrets based on the template in this folder. If the folder has no associated templates, then any template can be used."
									},
									"response": [
										{
											"name": "Folder object",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "DELETE",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/folders/<integer>/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"folders",
														"<integer>",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Folder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/:id?getAllChildren=<boolean>&includeAssociatedTemplates=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										":id"
									],
									"query": [
										{
											"key": "getAllChildren",
											"value": "<boolean>",
											"description": "Whether to retrieve all child folders of the requested folder"
										},
										{
											"key": "includeAssociatedTemplates",
											"value": "<boolean>",
											"description": "Whether to list associated secret templates"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Folder ID"
										}
									]
								},
								"description": "Get a single folder by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>?getAllChildren=<boolean>&includeAssociatedTemplates=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											],
											"query": [
												{
													"key": "getAllChildren",
													"value": "<boolean>"
												},
												{
													"key": "includeAssociatedTemplates",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Folder object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>?getAllChildren=<boolean>&includeAssociatedTemplates=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											],
											"query": [
												{
													"key": "getAllChildren",
													"value": "<boolean>"
												},
												{
													"key": "includeAssociatedTemplates",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>?getAllChildren=<boolean>&includeAssociatedTemplates=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											],
											"query": [
												{
													"key": "getAllChildren",
													"value": "<boolean>"
												},
												{
													"key": "includeAssociatedTemplates",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>?getAllChildren=<boolean>&includeAssociatedTemplates=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											],
											"query": [
												{
													"key": "getAllChildren",
													"value": "<boolean>"
												},
												{
													"key": "includeAssociatedTemplates",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update Folder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"folderTypeId\": \"<integer>\",\n    \"folderName\": \"<string>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Folder ID"
										}
									]
								},
								"description": "Update a single secret folder by ID"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderTypeId\": \"<integer>\",\n    \"folderName\": \"<string>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderTypeId\": \"<integer>\",\n    \"folderName\": \"<string>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Folder object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderTypeId\": \"<integer>\",\n    \"folderName\": \"<string>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"folderTypeId\": \"<integer>\",\n    \"folderName\": \"<string>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete Folder",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Folder ID"
										}
									]
								},
								"description": "Delete a folder by ID"
							},
							"response": [
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/folders/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"folders",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Folders",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folders?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.folderTypeId",
									"value": "<integer>",
									"description": "Folder type ID"
								},
								{
									"key": "filter.parentFolderId",
									"value": "<integer>",
									"description": "Parent folder ID"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page secret folders"
					},
					"response": [
						{
							"name": "Folder search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"folderName\": \"<string>\",\n   \"folderPath\": \"<string>\",\n   \"parentFolderId\": \"<integer>\",\n   \"folderTypeId\": \"<integer>\",\n   \"secretPolicyId\": \"<integer>\",\n   \"inheritSecretPolicy\": \"<boolean>\",\n   \"inheritPermissions\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"folderName\": \"<string>\",\n   \"folderPath\": \"<string>\",\n   \"parentFolderId\": \"<integer>\",\n   \"folderTypeId\": \"<integer>\",\n   \"secretPolicyId\": \"<integer>\",\n   \"inheritSecretPolicy\": \"<boolean>\",\n   \"inheritPermissions\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create Folder",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"folderName\": \"<string>\",\n    \"folderTypeId\": \"<integer>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/folders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders"
							]
						},
						"description": "Create a new secret folder"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderName\": \"<string>\",\n    \"folderTypeId\": \"<integer>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderName\": \"<string>\",\n    \"folderTypeId\": \"<integer>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Folder object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderName\": \"<string>\",\n    \"folderTypeId\": \"<integer>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"folderName\": \"<string>\",\n    \"folderTypeId\": \"<integer>\",\n    \"parentFolderId\": \"<integer>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"inheritPermissions\": \"<boolean>\",\n    \"inheritSecretPolicy\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/folders",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Lookup Folders",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folders/lookup?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.folderTypeId",
									"value": "<integer>",
									"description": "Folder type ID"
								},
								{
									"key": "filter.parentFolderId",
									"value": "<integer>",
									"description": "Parent folder ID"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page secret folders, returning only folder ID and name"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/lookup?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Folder search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/lookup?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/lookup?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/lookup?filter.searchText=<string>&filter.folderTypeId=<integer>&filter.parentFolderId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.folderTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.parentFolderId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get Folder Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/folders/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"folders",
								"stub"
							]
						},
						"description": "Return the default values for a new secret folder"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Folder object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/folders/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"folders",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "groups",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "users",
							"item": [
								{
									"name": "{user Id}",
									"item": [
										{
											"name": "Get User In Group",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:id/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":id",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "Group ID"
														},
														{
															"key": "userId",
															"value": "<integer>",
															"description": "User ID"
														}
													]
												},
												"description": "Get a user in a group"
											},
											"response": [
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "User group membership object",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"userDomainId\": \"<integer>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"groupDomainId\": \"<integer>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												}
											]
										},
										{
											"name": "Remove User From Group",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/:id/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														":id",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "Group ID"
														},
														{
															"key": "userId",
															"value": "<integer>",
															"description": "User ID"
														}
													]
												},
												"description": "Remove a user from a group"
											},
											"response": [
												{
													"name": "Object deletion result",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/groups/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"groups",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												}
											]
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get Users In Group",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/:id/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":id",
												"users"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>",
													"description": "Number of records to skip before taking results"
												},
												{
													"key": "take",
													"value": "<integer>",
													"description": "Maximum number of records to include in results"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>",
													"description": "Sort field name"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>",
													"description": "Sort direction"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>",
													"description": "Priority index. Sorts with lower values are executed earlier"
												},
												{
													"key": "messageText",
													"value": "<string>",
													"description": "MessageText"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Group ID"
												}
											]
										},
										"description": "Get users in a group"
									},
									"response": [
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Group membership results",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDomainId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupDomainId\": \"<integer>\"\n  },\n  {\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDomainId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupDomainId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Add User To Group",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/:id/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												":id",
												"users"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Group ID"
												}
											]
										},
										"description": "Add a user to a group"
									},
									"response": [
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "User group membership object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/groups/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"groups",
														"<integer>",
														"users"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"userDomainId\": \"<integer>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"groupDomainId\": \"<integer>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Group",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/:id?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":id"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive groups in the results"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Group ID"
										}
									]
								},
								"description": "Get a single group by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Group object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"isEditable\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"domainId\": \"<integer>\",\n \"synchronized\": \"<boolean>\",\n \"synchronizeNow\": \"<boolean>\",\n \"domainName\": \"<string>\",\n \"systemGroup\": \"<boolean>\",\n \"adGuid\": \"<string>\",\n \"hasGroupOwners\": \"<boolean>\",\n \"ownerUsers\": {},\n \"ownerGroups\": {}\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Update Group",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Group ID"
										}
									]
								},
								"description": "Update a single group by ID"
							},
							"response": [
								{
									"name": "Group object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"isEditable\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"domainId\": \"<integer>\",\n \"synchronized\": \"<boolean>\",\n \"synchronizeNow\": \"<boolean>\",\n \"domainName\": \"<string>\",\n \"systemGroup\": \"<boolean>\",\n \"adGuid\": \"<string>\",\n \"hasGroupOwners\": \"<boolean>\",\n \"ownerUsers\": {},\n \"ownerGroups\": {}\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete Group",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Group ID"
										}
									]
								},
								"description": "Delete a group by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Search IP Address restrictions assigned to a group",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/:id/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										":id",
										"ipaddress-restrictions"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Group ID"
										}
									]
								},
								"description": "Search, filter, sort, and page IP Address restriction assigned to a group"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Group and IP Address restriction search result object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Critical\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/groups/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"groups",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Groups",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/groups?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive groups in the results"
								},
								{
									"key": "filter.domainId",
									"value": "<integer>",
									"description": "Active Directory domain ID"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page groups"
					},
					"response": [
						{
							"name": "Group search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"enabled\": \"<boolean>\",\n   \"domainId\": \"<integer>\",\n   \"domainName\": \"<string>\",\n   \"synchronized\": \"<boolean>\",\n   \"synchronizeNow\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"enabled\": \"<boolean>\",\n   \"domainId\": \"<integer>\",\n   \"domainName\": \"<string>\",\n   \"synchronized\": \"<boolean>\",\n   \"synchronizeNow\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create Group",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/groups",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups"
							]
						},
						"description": "Create a new group"
					},
					"response": [
						{
							"name": "Group object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"isEditable\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"domainId\": \"<integer>\",\n \"synchronized\": \"<boolean>\",\n \"synchronizeNow\": \"<boolean>\",\n \"domainName\": \"<string>\",\n \"systemGroup\": \"<boolean>\",\n \"adGuid\": \"<string>\",\n \"hasGroupOwners\": \"<boolean>\",\n \"ownerUsers\": {},\n \"ownerGroups\": {}\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"domainId\": \"<integer>\",\n    \"synchronized\": \"<boolean>\",\n    \"synchronizeNow\": \"<boolean>\",\n    \"adGuid\": \"<string>\",\n    \"hasGroupOwners\": \"<boolean>\",\n    \"ownerUserIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerUserNames\": [\n        \"<string>\",\n        \"<string>\"\n    ],\n    \"ownerGroupIds\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"ownerGroupNames\": [\n        \"<string>\",\n        \"<string>\"\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/groups",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Lookup Groups",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/groups/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive groups in the results"
								},
								{
									"key": "filter.domainId",
									"value": "<integer>",
									"description": "Active Directory domain ID"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page groups, returning only group ID and name"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Group search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Group Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/groups/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"groups",
								"stub"
							]
						},
						"description": "Return the default values for a new group"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Group object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"isEditable\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"domainId\": \"<integer>\",\n \"synchronized\": \"<boolean>\",\n \"synchronizeNow\": \"<boolean>\",\n \"domainName\": \"<string>\",\n \"systemGroup\": \"<boolean>\",\n \"adGuid\": \"<string>\",\n \"hasGroupOwners\": \"<boolean>\",\n \"ownerUsers\": {},\n \"ownerGroups\": {}\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/groups/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"groups",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "ipaddress-restrictions",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "groups",
							"item": [
								{
									"name": "{group Id}",
									"item": [
										{
											"name": "Get Group IP Address restriction",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/:id/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														":id",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "IP Address restriction ID"
														},
														{
															"key": "groupId",
															"value": "<integer>",
															"description": "Group ID"
														}
													]
												},
												"description": "Get a single Group IP Address restriction by restriction and group ID"
											},
											"response": [
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Group and IP Address restriction object",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"ipAddressRestrictionName\": \"<string>\",\n \"ipAddressRestrictionId\": \"<integer>\"\n}"
												}
											]
										},
										{
											"name": "Delete Group IP Address restriction",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/:id/groups/:groupId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														":id",
														"groups",
														":groupId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "IP Address restriction Id"
														},
														{
															"key": "groupId",
															"value": "<integer>",
															"description": "Group ID"
														}
													]
												},
												"description": "Delete a Group IP Address restriction by ID"
											},
											"response": [
												{
													"name": "Object deletion result",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"groups",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												}
											]
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Search groups assigned to an IP Address restriction",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/:id/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												":id",
												"groups"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>",
													"description": "Number of records to skip before taking results"
												},
												{
													"key": "take",
													"value": "<integer>",
													"description": "Maximum number of records to include in results"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>",
													"description": "Sort field name"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>",
													"description": "Sort direction"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>",
													"description": "Priority index. Sorts with lower values are executed earlier"
												},
												{
													"key": "messageText",
													"value": "<string>",
													"description": "MessageText"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "IP Address restriction ID"
												}
											]
										},
										"description": "Search, filter, sort, and page groups assigned to an IP Address restriction"
									},
									"response": [
										{
											"name": "Group and IP Address restriction search result object",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Create Group IP Address restriction",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"groupId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/:id/groups",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												":id",
												"groups"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "IP Address restriction ID"
												}
											]
										},
										"description": "Create a new Group IP Address restriction"
									},
									"response": [
										{
											"name": "Group IP Address restriction object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"ipAddressRestrictionName\": \"<string>\",\n \"ipAddressRestrictionId\": \"<integer>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"groupId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/groups",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"groups"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "users",
							"item": [
								{
									"name": "{user Id}",
									"item": [
										{
											"name": "Get User IP Address restriction",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/:id/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														":id",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "IP Address restriction ID"
														},
														{
															"key": "userId",
															"value": "<integer>",
															"description": "User ID"
														}
													]
												},
												"description": "Get a single User IP Address restriction by restriction and user ID"
											},
											"response": [
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "User and IP Address restriction object",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"userDisplayName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ipAddressRestrictionName\": \"<string>\",\n \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Delete User IP Address restriction",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/:id/users/:userId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														":id",
														"users",
														":userId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "IP Address restriction Id"
														},
														{
															"key": "userId",
															"value": "<integer>",
															"description": "User ID"
														}
													]
												},
												"description": "Delete a User IP Address restriction by ID"
											},
											"response": [
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Object deletion result",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"ipaddress-restrictions",
																"<integer>",
																"users",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												}
											]
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Search users assigned to an IP Address restriction",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/:id/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												":id",
												"users"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>",
													"description": "Number of records to skip before taking results"
												},
												{
													"key": "take",
													"value": "<integer>",
													"description": "Maximum number of records to include in results"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>",
													"description": "Sort field name"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>",
													"description": "Sort direction"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>",
													"description": "Priority index. Sorts with lower values are executed earlier"
												},
												{
													"key": "messageText",
													"value": "<string>",
													"description": "MessageText"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "IP Address restriction ID"
												}
											]
										},
										"description": "Search, filter, sort, and page users assigned to an IP Address restriction"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "User and IP Address restriction search result object",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDisplayName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDisplayName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Critical\",\n \"messageText\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										}
									]
								},
								{
									"name": "Create User IP Address restriction",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/:id/users",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												":id",
												"users"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "IP Address restriction ID"
												}
											]
										},
										"description": "Create a new User IP Address restriction"
									},
									"response": [
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "User IP Address restriction object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"userDisplayName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"ipAddressRestrictionName\": \"<string>\",\n \"ipAddressRestrictionId\": \"<integer>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"ipAddressRestrictionId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>/users",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"ipaddress-restrictions",
														"<integer>",
														"users"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get IP Address restriction",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "IP Address restriction ID"
										}
									]
								},
								"description": "Get a single IP Address restriction by ID"
							},
							"response": [
								{
									"name": "IP Address restriction object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"range\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update IP Address restriction",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "IP Address restriction Id"
										}
									]
								},
								"description": "Update a new IP Address restriction"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "IP Address restriction object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"range\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete IP Address restriction",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "IP Address restriction Id"
										}
									]
								},
								"description": "Delete an IP Address restriction by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/ipaddress-restrictions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"ipaddress-restrictions",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search IP Address restrictions",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ipaddress-restrictions"
							],
							"query": [
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page IP Address restrictions"
					},
					"response": [
						{
							"name": "IP Address restriction search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"range\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"range\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Critical\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create IP Address restriction",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ipaddress-restrictions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ipaddress-restrictions"
							]
						},
						"description": "Create a new IP Address restriction"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "IP Address restriction object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"range\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"range\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/ipaddress-restrictions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ipaddress-restrictions"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "users",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "owners",
							"item": [
								{
									"name": "{owner Id}",
									"item": [
										{
											"name": "Get User Owner",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/owners/:ownerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"owners",
														":ownerId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "User ID"
														},
														{
															"key": "ownerId",
															"value": "<integer>",
															"description": "Owner ID"
														}
													]
												},
												"description": "Get a single owner for a user"
											},
											"response": [
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "User owner object",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"domainId\": \"<integer>\",\n \"isUser\": \"<boolean>\",\n \"groupId\": \"<integer>\",\n \"userId\": \"<integer>\"\n}"
												}
											]
										},
										{
											"name": "Remove User Owner",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/:id/owners/:ownerId",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														":id",
														"owners",
														":ownerId"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "User ID"
														},
														{
															"key": "ownerId",
															"value": "<integer>",
															"description": "Owner ID"
														}
													]
												},
												"description": "Remove an owner from a single user"
											},
											"response": [
												{
													"name": "Object deletion result",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "DELETE",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/users/<integer>/owners/<integer>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"users",
																"<integer>",
																"owners",
																"<integer>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												}
											]
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get User Owners",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/:id/owners?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id",
												"owners"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>",
													"description": "Number of records to skip before taking results"
												},
												{
													"key": "take",
													"value": "<integer>",
													"description": "Maximum number of records to include in results"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>",
													"description": "Sort field name"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>",
													"description": "Sort direction"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>",
													"description": "Priority index. Sorts with lower values are executed earlier"
												},
												{
													"key": "messageText",
													"value": "<string>",
													"description": "MessageText"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "User ID"
												}
											]
										},
										"description": "Get the owners for a user by ID"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "User owner results",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"domainId\": \"<integer>\",\n   \"isUser\": \"<boolean>\",\n   \"groupId\": \"<integer>\",\n   \"userId\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"domainId\": \"<integer>\",\n   \"isUser\": \"<boolean>\",\n   \"groupId\": \"<integer>\",\n   \"userId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										}
									]
								},
								{
									"name": "Add User Owner",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"userId\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"groupId\": \"<integer>\",\n    \"groupName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/:id/owners",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												":id",
												"owners"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "User ID"
												}
											]
										},
										"description": "Add an owner to a single user"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"groupId\": \"<integer>\",\n    \"groupName\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"groupId\": \"<integer>\",\n    \"groupName\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"groupId\": \"<integer>\",\n    \"groupName\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "User owner object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"userId\": \"<integer>\",\n    \"userName\": \"<string>\",\n    \"groupId\": \"<integer>\",\n    \"groupName\": \"<string>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/users/<integer>/owners",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"users",
														"<integer>",
														"owners"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"domainId\": \"<integer>\",\n \"isUser\": \"<boolean>\",\n \"groupId\": \"<integer>\",\n \"userId\": \"<integer>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get User",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive users in the results"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "User ID"
										}
									]
								},
								"description": "Get a single user by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "User object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"displayName\": \"<string>\",\n \"lastLogin\": \"<dateTime>\",\n \"created\": \"<dateTime>\",\n \"enabled\": \"<boolean>\",\n \"loginFailures\": \"<integer>\",\n \"emailAddress\": \"<string>\",\n \"userLcid\": \"<integer>\",\n \"domainId\": \"<integer>\",\n \"lastSessionActivity\": \"<dateTime>\",\n \"isLockedOut\": \"<boolean>\",\n \"radiusUserName\": \"<string>\",\n \"twoFactor\": \"<boolean>\",\n \"radiusTwoFactor\": \"<boolean>\",\n \"isEmailVerified\": \"<boolean>\",\n \"mustVerifyEmail\": \"<boolean>\",\n \"verifyEmailSentDate\": \"<dateTime>\",\n \"passwordLastChanged\": \"<dateTime>\",\n \"dateOptionId\": \"<integer>\",\n \"timeOptionId\": \"<integer>\",\n \"isEmailCopiedFromAD\": \"<boolean>\",\n \"organizationUnitId\": \"<integer>\",\n \"adGuid\": \"<string>\",\n \"adAccountExpires\": \"<dateTime>\",\n \"resetSessionStarted\": \"<dateTime>\",\n \"isApplicationAccount\": \"<boolean>\",\n \"oathTwoFactor\": \"<boolean>\",\n \"oathVerified\": \"<boolean>\",\n \"duoTwoFactor\": \"<boolean>\",\n \"fido2TwoFactor\": \"<boolean>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Update User",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"displayName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"loginFailures\": \"<integer>\",\n    \"emailAddress\": \"<string>\",\n    \"isLockedOut\": \"<boolean>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"dateOptionId\": \"<integer>\",\n    \"timeOptionId\": \"<integer>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"groupOwners\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"isGroupOwnerUpdate\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "User ID"
										}
									]
								},
								"description": "Update a single user by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"displayName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"loginFailures\": \"<integer>\",\n    \"emailAddress\": \"<string>\",\n    \"isLockedOut\": \"<boolean>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"dateOptionId\": \"<integer>\",\n    \"timeOptionId\": \"<integer>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"groupOwners\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"isGroupOwnerUpdate\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"displayName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"loginFailures\": \"<integer>\",\n    \"emailAddress\": \"<string>\",\n    \"isLockedOut\": \"<boolean>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"dateOptionId\": \"<integer>\",\n    \"timeOptionId\": \"<integer>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"groupOwners\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"isGroupOwnerUpdate\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "User object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"displayName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"loginFailures\": \"<integer>\",\n    \"emailAddress\": \"<string>\",\n    \"isLockedOut\": \"<boolean>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"dateOptionId\": \"<integer>\",\n    \"timeOptionId\": \"<integer>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"groupOwners\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"isGroupOwnerUpdate\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"displayName\": \"<string>\",\n \"lastLogin\": \"<dateTime>\",\n \"created\": \"<dateTime>\",\n \"enabled\": \"<boolean>\",\n \"loginFailures\": \"<integer>\",\n \"emailAddress\": \"<string>\",\n \"userLcid\": \"<integer>\",\n \"domainId\": \"<integer>\",\n \"lastSessionActivity\": \"<dateTime>\",\n \"isLockedOut\": \"<boolean>\",\n \"radiusUserName\": \"<string>\",\n \"twoFactor\": \"<boolean>\",\n \"radiusTwoFactor\": \"<boolean>\",\n \"isEmailVerified\": \"<boolean>\",\n \"mustVerifyEmail\": \"<boolean>\",\n \"verifyEmailSentDate\": \"<dateTime>\",\n \"passwordLastChanged\": \"<dateTime>\",\n \"dateOptionId\": \"<integer>\",\n \"timeOptionId\": \"<integer>\",\n \"isEmailCopiedFromAD\": \"<boolean>\",\n \"organizationUnitId\": \"<integer>\",\n \"adGuid\": \"<string>\",\n \"adAccountExpires\": \"<dateTime>\",\n \"resetSessionStarted\": \"<dateTime>\",\n \"isApplicationAccount\": \"<boolean>\",\n \"oathTwoFactor\": \"<boolean>\",\n \"oathVerified\": \"<boolean>\",\n \"duoTwoFactor\": \"<boolean>\",\n \"fido2TwoFactor\": \"<boolean>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"displayName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"loginFailures\": \"<integer>\",\n    \"emailAddress\": \"<string>\",\n    \"isLockedOut\": \"<boolean>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"dateOptionId\": \"<integer>\",\n    \"timeOptionId\": \"<integer>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"groupOwners\": [\n        \"<integer>\",\n        \"<integer>\"\n    ],\n    \"isGroupOwnerUpdate\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete User",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "User ID"
										}
									]
								},
								"description": "Delete a user by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Search IP Address restrictions assigned to a user",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"ipaddress-restrictions"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "User ID"
										}
									]
								},
								"description": "Search, filter, sort, and page IP Address restriction assigned to a user"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "User and IP Address restriction search result object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/ipaddress-restrictions?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"ipaddress-restrictions"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDisplayName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDisplayName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"ipAddressRestrictionName\": \"<string>\",\n   \"ipAddressRestrictionId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Critical\",\n \"messageText\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get User Groups",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:id/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":id",
										"groups"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "User ID"
										}
									]
								},
								"description": "Get the groups for a user by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"groups"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"groups"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Group membership results",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"groups"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDomainId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupDomainId\": \"<integer>\"\n  },\n  {\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDomainId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"groupDomainId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/users/<integer>/groups?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"users",
												"<integer>",
												"groups"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Users",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive users in the results"
								},
								{
									"key": "filter.domainId",
									"value": "<integer>",
									"description": "Filter users by Active Directory domain"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page users"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "User search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"lastLogin\": \"<dateTime>\",\n   \"created\": \"<dateTime>\",\n   \"enabled\": \"<boolean>\",\n   \"loginFailures\": \"<integer>\",\n   \"emailAddress\": \"<string>\",\n   \"domainId\": \"<integer>\",\n   \"isLockedOut\": \"<boolean>\",\n   \"isApplicationAccount\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"lastLogin\": \"<dateTime>\",\n   \"created\": \"<dateTime>\",\n   \"enabled\": \"<boolean>\",\n   \"loginFailures\": \"<integer>\",\n   \"emailAddress\": \"<string>\",\n   \"domainId\": \"<integer>\",\n   \"isLockedOut\": \"<boolean>\",\n   \"isApplicationAccount\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"emailAddress\": \"<string>\",\n    \"domainId\": \"<integer>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"adGuid\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users"
							]
						},
						"description": "Create a new user"
					},
					"response": [
						{
							"name": "User object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"emailAddress\": \"<string>\",\n    \"domainId\": \"<integer>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"adGuid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"displayName\": \"<string>\",\n \"lastLogin\": \"<dateTime>\",\n \"created\": \"<dateTime>\",\n \"enabled\": \"<boolean>\",\n \"loginFailures\": \"<integer>\",\n \"emailAddress\": \"<string>\",\n \"userLcid\": \"<integer>\",\n \"domainId\": \"<integer>\",\n \"lastSessionActivity\": \"<dateTime>\",\n \"isLockedOut\": \"<boolean>\",\n \"radiusUserName\": \"<string>\",\n \"twoFactor\": \"<boolean>\",\n \"radiusTwoFactor\": \"<boolean>\",\n \"isEmailVerified\": \"<boolean>\",\n \"mustVerifyEmail\": \"<boolean>\",\n \"verifyEmailSentDate\": \"<dateTime>\",\n \"passwordLastChanged\": \"<dateTime>\",\n \"dateOptionId\": \"<integer>\",\n \"timeOptionId\": \"<integer>\",\n \"isEmailCopiedFromAD\": \"<boolean>\",\n \"organizationUnitId\": \"<integer>\",\n \"adGuid\": \"<string>\",\n \"adAccountExpires\": \"<dateTime>\",\n \"resetSessionStarted\": \"<dateTime>\",\n \"isApplicationAccount\": \"<boolean>\",\n \"oathTwoFactor\": \"<boolean>\",\n \"oathVerified\": \"<boolean>\",\n \"duoTwoFactor\": \"<boolean>\",\n \"fido2TwoFactor\": \"<boolean>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"emailAddress\": \"<string>\",\n    \"domainId\": \"<integer>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"adGuid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"emailAddress\": \"<string>\",\n    \"domainId\": \"<integer>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"adGuid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"userName\": \"<string>\",\n    \"password\": \"<string>\",\n    \"displayName\": \"<string>\",\n    \"enabled\": \"<boolean>\",\n    \"emailAddress\": \"<string>\",\n    \"domainId\": \"<integer>\",\n    \"radiusUserName\": \"<string>\",\n    \"twoFactor\": \"<boolean>\",\n    \"radiusTwoFactor\": \"<boolean>\",\n    \"isApplicationAccount\": \"<boolean>\",\n    \"oathTwoFactor\": \"<boolean>\",\n    \"duoTwoFactor\": \"<boolean>\",\n    \"fido2TwoFactor\": \"<boolean>\",\n    \"adGuid\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Current User",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/current",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"current"
							]
						},
						"description": "Gets the current user"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"current"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"current"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"current"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Current user result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/current",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"current"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"displayName\": \"<string>\",\n \"emailAddress\": \"<string>\",\n \"dateOptionId\": \"<integer>\",\n \"timeOptionId\": \"<integer>\",\n \"userLcid\": \"<integer>\",\n \"permissions\": [\n  {\n   \"name\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\"\n  }\n ],\n \"profileLinks\": [\n  {\n   \"name\": \"<string>\",\n   \"link\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"link\": \"<string>\"\n  }\n ],\n \"adminLinks\": [\n  {\n   \"name\": \"<string>\",\n   \"link\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"link\": \"<string>\"\n  }\n ],\n \"userTheme\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Lookup Users",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive users in the results"
								},
								{
									"key": "filter.domainId",
									"value": "<integer>",
									"description": "Filter users by Active Directory domain"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page users, returning only user ID and name"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "User search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.domainId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.domainId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get User Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"stub"
							]
						},
						"description": "Return the default values for a new user"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "User object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"displayName\": \"<string>\",\n \"lastLogin\": \"<dateTime>\",\n \"created\": \"<dateTime>\",\n \"enabled\": \"<boolean>\",\n \"loginFailures\": \"<integer>\",\n \"emailAddress\": \"<string>\",\n \"userLcid\": \"<integer>\",\n \"domainId\": \"<integer>\",\n \"lastSessionActivity\": \"<dateTime>\",\n \"isLockedOut\": \"<boolean>\",\n \"radiusUserName\": \"<string>\",\n \"twoFactor\": \"<boolean>\",\n \"radiusTwoFactor\": \"<boolean>\",\n \"isEmailVerified\": \"<boolean>\",\n \"mustVerifyEmail\": \"<boolean>\",\n \"verifyEmailSentDate\": \"<dateTime>\",\n \"passwordLastChanged\": \"<dateTime>\",\n \"dateOptionId\": \"<integer>\",\n \"timeOptionId\": \"<integer>\",\n \"isEmailCopiedFromAD\": \"<boolean>\",\n \"organizationUnitId\": \"<integer>\",\n \"adGuid\": \"<string>\",\n \"adAccountExpires\": \"<dateTime>\",\n \"resetSessionStarted\": \"<dateTime>\",\n \"isApplicationAccount\": \"<boolean>\",\n \"oathTwoFactor\": \"<boolean>\",\n \"oathVerified\": \"<boolean>\",\n \"duoTwoFactor\": \"<boolean>\",\n \"fido2TwoFactor\": \"<boolean>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Change User Password",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"<string>\",\n    \"newPassword\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/users/change-password",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								"change-password"
							]
						},
						"description": "Change a user's password"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\": \"<string>\",\n    \"newPassword\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "User object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\": \"<string>\",\n    \"newPassword\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"userName\": \"<string>\",\n \"displayName\": \"<string>\",\n \"lastLogin\": \"<dateTime>\",\n \"created\": \"<dateTime>\",\n \"enabled\": \"<boolean>\",\n \"loginFailures\": \"<integer>\",\n \"emailAddress\": \"<string>\",\n \"userLcid\": \"<integer>\",\n \"domainId\": \"<integer>\",\n \"lastSessionActivity\": \"<dateTime>\",\n \"isLockedOut\": \"<boolean>\",\n \"radiusUserName\": \"<string>\",\n \"twoFactor\": \"<boolean>\",\n \"radiusTwoFactor\": \"<boolean>\",\n \"isEmailVerified\": \"<boolean>\",\n \"mustVerifyEmail\": \"<boolean>\",\n \"verifyEmailSentDate\": \"<dateTime>\",\n \"passwordLastChanged\": \"<dateTime>\",\n \"dateOptionId\": \"<integer>\",\n \"timeOptionId\": \"<integer>\",\n \"isEmailCopiedFromAD\": \"<boolean>\",\n \"organizationUnitId\": \"<integer>\",\n \"adGuid\": \"<string>\",\n \"adAccountExpires\": \"<dateTime>\",\n \"resetSessionStarted\": \"<dateTime>\",\n \"isApplicationAccount\": \"<boolean>\",\n \"oathTwoFactor\": \"<boolean>\",\n \"oathVerified\": \"<boolean>\",\n \"duoTwoFactor\": \"<boolean>\",\n \"fido2TwoFactor\": \"<boolean>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\": \"<string>\",\n    \"newPassword\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"currentPassword\": \"<string>\",\n    \"newPassword\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/users/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "key-management",
			"item": [
				{
					"name": "Get Key Management Configuration",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/key-management",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"key-management"
							]
						},
						"description": "Get the current or previous Key Management configuration"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "KeyManagementConfigModel object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"keyManagementConfigId\": \"<integer>\",\n \"keyManagementTypeId\": \"<integer>\",\n \"keyManagementTypeName\": \"<string>\",\n \"awsKmsAccessKeyId\": \"<string>\",\n \"awsKmsSecretAccessKey\": \"<string>\",\n \"awsKmsKeyId\": \"<string>\",\n \"awsKmsKeyArn\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update Key Management Configuration",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"keyManagementTypeId\": \"<integer>\",\n    \"awsKmsAccessKeyId\": \"<string>\",\n    \"awsKmsSecretAccessKey\": \"<string>\",\n    \"awsKmsKeyId\": \"<string>\",\n    \"awsKmsKeyArn\": \"<string>\",\n    \"azureKeyVaultPrincipalId\": \"<string>\",\n    \"azureKeyVaultPrincipalSecret\": \"<string>\",\n    \"azureKeyVaultBaseUrl\": \"<string>\",\n    \"azureKeyVaultKeyName\": \"<string>\",\n    \"azureKeyVaultKeyVersion\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/key-management",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"key-management"
							]
						},
						"description": "Update the Key Management configuration"
					},
					"response": [
						{
							"name": "KeyManagementConfigModel object",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyManagementTypeId\": \"<integer>\",\n    \"awsKmsAccessKeyId\": \"<string>\",\n    \"awsKmsSecretAccessKey\": \"<string>\",\n    \"awsKmsKeyId\": \"<string>\",\n    \"awsKmsKeyArn\": \"<string>\",\n    \"azureKeyVaultPrincipalId\": \"<string>\",\n    \"azureKeyVaultPrincipalSecret\": \"<string>\",\n    \"azureKeyVaultBaseUrl\": \"<string>\",\n    \"azureKeyVaultKeyName\": \"<string>\",\n    \"azureKeyVaultKeyVersion\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"keyManagementConfigId\": \"<integer>\",\n \"keyManagementTypeId\": \"<integer>\",\n \"keyManagementTypeName\": \"<string>\",\n \"awsKmsAccessKeyId\": \"<string>\",\n \"awsKmsSecretAccessKey\": \"<string>\",\n \"awsKmsKeyId\": \"<string>\",\n \"awsKmsKeyArn\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyManagementTypeId\": \"<integer>\",\n    \"awsKmsAccessKeyId\": \"<string>\",\n    \"awsKmsSecretAccessKey\": \"<string>\",\n    \"awsKmsKeyId\": \"<string>\",\n    \"awsKmsKeyArn\": \"<string>\",\n    \"azureKeyVaultPrincipalId\": \"<string>\",\n    \"azureKeyVaultPrincipalSecret\": \"<string>\",\n    \"azureKeyVaultBaseUrl\": \"<string>\",\n    \"azureKeyVaultKeyName\": \"<string>\",\n    \"azureKeyVaultKeyVersion\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyManagementTypeId\": \"<integer>\",\n    \"awsKmsAccessKeyId\": \"<string>\",\n    \"awsKmsSecretAccessKey\": \"<string>\",\n    \"awsKmsKeyId\": \"<string>\",\n    \"awsKmsKeyArn\": \"<string>\",\n    \"azureKeyVaultPrincipalId\": \"<string>\",\n    \"azureKeyVaultPrincipalSecret\": \"<string>\",\n    \"azureKeyVaultBaseUrl\": \"<string>\",\n    \"azureKeyVaultKeyName\": \"<string>\",\n    \"azureKeyVaultKeyVersion\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"keyManagementTypeId\": \"<integer>\",\n    \"awsKmsAccessKeyId\": \"<string>\",\n    \"awsKmsSecretAccessKey\": \"<string>\",\n    \"awsKmsKeyId\": \"<string>\",\n    \"awsKmsKeyArn\": \"<string>\",\n    \"azureKeyVaultPrincipalId\": \"<string>\",\n    \"azureKeyVaultPrincipalSecret\": \"<string>\",\n    \"azureKeyVaultBaseUrl\": \"<string>\",\n    \"azureKeyVaultKeyName\": \"<string>\",\n    \"azureKeyVaultKeyVersion\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/key-management",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get Key Management Config Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/key-management/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"key-management",
								"stub"
							]
						},
						"description": "Return the default values for a new Key Management Config"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "KeyManagementConfigModel object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/key-management/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"key-management",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"keyManagementConfigId\": \"<integer>\",\n \"keyManagementTypeId\": \"<integer>\",\n \"keyManagementTypeName\": \"<string>\",\n \"awsKmsAccessKeyId\": \"<string>\",\n \"awsKmsSecretAccessKey\": \"<string>\",\n \"awsKmsKeyId\": \"<string>\",\n \"awsKmsKeyArn\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "launcheragents",
			"item": [
				{
					"name": "collections",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get Launcher Agent Collection",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections/:id?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections",
												":id"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>",
													"description": "Whether to include inactive Launcher Agent Collections in the results"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Launcher Agent Collection ID"
												}
											]
										},
										"description": "Get a single Launcher Agent Collection by ID"
									},
									"response": [
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "LauncherAgentCollection object",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"active\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"activeAgentCount\": \"<integer>\",\n \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Update Launcher Agent Collection",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Launcher Agent Collection ID"
												}
											]
										},
										"description": "Update a single Launcher Agent Collection by ID"
									},
									"response": [
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Launcher Agent Collection object",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"active\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"activeAgentCount\": \"<integer>\",\n \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/launcheragents/collections/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"launcheragents",
														"collections",
														"<integer>"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Search Launcher Agent Collections",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents/collections?filter.includeInactive=<boolean>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										"collections"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive Launcher Agent Collections in the results"
										},
										{
											"key": "filter.searchText",
											"value": "<string>",
											"description": "Search text"
										},
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									]
								},
								"description": "Search, filter, sort, and page Launcher Agent Collections"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections?filter.includeInactive=<boolean>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											],
											"query": [
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections?filter.includeInactive=<boolean>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											],
											"query": [
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Launcher Agent Collection search result object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections?filter.includeInactive=<boolean>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											],
											"query": [
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"activeAgentCount\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"activeAgentCount\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections?filter.includeInactive=<boolean>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											],
											"query": [
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Create Launcher Agent Collection",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/launcheragents/collections",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										"collections"
									]
								},
								"description": "Create a new Launcher Agent Collection"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Launcher Agent Collection object",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"active\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"activeAgentCount\": \"<integer>\",\n \"recordStandaloneSessions\": \"<boolean>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get Launcher Agent Collection Stub",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents/collections/stub?includeInactive=<boolean>&searchText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										"collections",
										"stub"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "IncludeInactive"
										},
										{
											"key": "searchText",
											"value": "<string>",
											"description": "SearchText"
										}
									]
								},
								"description": "Return the default values for a new Launcher Agent Collection"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections/stub?includeInactive=<boolean>&searchText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections",
												"stub"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "searchText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections/stub?includeInactive=<boolean>&searchText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections",
												"stub"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "searchText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Launcher Agent Collection object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections/stub?includeInactive=<boolean>&searchText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections",
												"stub"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "searchText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"active\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"activeAgentCount\": \"<integer>\",\n \"recordStandaloneSessions\": \"<boolean>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/collections/stub?includeInactive=<boolean>&searchText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"collections",
												"stub"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "searchText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Launcher Agent ",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents/:id?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										":id"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive Launcher Agents in the results"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Launcher Agent ID"
										}
									]
								},
								"description": "Get a single Launcher Agent  by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "LauncherAgent object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"hostName\": \"<string>\",\n \"active\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"collectionId\": \"<integer>\",\n \"collectionName\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update Launcher Agent ",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/launcheragents/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Launcher Agent ID"
										}
									]
								},
								"description": "Update a single Launcher Agent by ID"
							},
							"response": [
								{
									"name": "Launcher Agent object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"hostName\": \"<string>\",\n \"active\": \"<boolean>\",\n \"created\": \"<dateTime>\",\n \"collectionId\": \"<integer>\",\n \"collectionName\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"recordStandaloneSessions\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/launcheragents/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"launcheragents",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Launcher Agents",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/launcheragents?filter.includeInactive=<boolean>&filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&filter.outOfDate=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"launcheragents"
							],
							"query": [
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "IncludeInactive"
								},
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "SearchText"
								},
								{
									"key": "filter.launcherAgentCollectionId",
									"value": "<integer>",
									"description": "LauncherAgentCollectionId"
								},
								{
									"key": "filter.outOfDate",
									"value": "<boolean>",
									"description": "OutOfDate"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page Launcher Agent s"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents?filter.includeInactive=<boolean>&filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&filter.outOfDate=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "filter.outOfDate",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Launcher Agent  search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents?filter.includeInactive=<boolean>&filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&filter.outOfDate=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "filter.outOfDate",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"hostName\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"created\": \"<dateTime>\",\n   \"lastActivity\": \"<dateTime>\",\n   \"collectionId\": \"<integer>\",\n   \"collectionName\": \"<string>\",\n   \"version\": \"<string>\",\n   \"recordStandaloneSessions\": \"<boolean>\",\n   \"issue\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"hostName\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"created\": \"<dateTime>\",\n   \"lastActivity\": \"<dateTime>\",\n   \"collectionId\": \"<integer>\",\n   \"collectionName\": \"<string>\",\n   \"version\": \"<string>\",\n   \"recordStandaloneSessions\": \"<boolean>\",\n   \"issue\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents?filter.includeInactive=<boolean>&filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&filter.outOfDate=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "filter.outOfDate",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents?filter.includeInactive=<boolean>&filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&filter.outOfDate=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents"
									],
									"query": [
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "filter.outOfDate",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Search Launcher Agents",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/launcheragents/issues?filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"launcheragents",
								"issues"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "SearchText"
								},
								{
									"key": "filter.launcherAgentCollectionId",
									"value": "<integer>",
									"description": "LauncherAgentCollectionId"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page Launcher Agent s"
					},
					"response": [
						{
							"name": "Launcher Agent  search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents/issues?filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										"issues"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"hostName\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"created\": \"<dateTime>\",\n   \"lastActivity\": \"<dateTime>\",\n   \"collectionId\": \"<integer>\",\n   \"collectionName\": \"<string>\",\n   \"version\": \"<string>\",\n   \"recordStandaloneSessions\": \"<boolean>\",\n   \"issue\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"hostName\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"created\": \"<dateTime>\",\n   \"lastActivity\": \"<dateTime>\",\n   \"collectionId\": \"<integer>\",\n   \"collectionName\": \"<string>\",\n   \"version\": \"<string>\",\n   \"recordStandaloneSessions\": \"<boolean>\",\n   \"issue\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents/issues?filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										"issues"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents/issues?filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										"issues"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launcheragents/issues?filter.searchText=<string>&filter.launcherAgentCollectionId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launcheragents",
										"issues"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.launcherAgentCollectionId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "launchers",
			"item": [
				{
					"name": "Search Launchers",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/launchers?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"launchers"
							],
							"query": [
								{
									"key": "filter.application",
									"value": "<string>",
									"description": "Associated application"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive launchers"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page launchers"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Launcher search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"application\": \"<string>\",\n   \"isCustom\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"application\": \"<string>\",\n   \"isCustom\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Lookup Launchers",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/launchers/lookup?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"launchers",
								"lookup"
							],
							"query": [
								{
									"key": "filter.application",
									"value": "<string>",
									"description": "Associated application"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive launchers"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page launchers, returning only launcher ID and name"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/lookup?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"lookup"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Launcher search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/lookup?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"lookup"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/lookup?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"lookup"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/lookup?filter.application=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"lookup"
									],
									"query": [
										{
											"key": "filter.application",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Launcher",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/launchers/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"launchers",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<integer>",
									"description": "Launcher ID"
								}
							]
						},
						"description": "Get a single launcher by ID"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"<integer>"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"<integer>"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Launcher object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"active\": \"<boolean>\",\n \"application\": \"<string>\",\n \"isCustom\": \"<boolean>\",\n \"customLauncherId\": \"<integer>\",\n \"customLauncherProcessName\": \"<string>\",\n \"customParameters\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/launchers/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"launchers",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "reports",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Report",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Report ID"
										}
									]
								},
								"description": "Gets a Report and returns the Report Model"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Report object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"systemReport\": \"<boolean>\",\n \"description\": \"<string>\",\n \"categoryId\": \"<integer>\",\n \"chartType\": \"<string>\",\n \"is3DReport\": \"<boolean>\",\n \"pageSize\": \"<integer>\",\n \"reportSql\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update Report",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Report ID"
										}
									]
								},
								"description": "Updates a Report and returns the report"
							},
							"response": [
								{
									"name": "Report object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"systemReport\": \"<boolean>\",\n \"description\": \"<string>\",\n \"categoryId\": \"<integer>\",\n \"chartType\": \"<string>\",\n \"is3DReport\": \"<boolean>\",\n \"pageSize\": \"<integer>\",\n \"reportSql\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete Report",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Report ID"
										}
									]
								},
								"description": "Delete a report by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Report Parameters",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/:id/defaultparameters",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										":id",
										"defaultparameters"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Report ID"
										}
									]
								},
								"description": "Gets the default parameters for the specified report"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>/defaultparameters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>",
												"defaultparameters"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>/defaultparameters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>",
												"defaultparameters"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>/defaultparameters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>",
												"defaultparameters"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Report Parameters",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/reports/<integer>/defaultparameters",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"reports",
												"<integer>",
												"defaultparameters"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"defaultParameterValues\": [\n  {\n   \"name\": \"<string>\",\n   \"value\": {},\n   \"variableName\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"value\": {},\n   \"variableName\": \"<string>\"\n  }\n ]\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Reports",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive Reports in the results"
								},
								{
									"key": "filter.categoryId",
									"value": "<integer>",
									"description": "Category ID"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page reports"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Report search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"enabled\": \"<boolean>\",\n   \"categoryId\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"enabled\": \"<boolean>\",\n   \"categoryId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create Report",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/reports",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports"
							]
						},
						"description": "Creates a new Report and returns the report"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Report object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"systemReport\": \"<boolean>\",\n \"description\": \"<string>\",\n \"categoryId\": \"<integer>\",\n \"chartType\": \"<string>\",\n \"is3DReport\": \"<boolean>\",\n \"pageSize\": \"<integer>\",\n \"reportSql\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"categoryId\": \"<integer>\",\n    \"reportSql\": \"<string>\",\n    \"description\": \"<string>\",\n    \"chartType\": \"<string>\",\n    \"is3DReport\": \"<boolean>\",\n    \"pageSize\": \"<integer>\",\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Lookup Reports",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive Reports in the results"
								},
								{
									"key": "filter.categoryId",
									"value": "<integer>",
									"description": "Category ID"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page reports, returning only group ID and name"
					},
					"response": [
						{
							"name": "Reports search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/lookup?filter.searchText=<string>&filter.includeInactive=<boolean>&filter.categoryId=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.categoryId",
											"value": "<integer>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "List Report Categories",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports/categories",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports",
								"categories"
							]
						},
						"description": "List the report categories"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"categories"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Report categories array",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"categories"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"categories"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/categories",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"categories"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "List Report Chart Types",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/reports/charttypes",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports",
								"charttypes"
							]
						},
						"description": "List the report chart types"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/charttypes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"charttypes"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/charttypes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"charttypes"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/charttypes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"charttypes"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Report chart types array",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/reports/charttypes",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"charttypes"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\"\n }\n]"
						}
					]
				},
				{
					"name": "Execute Report",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"parameters\": [\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        },\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        }\n    ],\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/reports/execute",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"reports",
								"execute"
							]
						},
						"description": "Executes a Report and returns the results"
					},
					"response": [
						{
							"name": "Report object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"parameters\": [\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        },\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        }\n    ],\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/execute",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"execute"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"enabled\": \"<boolean>\",\n \"systemReport\": \"<boolean>\",\n \"columns\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"rows\": [\n  [],\n  []\n ]\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"parameters\": [\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        },\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        }\n    ],\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/execute",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"execute"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"parameters\": [\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        },\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        }\n    ],\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/execute",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"execute"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"parameters\": [\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        },\n        {\n            \"name\": \"<string>\",\n            \"value\": \"<string>\"\n        }\n    ],\n    \"dualControlApproval\": {\n        \"username\": \"<string>\",\n        \"password\": \"<string>\",\n        \"domainId\": \"<integer>\",\n        \"twoFactor\": \"<string>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/reports/execute",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"reports",
										"execute"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "sdk-client-accounts",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get SDK Client Account",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "SDK Client Account Id"
										}
									]
								},
								"description": "Get a single SDK Client account by ID"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "SdkClientAccountModel",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"ipAddress\": \"<string>\",\n \"clientId\": \"<uuid>\",\n \"clientSecret\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Update SDK Client Account",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "SDK Client Account Id"
										}
									]
								},
								"description": "Update a single SDK Client account by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "SdkClientAccountModel",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"ipAddress\": \"<string>\",\n \"clientId\": \"<uuid>\",\n \"clientSecret\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Revoke SDK Client Account",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts/:id/revoke",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts",
										":id",
										"revoke"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "SDK Client Account Id"
										}
									]
								},
								"description": "Revoke a single SDK Client account by ID"
							},
							"response": [
								{
									"name": "SdkClientAccountModel",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>/revoke",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>",
												"revoke"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"ipAddress\": \"<string>\",\n \"clientId\": \"<uuid>\",\n \"clientSecret\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>/revoke",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>",
												"revoke"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>/revoke",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>",
												"revoke"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/<integer>/revoke",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"<integer>",
												"revoke"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "enabled",
					"item": [
						{
							"name": "Get Current State",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts",
										"enabled"
									]
								},
								"description": "Get the current state of SDK client account"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "SdkClientAccountModel",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"ipAddress\": \"<string>\",\n \"clientId\": \"<uuid>\",\n \"clientSecret\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Toggle Current State",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts",
										"enabled"
									]
								},
								"description": "Toggle the current state of SDK client account"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "SdkClientAccountModel",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"ipAddress\": \"<string>\",\n \"clientId\": \"<uuid>\",\n \"clientSecret\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-accounts/enabled",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-accounts",
												"enabled"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search SDK Client Accounts",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sdk-client-accounts?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-accounts"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "SearchText"
								},
								{
									"key": "filter.userId",
									"value": "<integer>",
									"description": "UserId"
								},
								{
									"key": "filter.operator",
									"value": "<string>",
									"description": "Operator"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page app SDK Client accounts"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "SDK Client Account search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"filter\": {\n  \"searchText\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"operator\": \"Include\"\n },\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"userDisplayName\": \"<string>\",\n   \"name\": \"<string>\",\n   \"details\": \"<string>\",\n   \"ipAddress\": \"<string>\",\n   \"clientId\": \"<uuid>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"userDisplayName\": \"<string>\",\n   \"name\": \"<string>\",\n   \"details\": \"<string>\",\n   \"ipAddress\": \"<string>\",\n   \"clientId\": \"<uuid>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create SDK Client Account",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ruleName\": \"<string>\",\n    \"clientId\": \"<uuid>\",\n    \"onboardingKey\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sdk-client-accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-accounts"
							]
						},
						"description": "Create a new SDK Client account"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ruleName\": \"<string>\",\n    \"clientId\": \"<uuid>\",\n    \"onboardingKey\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ruleName\": \"<string>\",\n    \"clientId\": \"<uuid>\",\n    \"onboardingKey\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ruleName\": \"<string>\",\n    \"clientId\": \"<uuid>\",\n    \"onboardingKey\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "SdkClientAccountModel",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"ruleName\": \"<string>\",\n    \"clientId\": \"<uuid>\",\n    \"onboardingKey\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-accounts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-accounts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"ipAddress\": \"<string>\",\n \"clientId\": \"<uuid>\",\n \"clientSecret\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "sdk-client-rules",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get SDK Client Rule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "SDK Client Rule Id"
										}
									]
								},
								"description": "Get a single SDK Client rule by ID"
							},
							"response": [
								{
									"name": "SdkClientRuleModel",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"requireOnboardingKey\": \"<boolean>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Update SDK Client Rule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"details\": \"<string>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "SDK Client Rule Id"
										}
									]
								},
								"description": "Update a single SDK Client rule by ID"
							},
							"response": [
								{
									"name": "SdkClientRuleModel",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"details\": \"<string>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"requireOnboardingKey\": \"<boolean>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"details\": \"<string>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"details\": \"<string>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"details\": \"<string>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete SDK Client Rule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "SDK Client Rule Id"
										}
									]
								},
								"description": "Delete a SDK Client rule by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "DeletedModel",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get Onboarding Key for SDK Client Rule",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/:id/onboarding-key",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										":id",
										"onboarding-key"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "SDK Client Rule Id"
										}
									]
								},
								"description": "Get the onboarding key for a single SDK Client rule by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>/onboarding-key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>",
												"onboarding-key"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>/onboarding-key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>",
												"onboarding-key"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>/onboarding-key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>",
												"onboarding-key"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "SdkClientRuleModel",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/sdk-client-rules/<integer>/onboarding-key",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"sdk-client-rules",
												"<integer>",
												"onboarding-key"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"<string>\""
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search SDK Client Rules",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sdk-client-rules?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-rules"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "SearchText"
								},
								{
									"key": "filter.userId",
									"value": "<integer>",
									"description": "UserId"
								},
								{
									"key": "filter.operator",
									"value": "<string>",
									"description": "Operator"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page app SDK Client rules"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "SDK Client Rule search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"filter\": {\n  \"searchText\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"operator\": \"Include\"\n },\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"userDisplayName\": \"<string>\",\n   \"name\": \"<string>\",\n   \"details\": \"<string>\",\n   \"requireOnboardingKey\": \"<boolean>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"userDisplayName\": \"<string>\",\n   \"name\": \"<string>\",\n   \"details\": \"<string>\",\n   \"requireOnboardingKey\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.operator",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create New SDK Client Rule",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"details\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/sdk-client-rules",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-rules"
							]
						},
						"description": "Create a new SDK Client rule"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"details\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "SdkClientRuleModel",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"details\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"requireOnboardingKey\": \"<boolean>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"details\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"details\": \"<string>\",\n    \"userId\": \"<integer>\",\n    \"requireOnboardingKey\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get SDK Client Rule Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sdk-client-rules/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-rules",
								"stub"
							]
						},
						"description": "Return the default values for a new SDK Client rule"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "SdkClientRuleModel",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/sdk-client-rules/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"sdk-client-rules",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"userDisplayName\": \"<string>\",\n \"name\": \"<string>\",\n \"details\": \"<string>\",\n \"requireOnboardingKey\": \"<boolean>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "secret-access-requests",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Secret Access Request by ID",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret Access ID"
										}
									]
								},
								"description": "Get Secret Access Request by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Secret Access Model",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"secretAccessRequestId\": \"<integer>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"requestingUserId\": \"<integer>\",\n \"requestUsername\": \"<string>\",\n \"requestDate\": \"<dateTime>\",\n \"startDate\": \"<dateTime>\",\n \"requestComment\": \"<string>\",\n \"status\": \"WaitingForRequest\",\n \"statusDescription\": \"<string>\",\n \"responseComment\": \"<string>\",\n \"responseDate\": \"<dateTime>\",\n \"expirationDate\": \"<dateTime>\",\n \"ticketNumber\": \"<string>\",\n \"ticketSystemId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"secretName\": \"<string>\",\n \"approverDisplayName\": \"<string>\",\n \"currentUserRestrictedFromReviewing\": \"<boolean>\",\n \"reviewStatusMessage\": \"<string>\",\n \"completed\": \"<boolean>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get Secret access request history for the user that created the request.",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests/:id/history?id=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests",
										":id",
										"history"
									],
									"query": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret Access Request Id"
										},
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								},
								"description": "Get Secret access request history for the user that created the request."
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/:id/history?id=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												":id",
												"history"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/:id/history?id=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												":id",
												"history"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Secret Access Request History Model",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/:id/history?id=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												":id",
												"history"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"dateRecorded\": \"<dateTime>\",\n   \"fullName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"details\": \"<string>\"\n  },\n  {\n   \"dateRecorded\": \"<dateTime>\",\n   \"fullName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"details\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/:id/history?id=<integer>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												":id",
												"history"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "secrets",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "Get Secret Access Requests by Status for Current User.",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/secrets/:id?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												"secrets",
												":id"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>",
													"description": "Number of records to skip before taking results"
												},
												{
													"key": "take",
													"value": "<integer>",
													"description": "Maximum number of records to include in results"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>",
													"description": "Sort field name"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>",
													"description": "Sort direction"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>",
													"description": "Priority index. Sorts with lower values are executed earlier"
												},
												{
													"key": "messageText",
													"value": "<string>",
													"description": "MessageText"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Secret ID"
												}
											]
										},
										"description": "Get Secret Access Requests by Status for Current User."
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Secret Access Model",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"secretAccessRequestId\": \"<integer>\",\n   \"accessRequestWorkflowMapId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"requestingUserId\": \"<integer>\",\n   \"requestUsername\": \"<string>\",\n   \"requestDate\": \"<dateTime>\",\n   \"startDate\": \"<dateTime>\",\n   \"requestComment\": \"<string>\",\n   \"status\": \"Pending\",\n   \"statusDescription\": \"<string>\",\n   \"responseComment\": \"<string>\",\n   \"responseDate\": \"<dateTime>\",\n   \"expirationDate\": \"<dateTime>\",\n   \"ticketNumber\": \"<string>\",\n   \"ticketSystemId\": \"<integer>\",\n   \"folderId\": \"<integer>\",\n   \"secretName\": \"<string>\",\n   \"approverDisplayName\": \"<string>\",\n   \"currentUserRestrictedFromReviewing\": \"<boolean>\",\n   \"reviewStatusMessage\": \"<string>\",\n   \"completed\": \"<boolean>\"\n  },\n  {\n   \"secretAccessRequestId\": \"<integer>\",\n   \"accessRequestWorkflowMapId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"requestingUserId\": \"<integer>\",\n   \"requestUsername\": \"<string>\",\n   \"requestDate\": \"<dateTime>\",\n   \"startDate\": \"<dateTime>\",\n   \"requestComment\": \"<string>\",\n   \"status\": \"Denied\",\n   \"statusDescription\": \"<string>\",\n   \"responseComment\": \"<string>\",\n   \"responseDate\": \"<dateTime>\",\n   \"expirationDate\": \"<dateTime>\",\n   \"ticketNumber\": \"<string>\",\n   \"ticketSystemId\": \"<integer>\",\n   \"folderId\": \"<integer>\",\n   \"secretName\": \"<string>\",\n   \"approverDisplayName\": \"<string>\",\n   \"currentUserRestrictedFromReviewing\": \"<boolean>\",\n   \"reviewStatusMessage\": \"<string>\",\n   \"completed\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										}
									]
								},
								{
									"name": "Get Secret Access Options by Secret ID",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/secrets/:id/options",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												"secrets",
												":id",
												"options"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Secret ID"
												}
											]
										},
										"description": "Get Secret Access Options by Secret ID"
									},
									"response": [
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/options",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"options"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/options",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"options"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Secret Access Request Options",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/options",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"options"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"requireCheckout\": \"<boolean>\",\n \"isDefaultCheckoutInterval\": \"<boolean>\",\n \"customCheckoutIntervalDays\": \"<integer>\",\n \"customCheckoutIntervalHours\": \"<integer>\",\n \"customCheckoutIntervalMinutes\": \"<integer>\",\n \"enableDoubleLock\": \"<boolean>\",\n \"enableRequiresApprovalForAccess\": \"<boolean>\",\n \"editorsAlsoRequireApproval\": \"<boolean>\",\n \"ownersAndApproversAlsoRequireApproval\": \"<boolean>\",\n \"requireCommentTicketNumber\": \"<boolean>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/options",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"options"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										}
									]
								},
								{
									"name": "Create a new View Comment on a secret.",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"comment\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-access-requests/secrets/:id/view-comment",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-access-requests",
												"secrets",
												":id",
												"view-comment"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Secret ID"
												}
											]
										},
										"description": "Create a new View Comment on a secret."
									},
									"response": [
										{
											"name": "Success or Failure of the save.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"comment\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/view-comment",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"view-comment"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<boolean>\""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"comment\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/view-comment",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"view-comment"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"comment\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/view-comment",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"view-comment"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"comment\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secret-access-requests/secrets/<integer>/view-comment",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secret-access-requests",
														"secrets",
														"<integer>",
														"view-comment"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Secret Access Requests by Status for Current User.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-access-requests?filter.status=<string>&filter.isMyRequest=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-access-requests"
							],
							"query": [
								{
									"key": "filter.status",
									"value": "<string>",
									"description": "Status"
								},
								{
									"key": "filter.isMyRequest",
									"value": "<boolean>",
									"description": "IsMyRequest"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Get Secret Access Requests by Status for Current User."
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests?filter.status=<string>&filter.isMyRequest=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									],
									"query": [
										{
											"key": "filter.status",
											"value": "<string>"
										},
										{
											"key": "filter.isMyRequest",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Secret Access Model",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests?filter.status=<string>&filter.isMyRequest=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									],
									"query": [
										{
											"key": "filter.status",
											"value": "<string>"
										},
										{
											"key": "filter.isMyRequest",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"secretAccessRequestId\": \"<integer>\",\n   \"accessRequestWorkflowMapId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"requestingUserId\": \"<integer>\",\n   \"requestUsername\": \"<string>\",\n   \"requestDate\": \"<dateTime>\",\n   \"startDate\": \"<dateTime>\",\n   \"requestComment\": \"<string>\",\n   \"status\": \"Canceled\",\n   \"statusDescription\": \"<string>\",\n   \"responseComment\": \"<string>\",\n   \"responseDate\": \"<dateTime>\",\n   \"expirationDate\": \"<dateTime>\",\n   \"ticketNumber\": \"<string>\",\n   \"ticketSystemId\": \"<integer>\",\n   \"folderId\": \"<integer>\",\n   \"secretName\": \"<string>\",\n   \"approverDisplayName\": \"<string>\",\n   \"currentUserRestrictedFromReviewing\": \"<boolean>\",\n   \"reviewStatusMessage\": \"<string>\",\n   \"completed\": \"<boolean>\"\n  },\n  {\n   \"secretAccessRequestId\": \"<integer>\",\n   \"accessRequestWorkflowMapId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"requestingUserId\": \"<integer>\",\n   \"requestUsername\": \"<string>\",\n   \"requestDate\": \"<dateTime>\",\n   \"startDate\": \"<dateTime>\",\n   \"requestComment\": \"<string>\",\n   \"status\": \"Denied\",\n   \"statusDescription\": \"<string>\",\n   \"responseComment\": \"<string>\",\n   \"responseDate\": \"<dateTime>\",\n   \"expirationDate\": \"<dateTime>\",\n   \"ticketNumber\": \"<string>\",\n   \"ticketSystemId\": \"<integer>\",\n   \"folderId\": \"<integer>\",\n   \"secretName\": \"<string>\",\n   \"approverDisplayName\": \"<string>\",\n   \"currentUserRestrictedFromReviewing\": \"<boolean>\",\n   \"reviewStatusMessage\": \"<string>\",\n   \"completed\": \"<boolean>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests?filter.status=<string>&filter.isMyRequest=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									],
									"query": [
										{
											"key": "filter.status",
											"value": "<string>"
										},
										{
											"key": "filter.isMyRequest",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests?filter.status=<string>&filter.isMyRequest=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									],
									"query": [
										{
											"key": "filter.status",
											"value": "<string>"
										},
										{
											"key": "filter.isMyRequest",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Update a new Secret Access Request",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"secretAccessRequestId\": \"<integer>\",\n    \"startDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Sunday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    },\n    \"status\": \"Canceled\",\n    \"responseComment\": \"<string>\",\n    \"expirationDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Friday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/secret-access-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-access-requests"
							]
						},
						"description": "Update a new Secret Access Request"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretAccessRequestId\": \"<integer>\",\n    \"startDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Sunday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    },\n    \"status\": \"Canceled\",\n    \"responseComment\": \"<string>\",\n    \"expirationDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Friday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretAccessRequestId\": \"<integer>\",\n    \"startDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Sunday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    },\n    \"status\": \"Canceled\",\n    \"responseComment\": \"<string>\",\n    \"expirationDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Friday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Secret Access Model",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretAccessRequestId\": \"<integer>\",\n    \"startDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Sunday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    },\n    \"status\": \"Canceled\",\n    \"responseComment\": \"<string>\",\n    \"expirationDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Friday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"actionResultMessage\": \"<string>\",\n \"secretAccessRequestId\": \"<integer>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"requestingUserId\": \"<integer>\",\n \"requestUsername\": \"<string>\",\n \"requestDate\": \"<dateTime>\",\n \"startDate\": \"<dateTime>\",\n \"requestComment\": \"<string>\",\n \"status\": \"Denied\",\n \"statusDescription\": \"<string>\",\n \"responseComment\": \"<string>\",\n \"responseDate\": \"<dateTime>\",\n \"expirationDate\": \"<dateTime>\",\n \"ticketNumber\": \"<string>\",\n \"ticketSystemId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"secretName\": \"<string>\",\n \"approverDisplayName\": \"<string>\",\n \"currentUserRestrictedFromReviewing\": \"<boolean>\",\n \"reviewStatusMessage\": \"<string>\",\n \"completed\": \"<boolean>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretAccessRequestId\": \"<integer>\",\n    \"startDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Sunday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    },\n    \"status\": \"Canceled\",\n    \"responseComment\": \"<string>\",\n    \"expirationDate\": {\n        \"dateTime\": \"<dateTime>\",\n        \"utcDateTime\": \"<dateTime>\",\n        \"localDateTime\": \"<dateTime>\",\n        \"date\": \"<dateTime>\",\n        \"day\": \"<integer>\",\n        \"dayOfWeek\": \"Friday\",\n        \"dayOfYear\": \"<integer>\",\n        \"hour\": \"<integer>\",\n        \"millisecond\": \"<integer>\",\n        \"minute\": \"<integer>\",\n        \"month\": \"<integer>\",\n        \"offset\": \"<time-span>\",\n        \"second\": \"<integer>\",\n        \"ticks\": \"<long>\",\n        \"utcTicks\": \"<long>\",\n        \"timeOfDay\": \"<time-span>\",\n        \"year\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create a new Secret Access Request",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"secretId\": \"<integer>\",\n    \"startDate\": \"<dateTime>\",\n    \"requestComment\": \"<string>\",\n    \"expirationDate\": \"<dateTime>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/secret-access-requests",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-access-requests"
							]
						},
						"description": "Create a new Secret Access Request"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"startDate\": \"<dateTime>\",\n    \"requestComment\": \"<string>\",\n    \"expirationDate\": \"<dateTime>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Secret Access Model",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"startDate\": \"<dateTime>\",\n    \"requestComment\": \"<string>\",\n    \"expirationDate\": \"<dateTime>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"secretAccessRequestId\": \"<integer>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"requestingUserId\": \"<integer>\",\n \"requestUsername\": \"<string>\",\n \"requestDate\": \"<dateTime>\",\n \"startDate\": \"<dateTime>\",\n \"requestComment\": \"<string>\",\n \"status\": \"Pending\",\n \"statusDescription\": \"<string>\",\n \"responseComment\": \"<string>\",\n \"responseDate\": \"<dateTime>\",\n \"expirationDate\": \"<dateTime>\",\n \"ticketNumber\": \"<string>\",\n \"ticketSystemId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"secretName\": \"<string>\",\n \"approverDisplayName\": \"<string>\",\n \"currentUserRestrictedFromReviewing\": \"<boolean>\",\n \"reviewStatusMessage\": \"<string>\",\n \"completed\": \"<boolean>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"startDate\": \"<dateTime>\",\n    \"requestComment\": \"<string>\",\n    \"expirationDate\": \"<dateTime>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"startDate\": \"<dateTime>\",\n    \"requestComment\": \"<string>\",\n    \"expirationDate\": \"<dateTime>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-access-requests",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-access-requests"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "secret-dependencies",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Secret Dependency",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret Dependency ID"
										}
									]
								},
								"description": "Gets a Secret Dependency and returns the Secret Dependency Model"
							},
							"response": [
								{
									"name": "Secret Dependency object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update Secret Dependency",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret Dependency ID"
										}
									]
								},
								"description": "Updates a Secret Dependency and returns the model"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "null"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "null"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "null"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "SecretDependencyModel object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "null"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "null"
								}
							]
						},
						{
							"name": "Delete Secret Dependency",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret Dependency ID"
										}
									]
								},
								"description": "Delete a Secret Dependency by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "run",
					"item": [
						{
							"name": "Run Dependencies",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/run",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"run"
									]
								},
								"description": "Runs the list of dependencies and retruns an identifier that can be used to collect the status."
							},
							"response": [
								{
									"name": "Identifier of the task",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"<string>\""
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    \"<integer>\",\n    \"<integer>\"\n]"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get Secret Dependency run task status",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/run/:identifier",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"run",
										":identifier"
									],
									"variable": [
										{
											"key": "identifier",
											"value": "<string>",
											"description": "Task identifier"
										}
									]
								},
								"description": "Gets a Secret Dependency run task status"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run",
												"<string>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run",
												"<string>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Task Status",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run",
												"<string>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"percentageComplete\": \"<integer>\",\n \"isComplete\": \"<boolean>\",\n \"errors\": [\n  {\n   \"itemName\": \"<string>\",\n   \"errorMessage\": \"<string>\"\n  },\n  {\n   \"itemName\": \"<string>\",\n   \"errorMessage\": \"<string>\"\n  }\n ],\n \"taskIdentifier\": \"<string>\",\n \"status\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-dependencies/run/<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-dependencies",
												"run",
												"<string>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Secret Dependencies",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-dependencies?filter.secretId=<integer>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-dependencies"
							],
							"query": [
								{
									"key": "filter.secretId",
									"value": "<integer>",
									"description": "The Secret Id to filter on"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether or not to include inactive Secret Depenencies"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page Secret Dependencies on a Secret"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies?filter.secretId=<integer>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "SecretDependency search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies?filter.secretId=<integer>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"typeId\": \"<integer>\",\n   \"typeName\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"serviceName\": \"<string>\",\n   \"groupId\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"typeId\": \"<integer>\",\n   \"typeName\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"serviceName\": \"<string>\",\n   \"groupId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies?filter.secretId=<integer>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies?filter.secretId=<integer>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create Secret Dependency",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "null"
						},
						"url": {
							"raw": "{{baseUrl}}/secret-dependencies",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-dependencies"
							]
						},
						"description": "Creates a new Secret Dependency and returns the model"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Secret Dependency object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "null"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Secret Dependency Groups for a Secret",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-dependencies/groups/:secretId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-dependencies",
								"groups",
								":secretId"
							],
							"variable": [
								{
									"key": "secretId",
									"value": "<integer>",
									"description": "Secret ID"
								}
							]
						},
						"description": "Get Secret Dependency Groups for a Secret"
					},
					"response": [
						{
							"name": "Secret Dependency Group array",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/groups/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"groups",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"siteId\": \"<integer>\",\n  \"siteName\": \"<string>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"siteId\": \"<integer>\",\n  \"siteName\": \"<string>\"\n }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/groups/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"groups",
										"<integer>"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/groups/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"groups",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/groups/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"groups",
										"<integer>"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get Scripts that are possible to use for Dependencies",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-dependencies/scripts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-dependencies",
								"scripts"
							]
						},
						"description": "Get Scripts that are possible to use for Dependencies"
					},
					"response": [
						{
							"name": "Dependency Script array",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/scripts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"scripts"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"arguments\": [\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\",\n    \"type\": \"<string>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  ],\n  \"odbcConnectionArguments\": [\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\"\n   }\n  ]\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"arguments\": [\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\",\n    \"type\": \"<string>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\",\n    \"type\": \"<string>\"\n   }\n  ],\n  \"odbcConnectionArguments\": [\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\"\n   },\n   {\n    \"name\": \"<string>\",\n    \"value\": \"<string>\"\n   }\n  ]\n }\n]"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/scripts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"scripts"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/scripts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"scripts"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/scripts",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"scripts"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Dependency Templates",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-dependencies/templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-dependencies",
								"templates"
							]
						},
						"description": "Get Dependency Templates"
					},
					"response": [
						{
							"name": "Dependency Template array",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"templates"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dependencyTypeId\": \"<integer>\",\n  \"active\": \"<boolean>\",\n  \"dependencyChangerId\": \"<integer>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"dependencyTypeId\": \"<integer>\",\n  \"active\": \"<boolean>\",\n  \"dependencyChangerId\": \"<integer>\"\n }\n]"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"templates"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"templates"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"templates"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Secret Dependency Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-dependencies/stub?secretId=<integer>&templateId=<integer>&typeId=<integer>&scriptId=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-dependencies",
								"stub"
							],
							"query": [
								{
									"key": "secretId",
									"value": "<integer>",
									"description": "The Id of the Secret that this Dependency will appear on"
								},
								{
									"key": "templateId",
									"value": "<integer>",
									"description": "The Id of the Dependency Template that this Dependecy will be modeled on. Only provide this value if the Dependency is based on a Template."
								},
								{
									"key": "typeId",
									"value": "<integer>",
									"description": "The Id of the Dependency Type that this Dependecy will be modeled on. Only provide this value if the Dependency is a running a script directly and is NOT based on a Dependency Template.  Valid Values: PowershellScript = 7, SshScript = 8, SqlScript = 9"
								},
								{
									"key": "scriptId",
									"value": "<integer>",
									"description": "The Id of the Script that this Dependency will Run.  Only provide this value if the Dependency is running a script directly, and ensure that the type of the script matches the TypeId value passed in."
								}
							]
						},
						"description": "Return the default values for a new Secret Dependency"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/stub?secretId=<integer>&templateId=<integer>&typeId=<integer>&scriptId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										},
										{
											"key": "templateId",
											"value": "<integer>"
										},
										{
											"key": "typeId",
											"value": "<integer>"
										},
										{
											"key": "scriptId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/stub?secretId=<integer>&templateId=<integer>&typeId=<integer>&scriptId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										},
										{
											"key": "templateId",
											"value": "<integer>"
										},
										{
											"key": "typeId",
											"value": "<integer>"
										},
										{
											"key": "scriptId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "SecretDependencyModel",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/stub?secretId=<integer>&templateId=<integer>&typeId=<integer>&scriptId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										},
										{
											"key": "templateId",
											"value": "<integer>"
										},
										{
											"key": "typeId",
											"value": "<integer>"
										},
										{
											"key": "scriptId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "null"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-dependencies/stub?secretId=<integer>&templateId=<integer>&typeId=<integer>&scriptId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-dependencies",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										},
										{
											"key": "templateId",
											"value": "<integer>"
										},
										{
											"key": "typeId",
											"value": "<integer>"
										},
										{
											"key": "scriptId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "secret-permissions",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Secret Permission",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions/:id?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions",
										":id"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive permissions in the results"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret permission ID"
										}
									]
								},
								"description": "Get a single secret permission by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Secret permission object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Update Secret Permission",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"id\": \"<integer>\",\n    \"secretId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret permission ID"
										}
									]
								},
								"description": "Update a single secret permission by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"secretId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"secretId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"secretId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Secret permission object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"secretId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete Secret Permission",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret permission ID"
										}
									]
								},
								"description": "Delete a secret permission by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secret-permissions/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secret-permissions",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Secret Permissions",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-permissions?filter.secretId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&filter.userName=<string>&filter.groupName=<string>&filter.domainName=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-permissions"
							],
							"query": [
								{
									"key": "filter.secretId",
									"value": "<integer>",
									"description": "Filter by secret ID"
								},
								{
									"key": "filter.groupId",
									"value": "<integer>",
									"description": "Filter by group ID"
								},
								{
									"key": "filter.userId",
									"value": "<integer>",
									"description": "Filter by user ID"
								},
								{
									"key": "filter.userName",
									"value": "<string>",
									"description": "UserName"
								},
								{
									"key": "filter.groupName",
									"value": "<string>",
									"description": "GroupName"
								},
								{
									"key": "filter.domainName",
									"value": "<string>",
									"description": "DomainName"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page secret permissions"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions?filter.secretId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&filter.userName=<string>&filter.groupName=<string>&filter.domainName=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.userName",
											"value": "<string>"
										},
										{
											"key": "filter.groupName",
											"value": "<string>"
										},
										{
											"key": "filter.domainName",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions?filter.secretId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&filter.userName=<string>&filter.groupName=<string>&filter.domainName=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.userName",
											"value": "<string>"
										},
										{
											"key": "filter.groupName",
											"value": "<string>"
										},
										{
											"key": "filter.domainName",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions?filter.secretId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&filter.userName=<string>&filter.groupName=<string>&filter.domainName=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.userName",
											"value": "<string>"
										},
										{
											"key": "filter.groupName",
											"value": "<string>"
										},
										{
											"key": "filter.domainName",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Secret permissions search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions?filter.secretId=<integer>&filter.groupId=<integer>&filter.userId=<integer>&filter.userName=<string>&filter.groupName=<string>&filter.domainName=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									],
									"query": [
										{
											"key": "filter.secretId",
											"value": "<integer>"
										},
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.userId",
											"value": "<integer>"
										},
										{
											"key": "filter.userName",
											"value": "<string>"
										},
										{
											"key": "filter.groupName",
											"value": "<string>"
										},
										{
											"key": "filter.domainName",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"secretAccessRoleId\": \"<integer>\",\n   \"secretAccessRoleName\": \"<string>\",\n   \"knownAs\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"groupId\": \"<integer>\",\n   \"groupName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"secretAccessRoleId\": \"<integer>\",\n   \"secretAccessRoleName\": \"<string>\",\n   \"knownAs\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create Secret Permission",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"secretId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\",\n    \"groupName\": \"<string>\",\n    \"userName\": \"<string>\",\n    \"domainName\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/secret-permissions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-permissions"
							]
						},
						"description": "Create a new secret permission"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\",\n    \"groupName\": \"<string>\",\n    \"userName\": \"<string>\",\n    \"domainName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Secret permission object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\",\n    \"groupName\": \"<string>\",\n    \"userName\": \"<string>\",\n    \"domainName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\",\n    \"groupName\": \"<string>\",\n    \"userName\": \"<string>\",\n    \"domainName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"secretId\": \"<integer>\",\n    \"groupId\": \"<integer>\",\n    \"userId\": \"<integer>\",\n    \"secretAccessRoleName\": \"<string>\",\n    \"groupName\": \"<string>\",\n    \"userName\": \"<string>\",\n    \"domainName\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Secret Permission Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-permissions/stub?secretId=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-permissions",
								"stub"
							],
							"query": [
								{
									"key": "secretId",
									"value": "<integer>",
									"description": "Options for generating a secret permission stub"
								}
							]
						},
						"description": "Return the default values for a new secret permission"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions/stub?secretId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions/stub?secretId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Secret permission object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions/stub?secretId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"secretAccessRoleId\": \"<integer>\",\n \"secretAccessRoleName\": \"<string>\",\n \"groupId\": \"<integer>\",\n \"groupName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"knownAs\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-permissions/stub?secretId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-permissions",
										"stub"
									],
									"query": [
										{
											"key": "secretId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "secrets",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "fields",
							"item": [
								{
									"name": "{slug}",
									"item": [
										{
											"name": "Get Secret Field",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/secrets/:id/fields/:slug?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														":id",
														"fields",
														":slug"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>",
															"description": "Whether to include inactive secrets in the results"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "Secret ID"
														},
														{
															"key": "slug",
															"value": "<string>",
															"description": "Secret field name"
														}
													]
												},
												"description": "Get a secret data field"
											},
											"response": [
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>?includeInactive=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															],
															"query": [
																{
																	"key": "includeInactive",
																	"value": "<boolean>"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>?includeInactive=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															],
															"query": [
																{
																	"key": "includeInactive",
																	"value": "<boolean>"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Secret field value. If the field is a file attachment, the content type will be `application/octet-stream` and the response body will be the file contents.",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>?includeInactive=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															],
															"query": [
																{
																	"key": "includeInactive",
																	"value": "<boolean>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<string>\""
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>?includeInactive=<boolean>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															],
															"query": [
																{
																	"key": "includeInactive",
																	"value": "<boolean>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												}
											]
										},
										{
											"name": "Update Secret Field",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"value\": \"<string>\",\n    \"fileName\": \"<string>\",\n    \"fileAttachment\": \"<binary>\",\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/:id/fields/:slug",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														":id",
														"fields",
														":slug"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "Secret ID"
														},
														{
															"key": "slug",
															"value": "<string>",
															"description": "Secret field name"
														}
													]
												},
												"description": "Update a secret data field"
											},
											"response": [
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"value\": \"<string>\",\n    \"fileName\": \"<string>\",\n    \"fileAttachment\": \"<binary>\",\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"value\": \"<string>\",\n    \"fileName\": \"<string>\",\n    \"fileAttachment\": \"<binary>\",\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "The updated value, or 'true' if the field is a file attachment",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"value\": \"<string>\",\n    \"fileName\": \"<string>\",\n    \"fileAttachment\": \"<binary>\",\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<string>\""
												},
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"value\": \"<string>\",\n    \"fileName\": \"<string>\",\n    \"fileAttachment\": \"<binary>\",\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/secrets/<integer>/fields/<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"secrets",
																"<integer>",
																"fields",
																"<string>"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												}
											]
										}
									],
									"_postman_isSubFolder": true
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "restricted",
							"item": [
								{
									"name": "Update Secret",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"autoChangeNextPassword\": \"<string>\",\n    \"accessRequestWorkflowMapId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/restricted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"restricted"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Secret ID"
												}
											]
										},
										"description": "Update a single secret by ID"
									},
									"response": [
										{
											"name": "Secret object",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"autoChangeNextPassword\": \"<string>\",\n    \"accessRequestWorkflowMapId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"items\": [\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  },\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  }\n ],\n \"launcherConnectAsSecretId\": \"<integer>\",\n \"checkOutMinutesRemaining\": \"<integer>\",\n \"checkedOut\": \"<boolean>\",\n \"checkOutUserDisplayName\": \"<string>\",\n \"checkOutUserId\": \"<integer>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"autoChangeNextPassword\": \"<string>\",\n \"requiresApprovalForAccess\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"checkOutEnabled\": \"<boolean>\",\n \"checkOutIntervalMinutes\": \"<integer>\",\n \"checkOutChangePasswordEnabled\": \"<boolean>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"proxyEnabled\": \"<boolean>\",\n \"sessionRecordingEnabled\": \"<boolean>\",\n \"restrictSshCommands\": \"<boolean>\",\n \"allowOwnersUnrestrictedSshCommands\": \"<boolean>\",\n \"isDoubleLock\": \"<boolean>\",\n \"doubleLockId\": \"<integer>\",\n \"enableInheritPermissions\": \"<boolean>\",\n \"passwordTypeWebScriptId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"enableInheritSecretPolicy\": \"<boolean>\",\n \"secretPolicyId\": \"<integer>\",\n \"lastHeartBeatStatus\": \"Pending\",\n \"lastHeartBeatCheck\": \"<dateTime>\",\n \"failedPasswordChangeAttempts\": \"<integer>\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"secretTemplateName\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"autoChangeNextPassword\": \"<string>\",\n    \"accessRequestWorkflowMapId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"autoChangeNextPassword\": \"<string>\",\n    \"accessRequestWorkflowMapId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"id\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"active\": \"<boolean>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"autoChangeNextPassword\": \"<string>\",\n    \"accessRequestWorkflowMapId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Get Restricted Secret",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/restricted",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"restricted"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Secret ID"
												}
											]
										},
										"description": "Get a restricted secret"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Secret object",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"items\": [\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  },\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  }\n ],\n \"launcherConnectAsSecretId\": \"<integer>\",\n \"checkOutMinutesRemaining\": \"<integer>\",\n \"checkedOut\": \"<boolean>\",\n \"checkOutUserDisplayName\": \"<string>\",\n \"checkOutUserId\": \"<integer>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"autoChangeNextPassword\": \"<string>\",\n \"requiresApprovalForAccess\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"checkOutEnabled\": \"<boolean>\",\n \"checkOutIntervalMinutes\": \"<integer>\",\n \"checkOutChangePasswordEnabled\": \"<boolean>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"proxyEnabled\": \"<boolean>\",\n \"sessionRecordingEnabled\": \"<boolean>\",\n \"restrictSshCommands\": \"<boolean>\",\n \"allowOwnersUnrestrictedSshCommands\": \"<boolean>\",\n \"isDoubleLock\": \"<boolean>\",\n \"doubleLockId\": \"<integer>\",\n \"enableInheritPermissions\": \"<boolean>\",\n \"passwordTypeWebScriptId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"enableInheritSecretPolicy\": \"<boolean>\",\n \"secretPolicyId\": \"<integer>\",\n \"lastHeartBeatStatus\": \"IncompatibleHost\",\n \"lastHeartBeatCheck\": \"<dateTime>\",\n \"failedPasswordChangeAttempts\": \"<integer>\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"secretTemplateName\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Get Restricted Secret Field",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/:id/restricted/fields/:slug",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												":id",
												"restricted",
												"fields",
												":slug"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Secret ID"
												},
												{
													"key": "slug",
													"value": "<string>",
													"description": "Secret field name"
												}
											]
										},
										"description": "Get a restricted secret data field"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted/fields/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted",
														"fields",
														"<string>"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted/fields/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted",
														"fields",
														"<string>"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Secret field value. If the field is a file attachment, the content type will be `application/octet-stream` and the response body will be the file contents.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted/fields/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted",
														"fields",
														"<string>"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<string>\""
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/secrets/<integer>/restricted/fields/<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"secrets",
														"<integer>",
														"restricted",
														"fields",
														"<string>"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Secret",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/:id?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive secrets in the results"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Get a single secret by ID"
							},
							"response": [
								{
									"name": "Secret object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"items\": [\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  },\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  }\n ],\n \"launcherConnectAsSecretId\": \"<integer>\",\n \"checkOutMinutesRemaining\": \"<integer>\",\n \"checkedOut\": \"<boolean>\",\n \"checkOutUserDisplayName\": \"<string>\",\n \"checkOutUserId\": \"<integer>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"autoChangeNextPassword\": \"<string>\",\n \"requiresApprovalForAccess\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"checkOutEnabled\": \"<boolean>\",\n \"checkOutIntervalMinutes\": \"<integer>\",\n \"checkOutChangePasswordEnabled\": \"<boolean>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"proxyEnabled\": \"<boolean>\",\n \"sessionRecordingEnabled\": \"<boolean>\",\n \"restrictSshCommands\": \"<boolean>\",\n \"allowOwnersUnrestrictedSshCommands\": \"<boolean>\",\n \"isDoubleLock\": \"<boolean>\",\n \"doubleLockId\": \"<integer>\",\n \"enableInheritPermissions\": \"<boolean>\",\n \"passwordTypeWebScriptId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"enableInheritSecretPolicy\": \"<boolean>\",\n \"secretPolicyId\": \"<integer>\",\n \"lastHeartBeatStatus\": \"UnableToConnect\",\n \"lastHeartBeatCheck\": \"<dateTime>\",\n \"failedPasswordChangeAttempts\": \"<integer>\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"secretTemplateName\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Delete Secret",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Delete a secret by ID"
							},
							"response": [
								{
									"name": "Object deletion result",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"objectType\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "DELETE",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get Secret Summary",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/:id/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id",
										"summary"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Get the summary for a secret"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"summary"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"summary"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"summary"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Secret summary object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"summary"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"secretTemplateName\": \"<string>\",\n \"folderId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"checkedOut\": \"<boolean>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"lastHeartBeatStatus\": \"UnableToConnect\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lastAccessed\": \"<dateTime>\",\n \"extendedFields\": [\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"checkOutEnabled\": \"<boolean>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"doubleLockEnabled\": \"<boolean>\",\n \"requiresApproval\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"inheritsPermissions\": \"<boolean>\",\n \"hidePassword\": \"<boolean>\",\n \"createDate\": \"<dateTime>\",\n \"daysUntilExpiration\": \"<integer>\"\n}"
								}
							]
						},
						{
							"name": "Run Secret Heartbeat",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/:id/heartbeat",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id",
										"heartbeat"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Check if secret is still valid"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/heartbeat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"heartbeat"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/heartbeat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"heartbeat"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Secret summary object",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/heartbeat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"heartbeat"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"secretTemplateName\": \"<string>\",\n \"folderId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"checkedOut\": \"<boolean>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"lastHeartBeatStatus\": \"UnableToConnect\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lastAccessed\": \"<dateTime>\",\n \"extendedFields\": [\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"checkOutEnabled\": \"<boolean>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"doubleLockEnabled\": \"<boolean>\",\n \"requiresApproval\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"inheritsPermissions\": \"<boolean>\",\n \"hidePassword\": \"<boolean>\",\n \"createDate\": \"<dateTime>\",\n \"daysUntilExpiration\": \"<integer>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/heartbeat",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"heartbeat"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Expire Secret",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/:id/expire",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id",
										"expire"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Expire a secret"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/expire",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"expire"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Secret summary object",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/expire",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"expire"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"secretTemplateName\": \"<string>\",\n \"folderId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"checkedOut\": \"<boolean>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"lastHeartBeatStatus\": \"ArgumentError\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lastAccessed\": \"<dateTime>\",\n \"extendedFields\": [\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"checkOutEnabled\": \"<boolean>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"doubleLockEnabled\": \"<boolean>\",\n \"requiresApproval\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"inheritsPermissions\": \"<boolean>\",\n \"hidePassword\": \"<boolean>\",\n \"createDate\": \"<dateTime>\",\n \"daysUntilExpiration\": \"<integer>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/expire",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"expire"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/expire",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"expire"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Change Secret Password",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\",\n        \"passphrase\": \"<string>\",\n        \"privateKey\": \"<string>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/:id/change-password",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id",
										"change-password"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Change a secret's password"
							},
							"response": [
								{
									"name": "Secret summary object",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\",\n        \"passphrase\": \"<string>\",\n        \"privateKey\": \"<string>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"change-password"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"secretTemplateName\": \"<string>\",\n \"folderId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"checkedOut\": \"<boolean>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"lastHeartBeatStatus\": \"DnsMismatch\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lastAccessed\": \"<dateTime>\",\n \"extendedFields\": [\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"checkOutEnabled\": \"<boolean>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"doubleLockEnabled\": \"<boolean>\",\n \"requiresApproval\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"inheritsPermissions\": \"<boolean>\",\n \"hidePassword\": \"<boolean>\",\n \"createDate\": \"<dateTime>\",\n \"daysUntilExpiration\": \"<integer>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\",\n        \"passphrase\": \"<string>\",\n        \"privateKey\": \"<string>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"change-password"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\",\n        \"passphrase\": \"<string>\",\n        \"privateKey\": \"<string>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"change-password"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\",\n        \"passphrase\": \"<string>\",\n        \"privateKey\": \"<string>\"\n    },\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/change-password",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"change-password"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Check In Secret",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secrets/:id/check-in",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id",
										"check-in"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Check in a secret"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-in"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-in"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-in"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Secret summary object",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"includeInactive\": \"<boolean>\",\n    \"newPassword\": \"<string>\",\n    \"doubleLockPassword\": \"<string>\",\n    \"ticketNumber\": \"<string>\",\n    \"ticketSystemId\": \"<integer>\",\n    \"comment\": \"<string>\",\n    \"forceCheckIn\": \"<boolean>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-in",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-in"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"secretTemplateName\": \"<string>\",\n \"folderId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"checkedOut\": \"<boolean>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"lastHeartBeatStatus\": \"AccessDenied\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ],\n \"lastAccessed\": \"<dateTime>\",\n \"extendedFields\": [\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"checkOutEnabled\": \"<boolean>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"doubleLockEnabled\": \"<boolean>\",\n \"requiresApproval\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"inheritsPermissions\": \"<boolean>\",\n \"hidePassword\": \"<boolean>\",\n \"createDate\": \"<dateTime>\",\n \"daysUntilExpiration\": \"<integer>\"\n}"
								}
							]
						},
						{
							"name": "Check Out Secret",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/:id/check-out",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										":id",
										"check-out"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									]
								},
								"description": "Check Out a secret"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-out"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-out"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Secret Response Code Model object",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-out"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/<integer>/check-out",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"<integer>",
												"check-out"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "lookup",
					"item": [
						{
							"name": "Lookup Secrets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/lookup?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"lookup"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>",
											"description": "Search text"
										},
										{
											"key": "filter.searchField",
											"value": "<string>",
											"description": "Field to search"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>",
											"description": "Whether to include inactive secrets in results"
										},
										{
											"key": "filter.includeActive",
											"value": "<boolean>",
											"description": "Whether to include active secrets in results (when excluded equals true)"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>",
											"description": "Whether to include restricted secrets in results"
										},
										{
											"key": "filter.secretTemplateId",
											"value": "<integer>",
											"description": "Return only secrets matching a certain template"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>",
											"description": "Return only secrets within a certain folder"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>",
											"description": "Whether to include secrets in subfolders of the specified folder"
										},
										{
											"key": "filter.heartbeatStatus",
											"value": "<string>",
											"description": "Return only secrets with a certain heartbeat status"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>",
											"description": "Return only secrets within a certain site"
										},
										{
											"key": "filter.scope",
											"value": "<string>",
											"description": "Specify whether to search AllSecrets, Recent, or Favorites (All = 1, Recent = 2,Favorites = 3"
										},
										{
											"key": "filter.onlySharedWithMe",
											"value": "<boolean>",
											"description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned."
										},
										{
											"key": "filter.permissionRequired",
											"value": "<string>",
											"description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List. (List = 1, View = 2, Edit = 3, Owner = 4"
										},
										{
											"key": "filter.extendedTypeId",
											"value": "<integer>",
											"description": "Return only secrets matching a certain extended type"
										},
										{
											"key": "filter.onlyRPCEnabled",
											"value": "<boolean>",
											"description": "Whether to only include secrets whose template has Remote Password Changing enabled"
										},
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									]
								},
								"description": "Search, filter, sort, and page secrets, returning only secret ID and name"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "filter.searchField",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeActive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeRestricted",
													"value": "<boolean>"
												},
												{
													"key": "filter.secretTemplateId",
													"value": "<integer>"
												},
												{
													"key": "filter.folderId",
													"value": "<integer>"
												},
												{
													"key": "filter.includeSubFolders",
													"value": "<boolean>"
												},
												{
													"key": "filter.heartbeatStatus",
													"value": "<string>"
												},
												{
													"key": "filter.siteId",
													"value": "<integer>"
												},
												{
													"key": "filter.scope",
													"value": "<string>"
												},
												{
													"key": "filter.onlySharedWithMe",
													"value": "<boolean>"
												},
												{
													"key": "filter.permissionRequired",
													"value": "<string>"
												},
												{
													"key": "filter.extendedTypeId",
													"value": "<integer>"
												},
												{
													"key": "filter.onlyRPCEnabled",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Secret search result object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "filter.searchField",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeActive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeRestricted",
													"value": "<boolean>"
												},
												{
													"key": "filter.secretTemplateId",
													"value": "<integer>"
												},
												{
													"key": "filter.folderId",
													"value": "<integer>"
												},
												{
													"key": "filter.includeSubFolders",
													"value": "<boolean>"
												},
												{
													"key": "filter.heartbeatStatus",
													"value": "<string>"
												},
												{
													"key": "filter.siteId",
													"value": "<integer>"
												},
												{
													"key": "filter.scope",
													"value": "<string>"
												},
												{
													"key": "filter.onlySharedWithMe",
													"value": "<boolean>"
												},
												{
													"key": "filter.permissionRequired",
													"value": "<string>"
												},
												{
													"key": "filter.extendedTypeId",
													"value": "<integer>"
												},
												{
													"key": "filter.onlyRPCEnabled",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "filter.searchField",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeActive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeRestricted",
													"value": "<boolean>"
												},
												{
													"key": "filter.secretTemplateId",
													"value": "<integer>"
												},
												{
													"key": "filter.folderId",
													"value": "<integer>"
												},
												{
													"key": "filter.includeSubFolders",
													"value": "<boolean>"
												},
												{
													"key": "filter.heartbeatStatus",
													"value": "<string>"
												},
												{
													"key": "filter.siteId",
													"value": "<integer>"
												},
												{
													"key": "filter.scope",
													"value": "<string>"
												},
												{
													"key": "filter.onlySharedWithMe",
													"value": "<boolean>"
												},
												{
													"key": "filter.permissionRequired",
													"value": "<string>"
												},
												{
													"key": "filter.extendedTypeId",
													"value": "<integer>"
												},
												{
													"key": "filter.onlyRPCEnabled",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "filter.searchField",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeActive",
													"value": "<boolean>"
												},
												{
													"key": "filter.includeRestricted",
													"value": "<boolean>"
												},
												{
													"key": "filter.secretTemplateId",
													"value": "<integer>"
												},
												{
													"key": "filter.folderId",
													"value": "<integer>"
												},
												{
													"key": "filter.includeSubFolders",
													"value": "<boolean>"
												},
												{
													"key": "filter.heartbeatStatus",
													"value": "<string>"
												},
												{
													"key": "filter.siteId",
													"value": "<integer>"
												},
												{
													"key": "filter.scope",
													"value": "<string>"
												},
												{
													"key": "filter.onlySharedWithMe",
													"value": "<boolean>"
												},
												{
													"key": "filter.permissionRequired",
													"value": "<string>"
												},
												{
													"key": "filter.extendedTypeId",
													"value": "<integer>"
												},
												{
													"key": "filter.onlyRPCEnabled",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Lookup Secrets",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/lookup/:id?id=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"lookup",
										":id"
									],
									"query": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Secret ID"
										}
									],
									"variable": [
										{
											"key": "id"
										}
									]
								},
								"description": "Look up secret by ID and return secret name and ID"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup/:id?id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup",
												":id"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Secret search result object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup/:id?id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup",
												":id"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"id\": \"<integer>\",\n \"value\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup/:id?id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup",
												":id"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/secrets/lookup/:id?id=<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"secrets",
												"lookup",
												":id"
											],
											"query": [
												{
													"key": "id",
													"value": "<integer>"
												}
											],
											"variable": [
												{
													"key": "id"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Secrets",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secrets?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secrets"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.searchField",
									"value": "<string>",
									"description": "Field to search"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive secrets in results"
								},
								{
									"key": "filter.includeActive",
									"value": "<boolean>",
									"description": "Whether to include active secrets in results (when excluded equals true)"
								},
								{
									"key": "filter.includeRestricted",
									"value": "<boolean>",
									"description": "Whether to include restricted secrets in results"
								},
								{
									"key": "filter.secretTemplateId",
									"value": "<integer>",
									"description": "Return only secrets matching a certain template"
								},
								{
									"key": "filter.folderId",
									"value": "<integer>",
									"description": "Return only secrets within a certain folder"
								},
								{
									"key": "filter.includeSubFolders",
									"value": "<boolean>",
									"description": "Whether to include secrets in subfolders of the specified folder"
								},
								{
									"key": "filter.heartbeatStatus",
									"value": "<string>",
									"description": "Return only secrets with a certain heartbeat status"
								},
								{
									"key": "filter.siteId",
									"value": "<integer>",
									"description": "Return only secrets within a certain site"
								},
								{
									"key": "filter.scope",
									"value": "<string>",
									"description": "Specify whether to search AllSecrets, Recent, or Favorites (All = 1, Recent = 2,Favorites = 3"
								},
								{
									"key": "filter.onlySharedWithMe",
									"value": "<boolean>",
									"description": "When true only Secrets where you are not the owner and the Secret was shared explicitly with your user id will be returned."
								},
								{
									"key": "filter.permissionRequired",
									"value": "<string>",
									"description": "Specify whether to filter by List, View, Edit, or Owner permission. Default is List. (List = 1, View = 2, Edit = 3, Owner = 4"
								},
								{
									"key": "filter.extendedTypeId",
									"value": "<integer>",
									"description": "Return only secrets matching a certain extended type"
								},
								{
									"key": "filter.onlyRPCEnabled",
									"value": "<boolean>",
									"description": "Whether to only include secrets whose template has Remote Password Changing enabled"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page secrets"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.searchField",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeActive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.heartbeatStatus",
											"value": "<string>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.scope",
											"value": "<string>"
										},
										{
											"key": "filter.onlySharedWithMe",
											"value": "<boolean>"
										},
										{
											"key": "filter.permissionRequired",
											"value": "<string>"
										},
										{
											"key": "filter.extendedTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.onlyRPCEnabled",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.searchField",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeActive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.heartbeatStatus",
											"value": "<string>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.scope",
											"value": "<string>"
										},
										{
											"key": "filter.onlySharedWithMe",
											"value": "<boolean>"
										},
										{
											"key": "filter.permissionRequired",
											"value": "<string>"
										},
										{
											"key": "filter.extendedTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.onlyRPCEnabled",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Secret search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.searchField",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeActive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.heartbeatStatus",
											"value": "<string>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.scope",
											"value": "<string>"
										},
										{
											"key": "filter.onlySharedWithMe",
											"value": "<boolean>"
										},
										{
											"key": "filter.permissionRequired",
											"value": "<string>"
										},
										{
											"key": "filter.extendedTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.onlyRPCEnabled",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"secretTemplateId\": \"<integer>\",\n   \"secretTemplateName\": \"<string>\",\n   \"folderId\": \"<integer>\",\n   \"siteId\": \"<integer>\",\n   \"active\": \"<boolean>\",\n   \"checkedOut\": \"<boolean>\",\n   \"isRestricted\": \"<boolean>\",\n   \"isOutOfSync\": \"<boolean>\",\n   \"outOfSyncReason\": \"<string>\",\n   \"lastHeartBeatStatus\": \"UnknownError\",\n   \"lastPasswordChangeAttempt\": \"<dateTime>\",\n   \"responseCodes\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lastAccessed\": \"<dateTime>\",\n   \"extendedFields\": [\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ],\n   \"checkOutEnabled\": \"<boolean>\",\n   \"autoChangeEnabled\": \"<boolean>\",\n   \"doubleLockEnabled\": \"<boolean>\",\n   \"requiresApproval\": \"<boolean>\",\n   \"requiresComment\": \"<boolean>\",\n   \"inheritsPermissions\": \"<boolean>\",\n   \"hidePassword\": \"<boolean>\",\n   \"createDate\": \"<dateTime>\",\n   \"daysUntilExpiration\": \"<integer>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"secretTemplateId\": \"<integer>\",\n   \"secretTemplateName\": \"<string>\",\n   \"folderId\": \"<integer>\",\n   \"siteId\": \"<integer>\",\n   \"active\": \"<boolean>\",\n   \"checkedOut\": \"<boolean>\",\n   \"isRestricted\": \"<boolean>\",\n   \"isOutOfSync\": \"<boolean>\",\n   \"outOfSyncReason\": \"<string>\",\n   \"lastHeartBeatStatus\": \"UnableToConnect\",\n   \"lastPasswordChangeAttempt\": \"<dateTime>\",\n   \"responseCodes\": [\n    \"<string>\",\n    \"<string>\"\n   ],\n   \"lastAccessed\": \"<dateTime>\",\n   \"extendedFields\": [\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    },\n    {\n     \"name\": \"<string>\",\n     \"value\": \"<string>\"\n    }\n   ],\n   \"checkOutEnabled\": \"<boolean>\",\n   \"autoChangeEnabled\": \"<boolean>\",\n   \"doubleLockEnabled\": \"<boolean>\",\n   \"requiresApproval\": \"<boolean>\",\n   \"requiresComment\": \"<boolean>\",\n   \"inheritsPermissions\": \"<boolean>\",\n   \"hidePassword\": \"<boolean>\",\n   \"createDate\": \"<dateTime>\",\n   \"daysUntilExpiration\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets?filter.searchText=<string>&filter.searchField=<string>&filter.includeInactive=<boolean>&filter.includeActive=<boolean>&filter.includeRestricted=<boolean>&filter.secretTemplateId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.heartbeatStatus=<string>&filter.siteId=<integer>&filter.scope=<string>&filter.onlySharedWithMe=<boolean>&filter.permissionRequired=<string>&filter.extendedTypeId=<integer>&filter.onlyRPCEnabled=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.searchField",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeActive",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.heartbeatStatus",
											"value": "<string>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.scope",
											"value": "<string>"
										},
										{
											"key": "filter.onlySharedWithMe",
											"value": "<boolean>"
										},
										{
											"key": "filter.permissionRequired",
											"value": "<string>"
										},
										{
											"key": "filter.extendedTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.onlyRPCEnabled",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create Secret",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"secretTemplateId\": \"<integer>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/secrets",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secrets"
							]
						},
						"description": "Create a new secret"
					},
					"response": [
						{
							"name": "Secret object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"secretTemplateId\": \"<integer>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secrets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"items\": [\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  },\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  }\n ],\n \"launcherConnectAsSecretId\": \"<integer>\",\n \"checkOutMinutesRemaining\": \"<integer>\",\n \"checkedOut\": \"<boolean>\",\n \"checkOutUserDisplayName\": \"<string>\",\n \"checkOutUserId\": \"<integer>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"autoChangeNextPassword\": \"<string>\",\n \"requiresApprovalForAccess\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"checkOutEnabled\": \"<boolean>\",\n \"checkOutIntervalMinutes\": \"<integer>\",\n \"checkOutChangePasswordEnabled\": \"<boolean>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"proxyEnabled\": \"<boolean>\",\n \"sessionRecordingEnabled\": \"<boolean>\",\n \"restrictSshCommands\": \"<boolean>\",\n \"allowOwnersUnrestrictedSshCommands\": \"<boolean>\",\n \"isDoubleLock\": \"<boolean>\",\n \"doubleLockId\": \"<integer>\",\n \"enableInheritPermissions\": \"<boolean>\",\n \"passwordTypeWebScriptId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"enableInheritSecretPolicy\": \"<boolean>\",\n \"secretPolicyId\": \"<integer>\",\n \"lastHeartBeatStatus\": \"AccessDenied\",\n \"lastHeartBeatCheck\": \"<dateTime>\",\n \"failedPasswordChangeAttempts\": \"<integer>\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"secretTemplateName\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"secretTemplateId\": \"<integer>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secrets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"secretTemplateId\": \"<integer>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secrets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"secretTemplateId\": \"<integer>\",\n    \"items\": [\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        },\n        {\n            \"itemId\": \"<integer>\",\n            \"fileAttachmentId\": \"<integer>\",\n            \"filename\": \"<string>\",\n            \"itemValue\": \"<string>\",\n            \"fieldId\": \"<integer>\",\n            \"fieldName\": \"<string>\",\n            \"slug\": \"<string>\",\n            \"fieldDescription\": \"<string>\",\n            \"isFile\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"getStream\": {}\n        }\n    ],\n    \"folderId\": \"<integer>\",\n    \"launcherConnectAsSecretId\": \"<integer>\",\n    \"autoChangeEnabled\": \"<boolean>\",\n    \"requiresComment\": \"<boolean>\",\n    \"checkOutEnabled\": \"<boolean>\",\n    \"checkOutIntervalMinutes\": \"<integer>\",\n    \"checkOutChangePasswordEnabled\": \"<boolean>\",\n    \"proxyEnabled\": \"<boolean>\",\n    \"sessionRecordingEnabled\": \"<boolean>\",\n    \"passwordTypeWebScriptId\": \"<integer>\",\n    \"siteId\": \"<integer>\",\n    \"enableInheritSecretPolicy\": \"<boolean>\",\n    \"secretPolicyId\": \"<integer>\",\n    \"sshKeyArgs\": {\n        \"generateSshKeys\": \"<boolean>\",\n        \"generatePassphrase\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secrets",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Get Secret Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secrets/stub?secretTemplateId=<integer>&folderId=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secrets",
								"stub"
							],
							"query": [
								{
									"key": "secretTemplateId",
									"value": "<integer>",
									"description": "Secret template ID"
								},
								{
									"key": "folderId",
									"value": "<integer>",
									"description": "Containing folder ID. May be null unless secrets are required to be in folders."
								}
							]
						},
						"description": "Return the default values for a new secret"
					},
					"response": [
						{
							"name": "Secret object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/stub?secretTemplateId=<integer>&folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"stub"
									],
									"query": [
										{
											"key": "secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"secretTemplateId\": \"<integer>\",\n \"folderId\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"items\": [\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  },\n  {\n   \"itemId\": \"<integer>\",\n   \"fileAttachmentId\": \"<integer>\",\n   \"filename\": \"<string>\",\n   \"itemValue\": \"<string>\",\n   \"fieldId\": \"<integer>\",\n   \"fieldName\": \"<string>\",\n   \"slug\": \"<string>\",\n   \"fieldDescription\": \"<string>\",\n   \"isFile\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"getStream\": {}\n  }\n ],\n \"launcherConnectAsSecretId\": \"<integer>\",\n \"checkOutMinutesRemaining\": \"<integer>\",\n \"checkedOut\": \"<boolean>\",\n \"checkOutUserDisplayName\": \"<string>\",\n \"checkOutUserId\": \"<integer>\",\n \"isRestricted\": \"<boolean>\",\n \"isOutOfSync\": \"<boolean>\",\n \"outOfSyncReason\": \"<string>\",\n \"autoChangeEnabled\": \"<boolean>\",\n \"autoChangeNextPassword\": \"<string>\",\n \"requiresApprovalForAccess\": \"<boolean>\",\n \"requiresComment\": \"<boolean>\",\n \"checkOutEnabled\": \"<boolean>\",\n \"checkOutIntervalMinutes\": \"<integer>\",\n \"checkOutChangePasswordEnabled\": \"<boolean>\",\n \"accessRequestWorkflowMapId\": \"<integer>\",\n \"proxyEnabled\": \"<boolean>\",\n \"sessionRecordingEnabled\": \"<boolean>\",\n \"restrictSshCommands\": \"<boolean>\",\n \"allowOwnersUnrestrictedSshCommands\": \"<boolean>\",\n \"isDoubleLock\": \"<boolean>\",\n \"doubleLockId\": \"<integer>\",\n \"enableInheritPermissions\": \"<boolean>\",\n \"passwordTypeWebScriptId\": \"<integer>\",\n \"siteId\": \"<integer>\",\n \"enableInheritSecretPolicy\": \"<boolean>\",\n \"secretPolicyId\": \"<integer>\",\n \"lastHeartBeatStatus\": \"Processing\",\n \"lastHeartBeatCheck\": \"<dateTime>\",\n \"failedPasswordChangeAttempts\": \"<integer>\",\n \"lastPasswordChangeAttempt\": \"<dateTime>\",\n \"secretTemplateName\": \"<string>\",\n \"responseCodes\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/stub?secretTemplateId=<integer>&folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"stub"
									],
									"query": [
										{
											"key": "secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/stub?secretTemplateId=<integer>&folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"stub"
									],
									"query": [
										{
											"key": "secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secrets/stub?secretTemplateId=<integer>&folderId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secrets",
										"stub"
									],
									"query": [
										{
											"key": "secretTemplateId",
											"value": "<integer>"
										},
										{
											"key": "folderId",
											"value": "<integer>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "recorded-sessions",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "Get Recorded Session",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "Recorded session ID"
										}
									]
								},
								"description": "Get a single recorded session by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Recorded session object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"launcherSessionGuid\": \"<uuid>\",\n \"secretSessionId\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"secretName\": \"<string>\",\n \"userName\": \"<string>\",\n \"userDomainName\": \"<string>\",\n \"secretSessionUserName\": \"<string>\",\n \"userNameForDisplay\": \"<string>\",\n \"active\": \"<boolean>\",\n \"isLauncher\": \"<boolean>\",\n \"launcherName\": \"<string>\",\n \"startDate\": \"<dateTime>\",\n \"startDateDisplay\": \"<string>\",\n \"endDate\": \"<dateTime>\",\n \"endDateDisplay\": \"<string>\",\n \"machineName\": \"<string>\",\n \"auditSecretId\": \"<integer>\",\n \"userId\": \"<integer>\",\n \"launcherTypeId\": \"<integer>\",\n \"duration\": \"<integer>\",\n \"sessionMovieProcessComplete\": \"<boolean>\",\n \"hasProcessingError\": \"<boolean>\",\n \"errorMessage\": \"<string>\",\n \"isDeleted\": \"<boolean>\",\n \"matchingSearchTypes\": \"<string>\",\n \"hasKeyStrokes\": \"<boolean>\",\n \"hasProcesses\": \"<boolean>\",\n \"launcherSessionStatus\": \"<integer>\",\n \"accessedByName\": \"<string>\",\n \"pbaId\": \"<long>\",\n \"launchedSuccessfully\": \"<boolean>\",\n \"fileExtension\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Recorded Session Summary",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions/:id/summary",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions",
										":id",
										"summary"
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "Recorded session ID"
										}
									]
								},
								"description": "Get the summary for a recorded session"
							},
							"response": [
								{
									"name": "Recorded session summary",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"summary"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"launcherSessionGuid\": \"<uuid>\",\n \"secretSessionId\": \"<integer>\",\n \"secretId\": \"<integer>\",\n \"secretName\": \"<string>\",\n \"userId\": \"<integer>\",\n \"userName\": \"<string>\",\n \"userDomainName\": \"<string>\",\n \"secretSessionUserName\": \"<string>\",\n \"userNameForDisplay\": \"<string>\",\n \"active\": \"<boolean>\",\n \"isLauncher\": \"<boolean>\",\n \"launcherName\": \"<string>\",\n \"launcherTypeId\": \"<integer>\",\n \"startDate\": \"<dateTime>\",\n \"startDateDisplay\": \"<string>\",\n \"endDate\": \"<dateTime>\",\n \"endDateDisplay\": \"<string>\",\n \"machineName\": \"<string>\",\n \"auditSecretId\": \"<integer>\",\n \"duration\": \"<integer>\",\n \"sessionMovieProcessComplete\": \"<boolean>\",\n \"hasProcessingError\": \"<boolean>\",\n \"errorMessage\": \"<string>\",\n \"isDeleted\": \"<boolean>\",\n \"matchingSearchTypes\": \"<string>\",\n \"hasKeyStrokes\": \"<boolean>\",\n \"hasProcesses\": \"<boolean>\",\n \"launcherSessionStatus\": \"<integer>\",\n \"accessedByName\": \"<string>\",\n \"pbaId\": \"<long>\",\n \"launchedSuccessfully\": \"<boolean>\",\n \"fileExtension\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"summary"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"summary"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/summary",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"summary"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Recorded Session Points of Interest",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions/:id/points-of-interest?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions",
										":id",
										"points-of-interest"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>",
											"description": "Search text"
										},
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "Recorded session ID"
										}
									]
								},
								"description": "Get the points of interest for a recorded session"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Recorded session points of interest",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"launcherSessionGuid\": \"<uuid>\",\n   \"secretSessionId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"timestamp\": \"<dateTime>\",\n   \"timestampOffset\": \"<time-span>\",\n   \"timestampOffsetDisplay\": \"<string>\",\n   \"activityType\": \"Keystroke\",\n   \"activityTypeDisplayName\": \"<string>\",\n   \"icon\": \"<string>\",\n   \"activityTitle\": \"<string>\",\n   \"activityDetails\": \"<string>\"\n  },\n  {\n   \"launcherSessionGuid\": \"<uuid>\",\n   \"secretSessionId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"timestamp\": \"<dateTime>\",\n   \"timestampOffset\": \"<time-span>\",\n   \"timestampOffsetDisplay\": \"<string>\",\n   \"activityType\": \"Keystroke\",\n   \"activityTypeDisplayName\": \"<string>\",\n   \"icon\": \"<string>\",\n   \"activityTitle\": \"<string>\",\n   \"activityDetails\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Recorded Session Points of Interest Summary",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions/:id/points-of-interest-summary?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions",
										":id",
										"points-of-interest-summary"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>",
											"description": "Search text"
										},
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "Recorded session ID"
										}
									]
								},
								"description": "Get the points of interest summary for a recorded session"
							},
							"response": [
								{
									"name": "Recorded session points of interest summary",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest-summary?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest-summary"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"launcherSessionGuid\": \"<uuid>\",\n   \"timestampOffset\": \"<time-span>\",\n   \"secondsFromStart\": \"<long>\",\n   \"activityTypeGroup\": \"<string>\",\n   \"score\": \"<integer>\"\n  },\n  {\n   \"launcherSessionGuid\": \"<uuid>\",\n   \"timestampOffset\": \"<time-span>\",\n   \"secondsFromStart\": \"<long>\",\n   \"activityTypeGroup\": \"<string>\",\n   \"score\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest-summary?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest-summary"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest-summary?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest-summary"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/points-of-interest-summary?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"points-of-interest-summary"
											],
											"query": [
												{
													"key": "filter.searchText",
													"value": "<string>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Recorded Session Video Stream",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions/:id/session-recordings",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions",
										":id",
										"session-recordings"
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "Recorded session ID"
										}
									]
								},
								"description": "Get the video stream for a recorded session"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/session-recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"session-recordings"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/session-recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"session-recordings"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/session-recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"session-recordings"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Recorded session video stream",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/session-recordings",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"session-recordings"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{}"
								}
							]
						},
						{
							"name": "Request Immediate Session Processing",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions/:id/request-processing",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions",
										":id",
										"request-processing"
									],
									"variable": [
										{
											"key": "id",
											"value": "<uuid>",
											"description": "Recorded session ID"
										}
									]
								},
								"description": "Issues a request for the immediate processing of a session video"
							},
							"response": [
								{
									"name": "Unknown or empty response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/request-processing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"request-processing"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "text",
									"header": [
										{
											"key": "Content-Type",
											"value": "text/plain"
										}
									],
									"cookie": [],
									"body": ""
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/request-processing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"request-processing"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/request-processing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"request-processing"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/recorded-sessions/<uuid>/request-processing",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"recorded-sessions",
												"<uuid>",
												"request-processing"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Recorded Sessions",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/recorded-sessions?filter.searchText=<string>&filter.active=<boolean>&filter.includeRestricted=<boolean>&filter.launcherTypeId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.siteId=<integer>&filter.includeNonSecretServerSessions=<boolean>&filter.dateRange=<time-span>&filter.startDate=<dateTime>&filter.startTime=<string>&filter.endDate=<dateTime>&filter.endTime=<string>&filter.includeOnlyLaunchedSuccessfully=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"recorded-sessions"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.active",
									"value": "<boolean>",
									"description": "Filter by active or inactive status"
								},
								{
									"key": "filter.includeRestricted",
									"value": "<boolean>",
									"description": "Whether to include restricted secret sessions"
								},
								{
									"key": "filter.launcherTypeId",
									"value": "<integer>",
									"description": "Filter by launcher type"
								},
								{
									"key": "filter.folderId",
									"value": "<integer>",
									"description": "Filter by folder"
								},
								{
									"key": "filter.includeSubFolders",
									"value": "<boolean>",
									"description": "Whether to include subfolders in a folder search"
								},
								{
									"key": "filter.siteId",
									"value": "<integer>",
									"description": "SiteId"
								},
								{
									"key": "filter.includeNonSecretServerSessions",
									"value": "<boolean>",
									"description": "IncludeNonSecretServerSessions"
								},
								{
									"key": "filter.dateRange",
									"value": "<time-span>",
									"description": "Return sessions within a certain number of days"
								},
								{
									"key": "filter.startDate",
									"value": "<dateTime>",
									"description": "StartDate"
								},
								{
									"key": "filter.startTime",
									"value": "<string>",
									"description": "StartTime"
								},
								{
									"key": "filter.endDate",
									"value": "<dateTime>",
									"description": "EndDate"
								},
								{
									"key": "filter.endTime",
									"value": "<string>",
									"description": "EndTime"
								},
								{
									"key": "filter.includeOnlyLaunchedSuccessfully",
									"value": "<boolean>",
									"description": "Return only sessions that launched successfully"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page recorded sessions"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions?filter.searchText=<string>&filter.active=<boolean>&filter.includeRestricted=<boolean>&filter.launcherTypeId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.siteId=<integer>&filter.includeNonSecretServerSessions=<boolean>&filter.dateRange=<time-span>&filter.startDate=<dateTime>&filter.startTime=<string>&filter.endDate=<dateTime>&filter.endTime=<string>&filter.includeOnlyLaunchedSuccessfully=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.active",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.launcherTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeNonSecretServerSessions",
											"value": "<boolean>"
										},
										{
											"key": "filter.dateRange",
											"value": "<time-span>"
										},
										{
											"key": "filter.startDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.startTime",
											"value": "<string>"
										},
										{
											"key": "filter.endDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.endTime",
											"value": "<string>"
										},
										{
											"key": "filter.includeOnlyLaunchedSuccessfully",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Recorded session search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions?filter.searchText=<string>&filter.active=<boolean>&filter.includeRestricted=<boolean>&filter.launcherTypeId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.siteId=<integer>&filter.includeNonSecretServerSessions=<boolean>&filter.dateRange=<time-span>&filter.startDate=<dateTime>&filter.startTime=<string>&filter.endDate=<dateTime>&filter.endTime=<string>&filter.includeOnlyLaunchedSuccessfully=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.active",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.launcherTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeNonSecretServerSessions",
											"value": "<boolean>"
										},
										{
											"key": "filter.dateRange",
											"value": "<time-span>"
										},
										{
											"key": "filter.startDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.startTime",
											"value": "<string>"
										},
										{
											"key": "filter.endDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.endTime",
											"value": "<string>"
										},
										{
											"key": "filter.includeOnlyLaunchedSuccessfully",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"launcherSessionGuid\": \"<uuid>\",\n   \"secretSessionId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"secretName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDomainName\": \"<string>\",\n   \"secretSessionUserName\": \"<string>\",\n   \"userNameForDisplay\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"isLauncher\": \"<boolean>\",\n   \"launcherName\": \"<string>\",\n   \"launcherTypeId\": \"<integer>\",\n   \"startDate\": \"<dateTime>\",\n   \"startDateDisplay\": \"<string>\",\n   \"endDate\": \"<dateTime>\",\n   \"endDateDisplay\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"auditSecretId\": \"<integer>\",\n   \"duration\": \"<integer>\",\n   \"sessionMovieProcessComplete\": \"<boolean>\",\n   \"hasProcessingError\": \"<boolean>\",\n   \"errorMessage\": \"<string>\",\n   \"isDeleted\": \"<boolean>\",\n   \"matchingSearchTypes\": \"<string>\",\n   \"hasKeyStrokes\": \"<boolean>\",\n   \"hasProcesses\": \"<boolean>\",\n   \"launcherSessionStatus\": \"<integer>\",\n   \"accessedByName\": \"<string>\",\n   \"pbaId\": \"<long>\",\n   \"launchedSuccessfully\": \"<boolean>\",\n   \"fileExtension\": \"<string>\"\n  },\n  {\n   \"launcherSessionGuid\": \"<uuid>\",\n   \"secretSessionId\": \"<integer>\",\n   \"secretId\": \"<integer>\",\n   \"secretName\": \"<string>\",\n   \"userId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"userDomainName\": \"<string>\",\n   \"secretSessionUserName\": \"<string>\",\n   \"userNameForDisplay\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"isLauncher\": \"<boolean>\",\n   \"launcherName\": \"<string>\",\n   \"launcherTypeId\": \"<integer>\",\n   \"startDate\": \"<dateTime>\",\n   \"startDateDisplay\": \"<string>\",\n   \"endDate\": \"<dateTime>\",\n   \"endDateDisplay\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"auditSecretId\": \"<integer>\",\n   \"duration\": \"<integer>\",\n   \"sessionMovieProcessComplete\": \"<boolean>\",\n   \"hasProcessingError\": \"<boolean>\",\n   \"errorMessage\": \"<string>\",\n   \"isDeleted\": \"<boolean>\",\n   \"matchingSearchTypes\": \"<string>\",\n   \"hasKeyStrokes\": \"<boolean>\",\n   \"hasProcesses\": \"<boolean>\",\n   \"launcherSessionStatus\": \"<integer>\",\n   \"accessedByName\": \"<string>\",\n   \"pbaId\": \"<long>\",\n   \"launchedSuccessfully\": \"<boolean>\",\n   \"fileExtension\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions?filter.searchText=<string>&filter.active=<boolean>&filter.includeRestricted=<boolean>&filter.launcherTypeId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.siteId=<integer>&filter.includeNonSecretServerSessions=<boolean>&filter.dateRange=<time-span>&filter.startDate=<dateTime>&filter.startTime=<string>&filter.endDate=<dateTime>&filter.endTime=<string>&filter.includeOnlyLaunchedSuccessfully=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.active",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.launcherTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeNonSecretServerSessions",
											"value": "<boolean>"
										},
										{
											"key": "filter.dateRange",
											"value": "<time-span>"
										},
										{
											"key": "filter.startDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.startTime",
											"value": "<string>"
										},
										{
											"key": "filter.endDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.endTime",
											"value": "<string>"
										},
										{
											"key": "filter.includeOnlyLaunchedSuccessfully",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/recorded-sessions?filter.searchText=<string>&filter.active=<boolean>&filter.includeRestricted=<boolean>&filter.launcherTypeId=<integer>&filter.folderId=<integer>&filter.includeSubFolders=<boolean>&filter.siteId=<integer>&filter.includeNonSecretServerSessions=<boolean>&filter.dateRange=<time-span>&filter.startDate=<dateTime>&filter.startTime=<string>&filter.endDate=<dateTime>&filter.endTime=<string>&filter.includeOnlyLaunchedSuccessfully=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"recorded-sessions"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.active",
											"value": "<boolean>"
										},
										{
											"key": "filter.includeRestricted",
											"value": "<boolean>"
										},
										{
											"key": "filter.launcherTypeId",
											"value": "<integer>"
										},
										{
											"key": "filter.folderId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeSubFolders",
											"value": "<boolean>"
										},
										{
											"key": "filter.siteId",
											"value": "<integer>"
										},
										{
											"key": "filter.includeNonSecretServerSessions",
											"value": "<boolean>"
										},
										{
											"key": "filter.dateRange",
											"value": "<time-span>"
										},
										{
											"key": "filter.startDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.startTime",
											"value": "<string>"
										},
										{
											"key": "filter.endDate",
											"value": "<dateTime>"
										},
										{
											"key": "filter.endTime",
											"value": "<string>"
										},
										{
											"key": "filter.includeOnlyLaunchedSuccessfully",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "secret-template-permissions",
			"item": [
				{
					"name": "Search Secret Template Permissions",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-template-permissions?filter.groupId=<integer>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-template-permissions"
							],
							"query": [
								{
									"key": "filter.groupId",
									"value": "<integer>",
									"description": "GroupId"
								},
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page secret template permissions"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions?filter.groupId=<integer>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									],
									"query": [
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions?filter.groupId=<integer>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									],
									"query": [
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions?filter.groupId=<integer>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									],
									"query": [
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Secret template permission search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions?filter.groupId=<integer>&filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									],
									"query": [
										{
											"key": "filter.groupId",
											"value": "<integer>"
										},
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"groupId\": \"<integer>\",\n   \"secretTypeId\": \"<integer>\",\n   \"secretTypeAccessRoleId\": \"<integer>\",\n   \"displayName\": \"<string>\",\n   \"secretTypeName\": \"<string>\",\n   \"isPersonal\": \"<boolean>\",\n   \"domainName\": \"<string>\",\n   \"displayNameWithDomain\": \"<string>\"\n  },\n  {\n   \"groupId\": \"<integer>\",\n   \"secretTypeId\": \"<integer>\",\n   \"secretTypeAccessRoleId\": \"<integer>\",\n   \"displayName\": \"<string>\",\n   \"secretTypeName\": \"<string>\",\n   \"isPersonal\": \"<boolean>\",\n   \"domainName\": \"<string>\",\n   \"displayNameWithDomain\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Update Secrete Templates Permissions",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"groupId\": \"<integer>\",\n    \"permissions\": [\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        },\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/secret-template-permissions",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-template-permissions"
							]
						},
						"description": "Change permissions"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": \"<integer>\",\n    \"permissions\": [\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        },\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": \"<integer>\",\n    \"permissions\": [\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        },\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": \"<integer>\",\n    \"permissions\": [\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        },\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Secret permission object",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"groupId\": \"<integer>\",\n    \"permissions\": [\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        },\n        {\n            \"secretTypeId\": \"<integer>\",\n            \"roleId\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-template-permissions",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-template-permissions"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "secret-templates",
			"item": [
				{
					"name": "Search Secret Templates",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-templates?filter.searchText=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-templates"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>",
									"description": "Search text"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "Whether to include inactive secret templates in the results"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page secret templates"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates?filter.searchText=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Secret template search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates?filter.searchText=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"name\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates?filter.searchText=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates?filter.searchText=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									],
									"query": [
										{
											"key": "filter.searchText",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create Secret Template",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"fields\": [\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"Edit\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        },\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"NotEditable\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        }\n    ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/secret-templates",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-templates"
							]
						},
						"description": "Create a new Secret Template"
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"fields\": [\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"Edit\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        },\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"NotEditable\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"fields\": [\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"Edit\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        },\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"NotEditable\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Secret Template object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"fields\": [\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"Edit\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        },\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"NotEditable\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"fields\": [\n  {\n   \"secretTemplateFieldId\": \"<integer>\",\n   \"isExpirationField\": \"<boolean>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"name\": \"<string>\",\n   \"mustEncrypt\": \"<boolean>\",\n   \"isUrl\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isFile\": \"<boolean>\",\n   \"generatePasswordCharacterSet\": \"<string>\",\n   \"generatePasswordLength\": \"<integer>\",\n   \"historyLength\": \"<integer>\",\n   \"isIndexable\": \"<boolean>\",\n   \"isRequired\": \"<boolean>\",\n   \"editRequires\": \"Edit\",\n   \"hideOnView\": \"<boolean>\",\n   \"passwordTypeFieldId\": \"<integer>\",\n   \"passwordRequirementId\": \"<integer>\",\n   \"sortOrder\": \"<integer>\",\n   \"editablePermission\": \"<integer>\"\n  },\n  {\n   \"secretTemplateFieldId\": \"<integer>\",\n   \"isExpirationField\": \"<boolean>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"name\": \"<string>\",\n   \"mustEncrypt\": \"<boolean>\",\n   \"isUrl\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isFile\": \"<boolean>\",\n   \"generatePasswordCharacterSet\": \"<string>\",\n   \"generatePasswordLength\": \"<integer>\",\n   \"historyLength\": \"<integer>\",\n   \"isIndexable\": \"<boolean>\",\n   \"isRequired\": \"<boolean>\",\n   \"editRequires\": \"Owner\",\n   \"hideOnView\": \"<boolean>\",\n   \"passwordTypeFieldId\": \"<integer>\",\n   \"passwordRequirementId\": \"<integer>\",\n   \"sortOrder\": \"<integer>\",\n   \"editablePermission\": \"<integer>\"\n  }\n ]\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"<string>\",\n    \"fields\": [\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"Edit\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        },\n        {\n            \"secretTemplateFieldId\": \"<integer>\",\n            \"isExpirationField\": \"<boolean>\",\n            \"displayName\": \"<string>\",\n            \"description\": \"<string>\",\n            \"name\": \"<string>\",\n            \"mustEncrypt\": \"<boolean>\",\n            \"isUrl\": \"<boolean>\",\n            \"isPassword\": \"<boolean>\",\n            \"isNotes\": \"<boolean>\",\n            \"isFile\": \"<boolean>\",\n            \"generatePasswordCharacterSet\": \"<string>\",\n            \"generatePasswordLength\": \"<integer>\",\n            \"historyLength\": \"<integer>\",\n            \"isIndexable\": \"<boolean>\",\n            \"isRequired\": \"<boolean>\",\n            \"editRequires\": \"NotEditable\",\n            \"hideOnView\": \"<boolean>\",\n            \"passwordTypeFieldId\": \"<integer>\",\n            \"passwordRequirementId\": \"<integer>\",\n            \"sortOrder\": \"<integer>\",\n            \"editablePermission\": \"<integer>\"\n        }\n    ]\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Disable a Secret Template Field For Template",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-templates/fields/:templateFieldId?templateFieldId=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-templates",
								"fields",
								":templateFieldId"
							],
							"query": [
								{
									"key": "templateFieldId",
									"value": "<integer>",
									"description": "Secret Template Field to disable"
								}
							],
							"variable": [
								{
									"key": "templateFieldId"
								}
							]
						},
						"description": "Disable a Secret Template Field For Template"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/fields/:templateFieldId?templateFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"fields",
										":templateFieldId"
									],
									"query": [
										{
											"key": "templateFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateFieldId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/fields/:templateFieldId?templateFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"fields",
										":templateFieldId"
									],
									"query": [
										{
											"key": "templateFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateFieldId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/fields/:templateFieldId?templateFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"fields",
										":templateFieldId"
									],
									"query": [
										{
											"key": "templateFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateFieldId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Secret Template Field object",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/fields/:templateFieldId?templateFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"fields",
										":templateFieldId"
									],
									"query": [
										{
											"key": "templateFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateFieldId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"secretTemplateFieldId\": \"<integer>\",\n \"isExpirationField\": \"<boolean>\",\n \"displayName\": \"<string>\",\n \"description\": \"<string>\",\n \"name\": \"<string>\",\n \"mustEncrypt\": \"<boolean>\",\n \"isUrl\": \"<boolean>\",\n \"isPassword\": \"<boolean>\",\n \"isNotes\": \"<boolean>\",\n \"isFile\": \"<boolean>\",\n \"generatePasswordCharacterSet\": \"<string>\",\n \"generatePasswordLength\": \"<integer>\",\n \"historyLength\": \"<integer>\",\n \"isIndexable\": \"<boolean>\",\n \"isRequired\": \"<boolean>\",\n \"editRequires\": \"NotEditable\",\n \"hideOnView\": \"<boolean>\",\n \"passwordTypeFieldId\": \"<integer>\",\n \"passwordRequirementId\": \"<integer>\",\n \"sortOrder\": \"<integer>\",\n \"editablePermission\": \"<integer>\"\n}"
						}
					]
				},
				{
					"name": "Get Secret Template",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-templates/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-templates",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<integer>",
									"description": "Secret template ID"
								}
							]
						},
						"description": "Get a single secret template by ID"
					},
					"response": [
						{
							"name": "Secret template object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"id\": \"<integer>\",\n \"name\": \"<string>\",\n \"fields\": [\n  {\n   \"secretTemplateFieldId\": \"<integer>\",\n   \"isExpirationField\": \"<boolean>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"name\": \"<string>\",\n   \"mustEncrypt\": \"<boolean>\",\n   \"isUrl\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isFile\": \"<boolean>\",\n   \"generatePasswordCharacterSet\": \"<string>\",\n   \"generatePasswordLength\": \"<integer>\",\n   \"historyLength\": \"<integer>\",\n   \"isIndexable\": \"<boolean>\",\n   \"isRequired\": \"<boolean>\",\n   \"editRequires\": \"Owner\",\n   \"hideOnView\": \"<boolean>\",\n   \"passwordTypeFieldId\": \"<integer>\",\n   \"passwordRequirementId\": \"<integer>\",\n   \"sortOrder\": \"<integer>\",\n   \"editablePermission\": \"<integer>\"\n  },\n  {\n   \"secretTemplateFieldId\": \"<integer>\",\n   \"isExpirationField\": \"<boolean>\",\n   \"displayName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"name\": \"<string>\",\n   \"mustEncrypt\": \"<boolean>\",\n   \"isUrl\": \"<boolean>\",\n   \"isPassword\": \"<boolean>\",\n   \"isNotes\": \"<boolean>\",\n   \"isFile\": \"<boolean>\",\n   \"generatePasswordCharacterSet\": \"<string>\",\n   \"generatePasswordLength\": \"<integer>\",\n   \"historyLength\": \"<integer>\",\n   \"isIndexable\": \"<boolean>\",\n   \"isRequired\": \"<boolean>\",\n   \"editRequires\": \"NotEditable\",\n   \"hideOnView\": \"<boolean>\",\n   \"passwordTypeFieldId\": \"<integer>\",\n   \"passwordRequirementId\": \"<integer>\",\n   \"sortOrder\": \"<integer>\",\n   \"editablePermission\": \"<integer>\"\n  }\n ]\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"<integer>"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"<integer>"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				},
				{
					"name": "Create Secret Template Field For Template",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"field\": {\n        \"secretTemplateFieldId\": \"<integer>\",\n        \"isExpirationField\": \"<boolean>\",\n        \"displayName\": \"<string>\",\n        \"description\": \"<string>\",\n        \"name\": \"<string>\",\n        \"mustEncrypt\": \"<boolean>\",\n        \"isUrl\": \"<boolean>\",\n        \"isPassword\": \"<boolean>\",\n        \"isNotes\": \"<boolean>\",\n        \"isFile\": \"<boolean>\",\n        \"generatePasswordCharacterSet\": \"<string>\",\n        \"generatePasswordLength\": \"<integer>\",\n        \"historyLength\": \"<integer>\",\n        \"isIndexable\": \"<boolean>\",\n        \"isRequired\": \"<boolean>\",\n        \"editRequires\": \"Owner\",\n        \"hideOnView\": \"<boolean>\",\n        \"passwordTypeFieldId\": \"<integer>\",\n        \"passwordRequirementId\": \"<integer>\",\n        \"sortOrder\": \"<integer>\",\n        \"editablePermission\": \"<integer>\"\n    }\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/secret-templates/:templateId?templateId=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-templates",
								":templateId"
							],
							"query": [
								{
									"key": "templateId",
									"value": "<integer>",
									"description": "templateId"
								}
							],
							"variable": [
								{
									"key": "templateId"
								}
							]
						},
						"description": "Create a new Secret Template Field For Template"
					},
					"response": [
						{
							"name": "Secret Template Field object",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"field\": {\n        \"secretTemplateFieldId\": \"<integer>\",\n        \"isExpirationField\": \"<boolean>\",\n        \"displayName\": \"<string>\",\n        \"description\": \"<string>\",\n        \"name\": \"<string>\",\n        \"mustEncrypt\": \"<boolean>\",\n        \"isUrl\": \"<boolean>\",\n        \"isPassword\": \"<boolean>\",\n        \"isNotes\": \"<boolean>\",\n        \"isFile\": \"<boolean>\",\n        \"generatePasswordCharacterSet\": \"<string>\",\n        \"generatePasswordLength\": \"<integer>\",\n        \"historyLength\": \"<integer>\",\n        \"isIndexable\": \"<boolean>\",\n        \"isRequired\": \"<boolean>\",\n        \"editRequires\": \"Owner\",\n        \"hideOnView\": \"<boolean>\",\n        \"passwordTypeFieldId\": \"<integer>\",\n        \"passwordRequirementId\": \"<integer>\",\n        \"sortOrder\": \"<integer>\",\n        \"editablePermission\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates/:templateId?templateId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										":templateId"
									],
									"query": [
										{
											"key": "templateId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"secretTemplateFieldId\": \"<integer>\",\n \"isExpirationField\": \"<boolean>\",\n \"displayName\": \"<string>\",\n \"description\": \"<string>\",\n \"name\": \"<string>\",\n \"mustEncrypt\": \"<boolean>\",\n \"isUrl\": \"<boolean>\",\n \"isPassword\": \"<boolean>\",\n \"isNotes\": \"<boolean>\",\n \"isFile\": \"<boolean>\",\n \"generatePasswordCharacterSet\": \"<string>\",\n \"generatePasswordLength\": \"<integer>\",\n \"historyLength\": \"<integer>\",\n \"isIndexable\": \"<boolean>\",\n \"isRequired\": \"<boolean>\",\n \"editRequires\": \"Edit\",\n \"hideOnView\": \"<boolean>\",\n \"passwordTypeFieldId\": \"<integer>\",\n \"passwordRequirementId\": \"<integer>\",\n \"sortOrder\": \"<integer>\",\n \"editablePermission\": \"<integer>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"field\": {\n        \"secretTemplateFieldId\": \"<integer>\",\n        \"isExpirationField\": \"<boolean>\",\n        \"displayName\": \"<string>\",\n        \"description\": \"<string>\",\n        \"name\": \"<string>\",\n        \"mustEncrypt\": \"<boolean>\",\n        \"isUrl\": \"<boolean>\",\n        \"isPassword\": \"<boolean>\",\n        \"isNotes\": \"<boolean>\",\n        \"isFile\": \"<boolean>\",\n        \"generatePasswordCharacterSet\": \"<string>\",\n        \"generatePasswordLength\": \"<integer>\",\n        \"historyLength\": \"<integer>\",\n        \"isIndexable\": \"<boolean>\",\n        \"isRequired\": \"<boolean>\",\n        \"editRequires\": \"Owner\",\n        \"hideOnView\": \"<boolean>\",\n        \"passwordTypeFieldId\": \"<integer>\",\n        \"passwordRequirementId\": \"<integer>\",\n        \"sortOrder\": \"<integer>\",\n        \"editablePermission\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates/:templateId?templateId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										":templateId"
									],
									"query": [
										{
											"key": "templateId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"field\": {\n        \"secretTemplateFieldId\": \"<integer>\",\n        \"isExpirationField\": \"<boolean>\",\n        \"displayName\": \"<string>\",\n        \"description\": \"<string>\",\n        \"name\": \"<string>\",\n        \"mustEncrypt\": \"<boolean>\",\n        \"isUrl\": \"<boolean>\",\n        \"isPassword\": \"<boolean>\",\n        \"isNotes\": \"<boolean>\",\n        \"isFile\": \"<boolean>\",\n        \"generatePasswordCharacterSet\": \"<string>\",\n        \"generatePasswordLength\": \"<integer>\",\n        \"historyLength\": \"<integer>\",\n        \"isIndexable\": \"<boolean>\",\n        \"isRequired\": \"<boolean>\",\n        \"editRequires\": \"Owner\",\n        \"hideOnView\": \"<boolean>\",\n        \"passwordTypeFieldId\": \"<integer>\",\n        \"passwordRequirementId\": \"<integer>\",\n        \"sortOrder\": \"<integer>\",\n        \"editablePermission\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates/:templateId?templateId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										":templateId"
									],
									"query": [
										{
											"key": "templateId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"field\": {\n        \"secretTemplateFieldId\": \"<integer>\",\n        \"isExpirationField\": \"<boolean>\",\n        \"displayName\": \"<string>\",\n        \"description\": \"<string>\",\n        \"name\": \"<string>\",\n        \"mustEncrypt\": \"<boolean>\",\n        \"isUrl\": \"<boolean>\",\n        \"isPassword\": \"<boolean>\",\n        \"isNotes\": \"<boolean>\",\n        \"isFile\": \"<boolean>\",\n        \"generatePasswordCharacterSet\": \"<string>\",\n        \"generatePasswordLength\": \"<integer>\",\n        \"historyLength\": \"<integer>\",\n        \"isIndexable\": \"<boolean>\",\n        \"isRequired\": \"<boolean>\",\n        \"editRequires\": \"Owner\",\n        \"hideOnView\": \"<boolean>\",\n        \"passwordTypeFieldId\": \"<integer>\",\n        \"passwordRequirementId\": \"<integer>\",\n        \"sortOrder\": \"<integer>\",\n        \"editablePermission\": \"<integer>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/secret-templates/:templateId?templateId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										":templateId"
									],
									"query": [
										{
											"key": "templateId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "templateId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Generate Password",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/secret-templates/generate-password/:secretfieldId?secretFieldId=<integer>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"secret-templates",
								"generate-password",
								":secretfieldId"
							],
							"query": [
								{
									"key": "secretFieldId",
									"value": "<integer>",
									"description": "Secret field Id"
								}
							],
							"variable": [
								{
									"key": "secretfieldId"
								}
							]
						},
						"description": "Generates a new password matching the Secret Field requirements"
					},
					"response": [
						{
							"name": "Generate Password result",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/generate-password/:secretfieldId?secretFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"generate-password",
										":secretfieldId"
									],
									"query": [
										{
											"key": "secretFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "secretfieldId"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<string>\""
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/generate-password/:secretfieldId?secretFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"generate-password",
										":secretfieldId"
									],
									"query": [
										{
											"key": "secretFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "secretfieldId"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/generate-password/:secretfieldId?secretFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"generate-password",
										":secretfieldId"
									],
									"query": [
										{
											"key": "secretFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "secretfieldId"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/secret-templates/generate-password/:secretfieldId?secretFieldId=<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"secret-templates",
										"generate-password",
										":secretfieldId"
									],
									"query": [
										{
											"key": "secretFieldId",
											"value": "<integer>"
										}
									],
									"variable": [
										{
											"key": "secretfieldId"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "teams",
			"item": [
				{
					"name": "{id}",
					"item": [
						{
							"name": "members",
							"item": [
								{
									"name": "Get Users In Team",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/:id/members?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":id",
												"members"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>",
													"description": "Number of records to skip before taking results"
												},
												{
													"key": "take",
													"value": "<integer>",
													"description": "Maximum number of records to include in results"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>",
													"description": "Sort field name"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>",
													"description": "Sort direction"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>",
													"description": "Priority index. Sorts with lower values are executed earlier"
												},
												{
													"key": "messageText",
													"value": "<string>",
													"description": "MessageText"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Team ID"
												}
											]
										},
										"description": "Get members in a team"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"teamGroupMembershipId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"groupId\": \"<integer>\",\n  \"groupDisplayName\": \"<string>\",\n  \"type\": \"<string>\"\n },\n {\n  \"teamGroupMembershipId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"groupId\": \"<integer>\",\n  \"groupDisplayName\": \"<string>\",\n  \"type\": \"<string>\"\n }\n]"
										}
									]
								},
								{
									"name": "Update Team Members",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"groupIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:id/members",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":id",
												"members"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Team ID"
												}
											]
										},
										"description": "Save members of the team by GroupId"
									},
									"response": [
										{
											"name": "Get Team membership. Includes Groups and Users. User will be their personal GroupId.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"groupIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"teamGroupMembershipId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"groupId\": \"<integer>\",\n  \"groupDisplayName\": \"<string>\",\n  \"type\": \"<string>\"\n },\n {\n  \"teamGroupMembershipId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"groupId\": \"<integer>\",\n  \"groupDisplayName\": \"<string>\",\n  \"type\": \"<string>\"\n }\n]"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"groupIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"groupIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"groupIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/members",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"members"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "sites",
							"item": [
								{
									"name": "Get Sites for a Team",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/:id/sites?includeInactive=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":id",
												"sites"
											],
											"query": [
												{
													"key": "includeInactive",
													"value": "<boolean>",
													"description": "includeInactive"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Team ID"
												}
											]
										},
										"description": "Get sites a team has associated"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Get Team Sites.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites?includeInactive=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													],
													"query": [
														{
															"key": "includeInactive",
															"value": "<boolean>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"teamSiteMapId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"siteId\": \"<integer>\",\n  \"siteName\": \"<string>\"\n },\n {\n  \"teamSiteMapId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"siteId\": \"<integer>\",\n  \"siteName\": \"<string>\"\n }\n]"
										}
									]
								},
								{
									"name": "Update Team Sites",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"shouldRestrictSites\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"siteIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/teams/:id/sites",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												":id",
												"sites"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Team ID"
												}
											]
										},
										"description": "Save sites of the team by SiteId"
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldRestrictSites\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"siteIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldRestrictSites\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"siteIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldRestrictSites\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"siteIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Get Team Sites.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"shouldRestrictSites\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"siteIds\": {\n        \"value\": [\n            \"<integer>\",\n            \"<integer>\"\n        ],\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/teams/<integer>/sites",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"teams",
														"<integer>",
														"sites"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "[\n {\n  \"teamSiteMapId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"siteId\": \"<integer>\",\n  \"siteName\": \"<string>\"\n },\n {\n  \"teamSiteMapId\": \"<integer>\",\n  \"teamId\": \"<integer>\",\n  \"siteId\": \"<integer>\",\n  \"siteName\": \"<string>\"\n }\n]"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get Team",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Team ID"
										}
									]
								},
								"description": "Get a single team by ID"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Team object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"teamId\": \"<integer>\",\n \"teamName\": \"<string>\",\n \"teamDescription\": \"<string>\",\n \"active\": \"<boolean>\",\n \"shouldRestrictSites\": \"<boolean>\",\n \"domainId\": \"<integer>\"\n}"
								}
							]
						},
						{
							"name": "Update Team",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"teamName\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"teamDescription\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/teams/:id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Team ID"
										}
									]
								},
								"description": "Update a single team by ID"
							},
							"response": [
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"teamName\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"teamDescription\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"teamName\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"teamDescription\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Team object",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"teamName\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"teamDescription\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"teamId\": \"<integer>\",\n \"teamName\": \"<string>\",\n \"teamDescription\": \"<string>\",\n \"active\": \"<boolean>\",\n \"shouldRestrictSites\": \"<boolean>\",\n \"domainId\": \"<integer>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"teamName\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"teamDescription\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"domainId\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get Team Audits",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams/:id/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										":id",
										"audits"
									],
									"query": [
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									],
									"variable": [
										{
											"key": "id",
											"value": "<integer>",
											"description": "Team ID"
										}
									]
								},
								"description": "Search, filter, sort, and page team audits"
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>",
												"audits"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>",
												"audits"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Team Audit search result object",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>",
												"audits"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"teamAuditId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"teamId\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"dateRecorded\": \"<dateTime>\",\n   \"action\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"databaseName\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"delegatedUserId\": \"<integer>\",\n   \"ipAddress\": \"<string>\"\n  },\n  {\n   \"teamAuditId\": \"<integer>\",\n   \"userName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"teamId\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"dateRecorded\": \"<dateTime>\",\n   \"action\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"databaseName\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"delegatedUserId\": \"<integer>\",\n   \"ipAddress\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Warn\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/teams/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"teams",
												"<integer>",
												"audits"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Search Teams",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams?filter.searchTerm=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							],
							"query": [
								{
									"key": "filter.searchTerm",
									"value": "<string>",
									"description": "SearchTerm"
								},
								{
									"key": "filter.includeInactive",
									"value": "<boolean>",
									"description": "IncludeInactive"
								},
								{
									"key": "skip",
									"value": "<integer>",
									"description": "Number of records to skip before taking results"
								},
								{
									"key": "take",
									"value": "<integer>",
									"description": "Maximum number of records to include in results"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>",
									"description": "Sort field name"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>",
									"description": "Sort direction"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>",
									"description": "Priority index. Sorts with lower values are executed earlier"
								},
								{
									"key": "messageText",
									"value": "<string>",
									"description": "MessageText"
								}
							]
						},
						"description": "Search, filter, sort, and page teams"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams?filter.searchTerm=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "filter.searchTerm",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Team search result object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams?filter.searchTerm=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "filter.searchTerm",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"teamId\": \"<integer>\",\n   \"teamName\": \"<string>\",\n   \"teamDescription\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"shouldRestrictSites\": \"<boolean>\",\n   \"domainId\": \"<integer>\"\n  },\n  {\n   \"teamId\": \"<integer>\",\n   \"teamName\": \"<string>\",\n   \"teamDescription\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"shouldRestrictSites\": \"<boolean>\",\n   \"domainId\": \"<integer>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams?filter.searchTerm=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "filter.searchTerm",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams?filter.searchTerm=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									],
									"query": [
										{
											"key": "filter.searchTerm",
											"value": "<string>"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>"
										},
										{
											"key": "skip",
											"value": "<integer>"
										},
										{
											"key": "take",
											"value": "<integer>"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>"
										},
										{
											"key": "messageText",
											"value": "<string>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Create Team",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"teamName\": \"<string>\",\n    \"teamDescription\": \"<string>\",\n    \"domainId\": \"<integer>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/teams",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams"
							]
						},
						"description": "Create a new team"
					},
					"response": [
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"teamName\": \"<string>\",\n    \"teamDescription\": \"<string>\",\n    \"domainId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "New Team Id",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"teamName\": \"<string>\",\n    \"teamDescription\": \"<string>\",\n    \"domainId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "\"<integer>\""
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"teamName\": \"<string>\",\n    \"teamDescription\": \"<string>\",\n    \"domainId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"teamName\": \"<string>\",\n    \"teamDescription\": \"<string>\",\n    \"domainId\": \"<integer>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/teams",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Get Team Stub",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/teams/stub",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"teams",
								"stub"
							]
						},
						"description": "Return the default values for a new team"
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										"stub"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Team object",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										"stub"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"teamId\": \"<integer>\",\n \"teamName\": \"<string>\",\n \"teamDescription\": \"<string>\",\n \"active\": \"<boolean>\",\n \"shouldRestrictSites\": \"<boolean>\",\n \"domainId\": \"<integer>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										"stub"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/teams/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"teams",
										"stub"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "ticket-systems",
			"item": [
				{
					"name": "Gets all ticket systems",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ticket-systems?includeInactive=<boolean>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ticket-systems"
							],
							"query": [
								{
									"key": "includeInactive",
									"value": "<boolean>",
									"description": "includeInactive"
								}
							]
						},
						"description": "Gets all ticket systems."
					},
					"response": [
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Ticket System Models",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"ticketSystemId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"viewTicketUrl\": \"<string>\",\n  \"displayMessage\": \"<string>\",\n  \"forceRequireTicketNumber\": \"<integer>\",\n  \"active\": \"<boolean>\",\n  \"ticketSystemTypeId\": \"<integer>\",\n  \"isDefault\": \"<boolean>\"\n },\n {\n  \"ticketSystemId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"description\": \"<string>\",\n  \"viewTicketUrl\": \"<string>\",\n  \"displayMessage\": \"<string>\",\n  \"forceRequireTicketNumber\": \"<integer>\",\n  \"active\": \"<boolean>\",\n  \"ticketSystemTypeId\": \"<integer>\",\n  \"isDefault\": \"<boolean>\"\n }\n]"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems?includeInactive=<boolean>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems"
									],
									"query": [
										{
											"key": "includeInactive",
											"value": "<boolean>"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						}
					]
				},
				{
					"name": "Gets a ticket system by ID",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/ticket-systems/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ticket-systems",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<integer>",
									"description": "Ticket System ID"
								}
							]
						},
						"description": "Gets a ticket system by ID."
					},
					"response": [
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems",
										"<integer>"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						},
						{
							"name": "Ticket System Model",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"ticketSystemId\": \"<integer>\",\n \"name\": \"<string>\",\n \"description\": \"<string>\",\n \"viewTicketUrl\": \"<string>\",\n \"displayMessage\": \"<string>\",\n \"forceRequireTicketNumber\": \"<integer>\",\n \"active\": \"<boolean>\",\n \"ticketSystemTypeId\": \"<integer>\",\n \"isDefault\": \"<boolean>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/ticket-systems/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"ticket-systems",
										"<integer>"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "workflows",
			"item": [
				{
					"name": "templates",
					"item": [
						{
							"name": "{id}",
							"item": [
								{
									"name": "steps",
									"item": [
										{
											"name": "{step Num}",
											"item": [
												{
													"name": "Get a Workflow Template Step",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [
															{
																"key": "Authorization",
																"value": "",
																"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
															}
														],
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/:id/steps/:stepNum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																":id",
																"steps",
																":stepNum"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<integer>",
																	"description": "Workflow Template Id"
																},
																{
																	"key": "stepNum",
																	"value": "<integer>",
																	"description": "Workflow Step Number"
																}
															]
														},
														"description": "Get a step for a workflow template"
													},
													"response": [
														{
															"name": "Internal server error",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
														},
														{
															"name": "Authentication failed",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"message\": \"<string>\"\n}"
														},
														{
															"name": "Bad request",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
														},
														{
															"name": "A workflow step model",
															"originalRequest": {
																"method": "GET",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	}
																],
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"workflowStepTemplateId\": \"<integer>\",\n \"workflowTemplateId\": \"<integer>\",\n \"name\": \"<string>\",\n \"order\": \"<integer>\",\n \"configuration\": {}\n}"
														}
													]
												},
												{
													"name": "Update a Workflow Template Step",
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "PUT",
														"header": [
															{
																"key": "Authorization",
																"value": "",
																"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowStepTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/:id/steps/:stepNum",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																":id",
																"steps",
																":stepNum"
															],
															"variable": [
																{
																	"key": "id",
																	"value": "<integer>",
																	"description": "Workflow Template ID"
																},
																{
																	"key": "stepNum",
																	"value": "<integer>",
																	"description": "Workflow Step Number"
																}
															]
														},
														"description": "Updates a single Workflow Template Step by ID"
													},
													"response": [
														{
															"name": "Internal server error",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"workflowStepTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "Internal Server Error",
															"code": 500,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
														},
														{
															"name": "Bad request",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"workflowStepTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "Bad Request",
															"code": 400,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
														},
														{
															"name": "Workflow Template Step",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"workflowStepTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "OK",
															"code": 200,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"workflowStepTemplateId\": \"<integer>\",\n \"workflowTemplateId\": \"<integer>\",\n \"name\": \"<string>\",\n \"order\": \"<integer>\",\n \"configuration\": {}\n}"
														},
														{
															"name": "Authentication failed",
															"originalRequest": {
																"method": "PUT",
																"header": [
																	{
																		"description": {
																			"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																			"type": "text/plain"
																		},
																		"key": "Authorization",
																		"value": ""
																	},
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"workflowStepTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
																},
																"url": {
																	"raw": "{{baseUrl}}/workflows/templates/<integer>/steps/<integer>",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"workflows",
																		"templates",
																		"<integer>",
																		"steps",
																		"<integer>"
																	]
																}
															},
															"status": "Forbidden",
															"code": 403,
															"_postman_previewlanguage": "json",
															"header": [
																{
																	"key": "Content-Type",
																	"value": "application/json"
																}
															],
															"cookie": [],
															"body": "{\n \"message\": \"<string>\"\n}"
														}
													]
												}
											],
											"_postman_isSubFolder": true
										},
										{
											"name": "Get Workflow Template Steps",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/:id/steps?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														":id",
														"steps"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>",
															"description": "Number of records to skip before taking results"
														},
														{
															"key": "take",
															"value": "<integer>",
															"description": "Maximum number of records to include in results"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>",
															"description": "Sort field name"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>",
															"description": "Sort direction"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>",
															"description": "Priority index. Sorts with lower values are executed earlier"
														},
														{
															"key": "messageText",
															"value": "<string>",
															"description": "MessageText"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "Workflow Template ID"
														}
													]
												},
												"description": "Get all the steps for a workflow template"
											},
											"response": [
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "<integer>"
																},
																{
																	"key": "take",
																	"value": "<integer>"
																},
																{
																	"key": "sortBy[n].name",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].direction",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].priority",
																	"value": "<integer>"
																},
																{
																	"key": "messageText",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "A list of workflow step models",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "<integer>"
																},
																{
																	"key": "take",
																	"value": "<integer>"
																},
																{
																	"key": "sortBy[n].name",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].direction",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].priority",
																	"value": "<integer>"
																},
																{
																	"key": "messageText",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"workflowStepTemplateId\": \"<integer>\",\n   \"workflowTemplateId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"order\": \"<integer>\",\n   \"configuration\": {}\n  },\n  {\n   \"workflowStepTemplateId\": \"<integer>\",\n   \"workflowTemplateId\": \"<integer>\",\n   \"name\": \"<string>\",\n   \"order\": \"<integer>\",\n   \"configuration\": {}\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Fatal\",\n \"messageText\": \"<string>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "<integer>"
																},
																{
																	"key": "take",
																	"value": "<integer>"
																},
																{
																	"key": "sortBy[n].name",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].direction",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].priority",
																	"value": "<integer>"
																},
																{
																	"key": "messageText",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "GET",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															}
														],
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															],
															"query": [
																{
																	"key": "skip",
																	"value": "<integer>"
																},
																{
																	"key": "take",
																	"value": "<integer>"
																},
																{
																	"key": "sortBy[n].name",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].direction",
																	"value": "<string>"
																},
																{
																	"key": "sortBy[n].priority",
																	"value": "<integer>"
																},
																{
																	"key": "messageText",
																	"value": "<string>"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												}
											]
										},
										{
											"name": "Update Workflow Template Steps",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"workflowStepTemplates\": [\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        },\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        }\n    ]\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/:id/steps",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														":id",
														"steps"
													],
													"variable": [
														{
															"key": "id",
															"value": "<integer>",
															"description": "Workflow Template ID"
														}
													]
												},
												"description": "Update the steps for a workflow template"
											},
											"response": [
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowStepTemplates\": [\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        },\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowStepTemplates\": [\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        },\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowStepTemplates\": [\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        },\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "The workflow template steps",
													"originalRequest": {
														"method": "PUT",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowStepTemplates\": [\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        },\n        {\n            \"workflowStepTemplateId\": \"<integer>\",\n            \"workflowTemplateId\": \"<integer>\",\n            \"name\": \"<string>\",\n            \"order\": \"<integer>\",\n            \"configuration\": {}\n        }\n    ]\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/<integer>/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																"<integer>",
																"steps"
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "[\n {\n  \"workflowStepTemplateId\": \"<integer>\",\n  \"workflowTemplateId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"order\": \"<integer>\",\n  \"configuration\": {}\n },\n {\n  \"workflowStepTemplateId\": \"<integer>\",\n  \"workflowTemplateId\": \"<integer>\",\n  \"name\": \"<string>\",\n  \"order\": \"<integer>\",\n  \"configuration\": {}\n }\n]"
												}
											]
										},
										{
											"name": "Create Workflow Step",
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "",
														"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"workflowTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/:id/steps",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														":id",
														"steps"
													],
													"variable": [
														{
															"key": "id"
														}
													]
												},
												"description": "Create a step for a Workflow Template"
											},
											"response": [
												{
													"name": "Authentication failed",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/:id/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																":id",
																"steps"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Forbidden",
													"code": 403,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\"\n}"
												},
												{
													"name": "New Workflow Template Steps ID",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/:id/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																":id",
																"steps"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "OK",
													"code": 200,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "\"<integer>\""
												},
												{
													"name": "Bad request",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/:id/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																":id",
																"steps"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Bad Request",
													"code": 400,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
												},
												{
													"name": "Internal server error",
													"originalRequest": {
														"method": "POST",
														"header": [
															{
																"description": {
																	"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
																	"type": "text/plain"
																},
																"key": "Authorization",
																"value": ""
															},
															{
																"key": "Content-Type",
																"value": "application/json"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"workflowTemplateId\": \"<integer>\",\n    \"name\": \"<string>\",\n    \"order\": \"<integer>\",\n    \"configuration\": {}\n}"
														},
														"url": {
															"raw": "{{baseUrl}}/workflows/templates/:id/steps",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"workflows",
																"templates",
																":id",
																"steps"
															],
															"variable": [
																{
																	"key": "id"
																}
															]
														}
													},
													"status": "Internal Server Error",
													"code": 500,
													"_postman_previewlanguage": "json",
													"header": [
														{
															"key": "Content-Type",
															"value": "application/json"
														}
													],
													"cookie": [],
													"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
												}
											]
										}
									],
									"_postman_isSubFolder": true
								},
								{
									"name": "Get a Workflow Template",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Workflow Template Id"
												}
											]
										},
										"description": "Request a specific Workflow Template by ID."
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "The requested Workflow Template.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"workflowTemplateId\": \"<integer>\",\n \"workflowType\": \"AccessRequest\",\n \"name\": \"<string>\",\n \"typeName\": \"<string>\",\n \"description\": \"<string>\",\n \"active\": \"<boolean>\",\n \"reusable\": \"<boolean>\",\n \"expirationMinutes\": \"<integer>\",\n \"configurationJson\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Update a Workflow Template",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"description\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"expirationMinutes\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"configurationJson\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"isCopy\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/:id",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Workflow Template ID"
												}
											]
										},
										"description": "Update a single Workflow Template by ID."
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"description\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"expirationMinutes\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"configurationJson\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"isCopy\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "The updated Workflow Template.",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"description\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"expirationMinutes\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"configurationJson\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"isCopy\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"workflowTemplateId\": \"<integer>\",\n \"workflowType\": \"AccessRequest\",\n \"name\": \"<string>\",\n \"typeName\": \"<string>\",\n \"description\": \"<string>\",\n \"active\": \"<boolean>\",\n \"reusable\": \"<boolean>\",\n \"expirationMinutes\": \"<integer>\",\n \"configurationJson\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"description\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"expirationMinutes\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"configurationJson\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"isCopy\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "PUT",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"name\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"description\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"active\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"expirationMinutes\": {\n        \"value\": \"<integer>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"configurationJson\": {\n        \"value\": \"<string>\",\n        \"dirty\": \"<boolean>\"\n    },\n    \"isCopy\": {\n        \"value\": \"<boolean>\",\n        \"dirty\": \"<boolean>\"\n    }\n}"
												},
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Get a Workflow Template Audit List",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/:id/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												":id",
												"audits"
											],
											"query": [
												{
													"key": "skip",
													"value": "<integer>",
													"description": "Number of records to skip before taking results"
												},
												{
													"key": "take",
													"value": "<integer>",
													"description": "Maximum number of records to include in results"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>",
													"description": "Sort field name"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>",
													"description": "Sort direction"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>",
													"description": "Priority index. Sorts with lower values are executed earlier"
												},
												{
													"key": "messageText",
													"value": "<string>",
													"description": "MessageText"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Workflow Template Id"
												}
											]
										},
										"description": "Search, filter, sort, and page Workflow Template Audits."
									},
									"response": [
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"audits"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "A paginated list of Workflow Template Audits.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"audits"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"workflowTemplateAuditId\": \"<integer>\",\n   \"workflowTemplateId\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"dateRecorded\": \"<dateTime>\",\n   \"ipAddress\": \"<string>\",\n   \"delegateUserId\": \"<integer>\",\n   \"machineName\": \"<string>\",\n   \"databaseName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"formattedDate\": \"<string>\",\n   \"userName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"delegatedUserName\": \"<string>\"\n  },\n  {\n   \"workflowTemplateAuditId\": \"<integer>\",\n   \"workflowTemplateId\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"dateRecorded\": \"<dateTime>\",\n   \"ipAddress\": \"<string>\",\n   \"delegateUserId\": \"<integer>\",\n   \"machineName\": \"<string>\",\n   \"databaseName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"formattedDate\": \"<string>\",\n   \"userName\": \"<string>\",\n   \"displayName\": \"<string>\",\n   \"delegatedUserName\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"audits"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/audits?skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"audits"
													],
													"query": [
														{
															"key": "skip",
															"value": "<integer>"
														},
														{
															"key": "take",
															"value": "<integer>"
														},
														{
															"key": "sortBy[n].name",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].direction",
															"value": "<string>"
														},
														{
															"key": "sortBy[n].priority",
															"value": "<integer>"
														},
														{
															"key": "messageText",
															"value": "<string>"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										}
									]
								},
								{
									"name": "Count of Entities using a Workflow Template",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/:id/entities/:includeAll?includeAll=<boolean>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												":id",
												"entities",
												":includeAll"
											],
											"query": [
												{
													"key": "includeAll",
													"value": "<boolean>",
													"description": "includeAll"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Workflow Template Id"
												}
											]
										},
										"description": "Request the number of entities that use the Workflow Template."
									},
									"response": [
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/entities/:includeAll?includeAll=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"entities",
														":includeAll"
													],
													"query": [
														{
															"key": "includeAll",
															"value": "<boolean>"
														}
													],
													"variable": [
														{
															"key": "includeAll"
														}
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/entities/:includeAll?includeAll=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"entities",
														":includeAll"
													],
													"query": [
														{
															"key": "includeAll",
															"value": "<boolean>"
														}
													],
													"variable": [
														{
															"key": "includeAll"
														}
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										},
										{
											"name": "The number of entities that use the workflow template.",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/entities/:includeAll?includeAll=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"entities",
														":includeAll"
													],
													"query": [
														{
															"key": "includeAll",
															"value": "<boolean>"
														}
													],
													"variable": [
														{
															"key": "includeAll"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<integer>\""
										},
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "GET",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/entities/:includeAll?includeAll=<boolean>",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"entities",
														":includeAll"
													],
													"query": [
														{
															"key": "includeAll",
															"value": "<boolean>"
														}
													],
													"variable": [
														{
															"key": "includeAll"
														}
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										}
									]
								},
								{
									"name": "Cancel Workflow Requests",
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "",
												"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/:id/cancel-requests",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												":id",
												"cancel-requests"
											],
											"variable": [
												{
													"key": "id",
													"value": "<integer>",
													"description": "Workflow Template Id"
												}
											]
										},
										"description": "Cancel all Workflow Requests that are using the provided Workflow Template."
									},
									"response": [
										{
											"name": "Internal server error",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/cancel-requests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"cancel-requests"
													]
												}
											},
											"status": "Internal Server Error",
											"code": 500,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
										},
										{
											"name": "Confirmation of cancellation.",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/cancel-requests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"cancel-requests"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "\"<string>\""
										},
										{
											"name": "Bad request",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/cancel-requests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"cancel-requests"
													]
												}
											},
											"status": "Bad Request",
											"code": 400,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
										},
										{
											"name": "Authentication failed",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"description": {
															"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
															"type": "text/plain"
														},
														"key": "Authorization",
														"value": ""
													}
												],
												"url": {
													"raw": "{{baseUrl}}/workflows/templates/<integer>/cancel-requests",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"workflows",
														"templates",
														"<integer>",
														"cancel-requests"
													]
												}
											},
											"status": "Forbidden",
											"code": 403,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json"
												}
											],
											"cookie": [],
											"body": "{\n \"message\": \"<string>\"\n}"
										}
									]
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Get a Workflow Template List",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/templates?filter.workflowType=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"templates"
									],
									"query": [
										{
											"key": "filter.workflowType",
											"value": "<string>",
											"description": "WorkflowType"
										},
										{
											"key": "filter.includeInactive",
											"value": "<boolean>",
											"description": "IncludeInactive"
										},
										{
											"key": "skip",
											"value": "<integer>",
											"description": "Number of records to skip before taking results"
										},
										{
											"key": "take",
											"value": "<integer>",
											"description": "Maximum number of records to include in results"
										},
										{
											"key": "sortBy[n].name",
											"value": "<string>",
											"description": "Sort field name"
										},
										{
											"key": "sortBy[n].direction",
											"value": "<string>",
											"description": "Sort direction"
										},
										{
											"key": "sortBy[n].priority",
											"value": "<integer>",
											"description": "Priority index. Sorts with lower values are executed earlier"
										},
										{
											"key": "messageText",
											"value": "<string>",
											"description": "MessageText"
										}
									]
								},
								"description": "Search, filter, sort, and page Workflow Templates."
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates?filter.workflowType=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											],
											"query": [
												{
													"key": "filter.workflowType",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "A paginated list of Workflow Templates.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates?filter.workflowType=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											],
											"query": [
												{
													"key": "filter.workflowType",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"workflowTemplateId\": \"<integer>\",\n   \"workflowType\": \"AccessRequest\",\n   \"name\": \"<string>\",\n   \"typeName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"reusable\": \"<boolean>\",\n   \"expirationMinutes\": \"<integer>\",\n   \"configurationJson\": \"<string>\"\n  },\n  {\n   \"workflowTemplateId\": \"<integer>\",\n   \"workflowType\": \"AccessRequest\",\n   \"name\": \"<string>\",\n   \"typeName\": \"<string>\",\n   \"description\": \"<string>\",\n   \"active\": \"<boolean>\",\n   \"reusable\": \"<boolean>\",\n   \"expirationMinutes\": \"<integer>\",\n   \"configurationJson\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"Retry\",\n \"messageText\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates?filter.workflowType=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											],
											"query": [
												{
													"key": "filter.workflowType",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates?filter.workflowType=<string>&filter.includeInactive=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											],
											"query": [
												{
													"key": "filter.workflowType",
													"value": "<string>"
												},
												{
													"key": "filter.includeInactive",
													"value": "<boolean>"
												},
												{
													"key": "skip",
													"value": "<integer>"
												},
												{
													"key": "take",
													"value": "<integer>"
												},
												{
													"key": "sortBy[n].name",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].direction",
													"value": "<string>"
												},
												{
													"key": "sortBy[n].priority",
													"value": "<integer>"
												},
												{
													"key": "messageText",
													"value": "<string>"
												}
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Create a Workflow Template",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"workflowType\": \"AccessRequest\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"expirationMinutes\": \"<integer>\",\n    \"configurationJson\": \"<string>\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/workflows/templates",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"templates"
									]
								},
								"description": "Create a new Workflow Template."
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"workflowType\": \"AccessRequest\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"expirationMinutes\": \"<integer>\",\n    \"configurationJson\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/workflows/templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "The new Workflow Template's ID.",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"workflowType\": \"AccessRequest\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"expirationMinutes\": \"<integer>\",\n    \"configurationJson\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/workflows/templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "\"<integer>\""
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"workflowType\": \"AccessRequest\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"expirationMinutes\": \"<integer>\",\n    \"configurationJson\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/workflows/templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"workflowType\": \"AccessRequest\",\n    \"name\": \"<string>\",\n    \"description\": \"<string>\",\n    \"expirationMinutes\": \"<integer>\",\n    \"configurationJson\": \"<string>\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/workflows/templates",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								}
							]
						},
						{
							"name": "Get a Workflow Template Step Stub",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/templates/steps/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"templates",
										"steps",
										"stub"
									]
								},
								"description": "Get an empty Workflow Template Step"
							},
							"response": [
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/steps/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"steps",
												"stub"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								},
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/steps/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"steps",
												"stub"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "An empty workflow step",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/steps/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"steps",
												"stub"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"workflowTemplateId\": \"<integer>\",\n \"workflowType\": \"AccessRequest\",\n \"name\": \"<string>\",\n \"typeName\": \"<string>\",\n \"description\": \"<string>\",\n \"active\": \"<boolean>\",\n \"reusable\": \"<boolean>\",\n \"expirationMinutes\": \"<integer>\",\n \"configurationJson\": \"<string>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/steps/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"steps",
												"stub"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								}
							]
						},
						{
							"name": "Get a Workflow Template Stub",
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/templates/stub",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"templates",
										"stub"
									]
								},
								"description": "Get an empty Workflow Template."
							},
							"response": [
								{
									"name": "Bad request",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"stub"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
								},
								{
									"name": "Internal server error",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"stub"
											]
										}
									},
									"status": "Internal Server Error",
									"code": 500,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
								},
								{
									"name": "An Workflow Template.",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"stub"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"workflowTemplateId\": \"<integer>\",\n \"workflowType\": \"AccessRequest\",\n \"name\": \"<string>\",\n \"typeName\": \"<string>\",\n \"description\": \"<string>\",\n \"active\": \"<boolean>\",\n \"reusable\": \"<boolean>\",\n \"expirationMinutes\": \"<integer>\",\n \"configurationJson\": \"<string>\"\n}"
								},
								{
									"name": "Authentication failed",
									"originalRequest": {
										"method": "GET",
										"header": [
											{
												"description": {
													"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
													"type": "text/plain"
												},
												"key": "Authorization",
												"value": ""
											}
										],
										"url": {
											"raw": "{{baseUrl}}/workflows/templates/stub",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"workflows",
												"templates",
												"stub"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json"
										}
									],
									"cookie": [],
									"body": "{\n \"message\": \"<string>\"\n}"
								}
							]
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "Get Workflow Instances By Workflow Template Id.",
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "",
								"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
							}
						],
						"url": {
							"raw": "{{baseUrl}}/workflows/instances/template/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"workflows",
								"instances",
								"template",
								":id"
							],
							"variable": [
								{
									"key": "id",
									"value": "<integer>",
									"description": "Workflow Template ID"
								}
							]
						},
						"description": "Get active workflow instances that use the given workflow template"
					},
					"response": [
						{
							"name": "The active workflow instances that use the Workflow Template",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/instances/template/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"instances",
										"template",
										"<integer>"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "[\n {\n  \"id\": \"<integer>\",\n  \"entityWorkflowMapId\": \"<integer>\",\n  \"startTime\": \"<dateTime>\",\n  \"endTime\": \"<dateTime>\",\n  \"expirationTime\": \"<dateTime>\",\n  \"status\": \"<string>\",\n  \"currentStepId\": \"<integer>\",\n  \"currentState\": \"<string>\",\n  \"currentStepState\": \"Pending\",\n  \"currentStateInfoJson\": \"<string>\",\n  \"configurationJson\": \"<string>\",\n  \"pendingTransaction\": \"<boolean>\",\n  \"workflowTemplateId\": \"<integer>\"\n },\n {\n  \"id\": \"<integer>\",\n  \"entityWorkflowMapId\": \"<integer>\",\n  \"startTime\": \"<dateTime>\",\n  \"endTime\": \"<dateTime>\",\n  \"expirationTime\": \"<dateTime>\",\n  \"status\": \"<string>\",\n  \"currentStepId\": \"<integer>\",\n  \"currentState\": \"<string>\",\n  \"currentStepState\": \"Approved\",\n  \"currentStateInfoJson\": \"<string>\",\n  \"configurationJson\": \"<string>\",\n  \"pendingTransaction\": \"<boolean>\",\n  \"workflowTemplateId\": \"<integer>\"\n }\n]"
						},
						{
							"name": "Bad request",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/instances/template/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"instances",
										"template",
										"<integer>"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
						},
						{
							"name": "Internal server error",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/instances/template/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"instances",
										"template",
										"<integer>"
									]
								}
							},
							"status": "Internal Server Error",
							"code": 500,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
						},
						{
							"name": "Authentication failed",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"description": {
											"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
											"type": "text/plain"
										},
										"key": "Authorization",
										"value": ""
									}
								],
								"url": {
									"raw": "{{baseUrl}}/workflows/instances/template/<integer>",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"workflows",
										"instances",
										"template",
										"<integer>"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								}
							],
							"cookie": [],
							"body": "{\n \"message\": \"<string>\"\n}"
						}
					]
				}
			]
		},
		{
			"name": "Perform an online activation of Secret Server",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"email\": \"<string>\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/activations",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"activations"
					]
				},
				"description": "Perform an online activation of Secret Server"
			},
			"response": [
				{
					"name": "Activation result object",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"email\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/activations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"activations"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"success\": \"<boolean>\",\n \"errorMessage\": \"<string>\",\n \"debugMessages\": [\n  \"<string>\",\n  \"<string>\"\n ]\n}"
				},
				{
					"name": "Authentication failed",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"email\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/activations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"activations"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"email\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/activations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"activations"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
				},
				{
					"name": "Internal server error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"<string>\",\n    \"phoneNumber\": \"<string>\",\n    \"email\": \"<string>\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/activations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"activations"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Synchronize Active Directory Groups and Users",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
					}
				],
				"url": {
					"raw": "{{baseUrl}}/active-directory/synchronize",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"active-directory",
						"synchronize"
					]
				},
				"description": "Synchronize Members from Active Directory Groups that have Sync enabled"
			},
			"response": [
				{
					"name": "Internal server error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/active-directory/synchronize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"active-directory",
								"synchronize"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
				},
				{
					"name": "Bool",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/active-directory/synchronize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"active-directory",
								"synchronize"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "\"<boolean>\""
				},
				{
					"name": "Authentication failed",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/active-directory/synchronize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"active-directory",
								"synchronize"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/active-directory/synchronize",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"active-directory",
								"synchronize"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
				}
			]
		},
		{
			"name": "Lookup Application Accounts",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
					}
				],
				"url": {
					"raw": "{{baseUrl}}/application-accounts/lookup?filter.searchText=<string>&filter.includeAll=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"application-accounts",
						"lookup"
					],
					"query": [
						{
							"key": "filter.searchText",
							"value": "<string>",
							"description": "Search text"
						},
						{
							"key": "filter.includeAll",
							"value": "<boolean>",
							"description": "IncludeAll"
						},
						{
							"key": "skip",
							"value": "<integer>",
							"description": "Number of records to skip before taking results"
						},
						{
							"key": "take",
							"value": "<integer>",
							"description": "Maximum number of records to include in results"
						},
						{
							"key": "sortBy[n].name",
							"value": "<string>",
							"description": "Sort field name"
						},
						{
							"key": "sortBy[n].direction",
							"value": "<string>",
							"description": "Sort direction"
						},
						{
							"key": "sortBy[n].priority",
							"value": "<integer>",
							"description": "Priority index. Sorts with lower values are executed earlier"
						},
						{
							"key": "messageText",
							"value": "<string>",
							"description": "MessageText"
						}
					]
				},
				"description": "Search, filter, sort, and page application accounts, returning only user id and display"
			},
			"response": [
				{
					"name": "Authentication failed",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/application-accounts/lookup?filter.searchText=<string>&filter.includeAll=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application-accounts",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.includeAll",
									"value": "<boolean>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "Internal server error",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/application-accounts/lookup?filter.searchText=<string>&filter.includeAll=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application-accounts",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.includeAll",
									"value": "<boolean>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
				},
				{
					"name": "User search result object",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/application-accounts/lookup?filter.searchText=<string>&filter.includeAll=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application-accounts",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.includeAll",
									"value": "<boolean>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"value\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"None\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/application-accounts/lookup?filter.searchText=<string>&filter.includeAll=<boolean>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"application-accounts",
								"lookup"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.includeAll",
									"value": "<boolean>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
				}
			]
		},
		{
			"name": "Expire Session",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
					}
				],
				"url": {
					"raw": "{{baseUrl}}/oauth-expiration",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"oauth-expiration"
					]
				},
				"description": "Expire the current user session"
			},
			"response": [
				{
					"name": "Internal server error",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth-expiration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth-expiration"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
				},
				{
					"name": "Authentication failed",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth-expiration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth-expiration"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth-expiration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth-expiration"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
				},
				{
					"name": "Whether the expiration succeeded",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/oauth-expiration",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"oauth-expiration"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "\"<boolean>\""
				}
			]
		},
		{
			"name": "Search SDK Client Audits",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
					}
				],
				"url": {
					"raw": "{{baseUrl}}/sdk-client-audits?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"sdk-client-audits"
					],
					"query": [
						{
							"key": "filter.searchText",
							"value": "<string>",
							"description": "SearchText"
						},
						{
							"key": "filter.userId",
							"value": "<integer>",
							"description": "UserId"
						},
						{
							"key": "filter.operator",
							"value": "<string>",
							"description": "Operator"
						},
						{
							"key": "skip",
							"value": "<integer>",
							"description": "Number of records to skip before taking results"
						},
						{
							"key": "take",
							"value": "<integer>",
							"description": "Maximum number of records to include in results"
						},
						{
							"key": "sortBy[n].name",
							"value": "<string>",
							"description": "Sort field name"
						},
						{
							"key": "sortBy[n].direction",
							"value": "<string>",
							"description": "Sort direction"
						},
						{
							"key": "sortBy[n].priority",
							"value": "<integer>",
							"description": "Priority index. Sorts with lower values are executed earlier"
						},
						{
							"key": "messageText",
							"value": "<string>",
							"description": "MessageText"
						}
					]
				},
				"description": "Search, filter, sort, and page app SDK Client audits"
			},
			"response": [
				{
					"name": "Internal server error",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sdk-client-audits?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-audits"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.userId",
									"value": "<integer>"
								},
								{
									"key": "filter.operator",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sdk-client-audits?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-audits"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.userId",
									"value": "<integer>"
								},
								{
									"key": "filter.operator",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
				},
				{
					"name": "Authentication failed",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sdk-client-audits?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-audits"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.userId",
									"value": "<integer>"
								},
								{
									"key": "filter.operator",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "SDK Client Audit search result object",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/sdk-client-audits?filter.searchText=<string>&filter.userId=<integer>&filter.operator=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"sdk-client-audits"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "filter.userId",
									"value": "<integer>"
								},
								{
									"key": "filter.operator",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"filter\": {\n  \"searchText\": \"<string>\",\n  \"userId\": \"<integer>\",\n  \"operator\": \"All\"\n },\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"id\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"userDisplayName\": \"<string>\",\n   \"sdkClientAccountId\": \"<integer>\",\n   \"sdkClientAccountName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"ipAddress\": \"<string>\",\n   \"createdOn\": \"<dateTime>\",\n   \"correlationId\": \"<uuid>\"\n  },\n  {\n   \"id\": \"<integer>\",\n   \"userId\": \"<integer>\",\n   \"userDisplayName\": \"<string>\",\n   \"sdkClientAccountId\": \"<integer>\",\n   \"sdkClientAccountName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"ipAddress\": \"<string>\",\n   \"createdOn\": \"<dateTime>\",\n   \"correlationId\": \"<uuid>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Asc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Search Security Audit Logs",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
					}
				],
				"url": {
					"raw": "{{baseUrl}}/security-audit-logs?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"security-audit-logs"
					],
					"query": [
						{
							"key": "filter.searchText",
							"value": "<string>",
							"description": "SearchText"
						},
						{
							"key": "skip",
							"value": "<integer>",
							"description": "Number of records to skip before taking results"
						},
						{
							"key": "take",
							"value": "<integer>",
							"description": "Maximum number of records to include in results"
						},
						{
							"key": "sortBy[n].name",
							"value": "<string>",
							"description": "Sort field name"
						},
						{
							"key": "sortBy[n].direction",
							"value": "<string>",
							"description": "Sort direction"
						},
						{
							"key": "sortBy[n].priority",
							"value": "<integer>",
							"description": "Priority index. Sorts with lower values are executed earlier"
						},
						{
							"key": "messageText",
							"value": "<string>",
							"description": "MessageText"
						}
					]
				},
				"description": "Search, filter, sort, and page security audit logs"
			},
			"response": [
				{
					"name": "Security audit log search result object",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/security-audit-logs?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"security-audit-logs"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"filter\": {\n  \"searchText\": \"<string>\"\n },\n \"skip\": \"<integer>\",\n \"take\": \"<integer>\",\n \"total\": \"<integer>\",\n \"pageCount\": \"<integer>\",\n \"currentPage\": \"<integer>\",\n \"batchCount\": \"<integer>\",\n \"prevSkip\": \"<integer>\",\n \"nextSkip\": \"<integer>\",\n \"hasPrev\": \"<boolean>\",\n \"hasNext\": \"<boolean>\",\n \"records\": [\n  {\n   \"dateRecorded\": \"<dateTime>\",\n   \"dateRecordedDisplay\": \"<string>\",\n   \"ipAddress\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"databaseName\": \"<string>\",\n   \"logSourceName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"eventEntityType\": \"<string>\",\n   \"byUserDisplayName\": \"<string>\"\n  },\n  {\n   \"dateRecorded\": \"<dateTime>\",\n   \"dateRecordedDisplay\": \"<string>\",\n   \"ipAddress\": \"<string>\",\n   \"notes\": \"<string>\",\n   \"machineName\": \"<string>\",\n   \"databaseName\": \"<string>\",\n   \"logSourceName\": \"<string>\",\n   \"action\": \"<string>\",\n   \"eventEntityType\": \"<string>\",\n   \"byUserDisplayName\": \"<string>\"\n  }\n ],\n \"sortBy\": [\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  },\n  {\n   \"name\": \"<string>\",\n   \"direction\": \"Desc\",\n   \"priority\": \"<integer>\"\n  }\n ],\n \"success\": \"<boolean>\",\n \"severity\": \"None\",\n \"messageText\": \"<string>\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/security-audit-logs?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"security-audit-logs"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
				},
				{
					"name": "Internal server error",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/security-audit-logs?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"security-audit-logs"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
				},
				{
					"name": "Authentication failed",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/security-audit-logs?filter.searchText=<string>&skip=<integer>&take=<integer>&sortBy[n].name=<string>&sortBy[n].direction=<string>&sortBy[n].priority=<integer>&messageText=<string>",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"security-audit-logs"
							],
							"query": [
								{
									"key": "filter.searchText",
									"value": "<string>"
								},
								{
									"key": "skip",
									"value": "<integer>"
								},
								{
									"key": "take",
									"value": "<integer>"
								},
								{
									"key": "sortBy[n].name",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].direction",
									"value": "<string>"
								},
								{
									"key": "sortBy[n].priority",
									"value": "<integer>"
								},
								{
									"key": "messageText",
									"value": "<string>"
								}
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\"\n}"
				}
			]
		},
		{
			"name": "Secret Server Version",
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"description": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>."
					}
				],
				"url": {
					"raw": "{{baseUrl}}/version",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"version"
					]
				},
				"description": "Retrieve Secret Server Version"
			},
			"response": [
				{
					"name": "Authentication failed",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "Forbidden",
					"code": 403,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\"\n}"
				},
				{
					"name": "Bad request",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"messageDetail\": \"<string>\",\n \"errorCode\": \"<string>\",\n \"modelState\": \"<object>\"\n}"
				},
				{
					"name": "Unknown or empty response",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "text",
					"header": [
						{
							"key": "Content-Type",
							"value": "text/plain"
						}
					],
					"cookie": [],
					"body": ""
				},
				{
					"name": "Internal server error",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"description": {
									"content": "Perform a POST request to `/oauth2/token`. It should include three form data parameters - `username`, `password`, and `grant_type`.The `grant_type` parameter should always have the value `password`.The access token returned should be included in the header of subsequent requests, like 'Authorization: Bearer <em>token</em>'. The token remains valid for a time period returned in the 'expires_in' property (in seconds). For details, see the <a href=\"../OAuth/\">token request documentation</a>.",
									"type": "text/plain"
								},
								"key": "Authorization",
								"value": ""
							}
						],
						"url": {
							"raw": "{{baseUrl}}/version",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"version"
							]
						}
					},
					"status": "Internal Server Error",
					"code": 500,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n \"message\": \"<string>\",\n \"exceptionMessage\": \"<string>\",\n \"exceptionType\": \"<string>\",\n \"stackTrace\": \"<string>\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "e9c97336-a8db-4d22-ba4f-2de4bf797e88",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "79dec56e-969b-41b4-ad1d-5d2dc829e280",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "107ff09d-1976-4e67-a1b6-48603dca3419",
			"key": "baseUrl",
			"value": "/SecretServer/api/v1",
			"type": "string"
		}
	]
}